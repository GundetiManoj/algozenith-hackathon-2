example
1:
the
=
output:
input:
constraints:
of
<=
return
2:
1
is
and
a
explanation:
in
are
to
that
an
given
2
if
0
number
3
be
you
array
all
integer
can
it
with
3:
each
for
there
two
where
any
or
4
n
one
==
at
from
not
only
we
as
have
-
5
105
+
by
no
so
will
has
this
such
string
1,
2,
1.
104
following
which
on
integers
same
first
after
100
6
1000
than
answer
length
note
109
<
3,
*
nums
may
example,
x
then
possible
nums.length
maximum
value
i
english
consists
minimum
2.
nums[i]
10
ith
k
order.
0.
7
lowercase
equal
sum
some
3.
since
every
also
its
contains
between
should
letters.
elements
more
both
4,
true
s
must
false
most
cannot
range
other
binary
either
8
valid
5,
total
0,
second
values
they
9
represents
because
[1,
does
left
into
s.length
0-indexed
characters
find
make
n,
exactly
4.
three
nodes
their
element
result
positive
but
least
order
m
different
right
7.
do
strings
list
index
-1
new
your
int
choose
array.
when
time
numbers
size
multiple
input
letters
tree
unique.
need
get
them
last
sequence
2d
contain
representing
guaranteed
n.
row
less
5.
-1.
k.
node
above
character
empty
another
indices
sorted
column
j
m,
it.
query
shown
output
write
smallest
starting
these
format
consist
root
nums.
6,
arrays
type
using
6.
(i.e.,
without
key
matrix
adjacent
node.val
string.
single
could
20
unique
arr
name
1)
move
->
!=
largest
non-empty
grid
500
position
distinct
consisting
b
within
k,
50
table
before
exists
represented
path
greater
becomes
digits
nums,
way
//
modulo
made
times
pair
returns
calls
next
form
considered
start
otherwise.
|
third
even
s.
want
set
arr[i]
106
indicates
7,
12
example.
15
already
take
primary
[0,
contiguous
substring
sql
table:
schema
table.
1]
implement
defined
would
s,
target
operations
arr.length
always
notice
follow
large,
use
integer.
words
end
operation
four
them.
note:
false.
follows:
once
pairs
was
otherwise,
remove
while
remaining
subarray
containing
original
integers.
cell
11
>
class:
2)
ways
longest
30
times.
until
explanation
id
means
called
/
initializes
respectively.
up
word
words,
tree.
grid.length
[]
initially
consecutive
reach
add
denotes
2nd
numbered
tree,
strictly
difference
generated
starts
characters.
leading
letter
function
200
however,
1st
are:
grid[i].length
[1]
solution
change
object
up:
[null,
case
9.
...
many
digit
grid.
grid[i][j]
cells
[2,
order,
non-negative
final
that:
10,
resulting
now
[1],
current
edges
how
shows
smaller
'a'
10.
moves
3)
3rd
value.
i,
allowed
replace
once.
impossible
still
0)
represent
left,
solve
space
top
where:
test
very
product
edge
amount
formed
score
point
distance
appear
group
positions
[1,2,3]
labeled
varchar
8,
thus,
assume
digits.
16
13
perform
therefore,
part
time.
subsequence
points
obtain
alice
among
-104
1],
(1,
number.
distinct.
s[i]
(0,
[1,2]
steps
y
optimal
step
takes
void
used
pick
whose
needed
deleting
only.
ascending
>=
accepted.
connected
absolute
c
"abc"
8.
split
9,
returned
about
is:
were
[2],
words.length
integers,
"a"
changing
bob
elements.
queries
who
answers
operation,
delete
true.
rows
rules:
being
231
square
through
substrings
day
corresponding
14
answer[i]
x.
num
let
target.
separated
uppercase
(1
cases
become
words[i].length
words[i]
arr,
person
increasing
permutation
ends
count
swap
right,
lower
call
[3,
(2,
right.
words.
like
place
out
appears
exist
above.
i.
ai
[ai,
on.
null,
'0'
(0-indexed).
104].
formally,
task
just
[1,2,3,4]
2000
'b'
occurs
target,
fourth
(i.e.
bi
too
search
people
graph
subarrays
previous
array,
present
""
is,
lexicographically
divide
jth
2],
letters,
consider
been
operations.
[],
3],
odd
repeated
good
red
initially,
figure
(i,
'a',
placed
moving
information
nums2
nums1
[0]
-1000
edges.length
satisfies
x,
(2
answer.
b,
highest
equals
report
shortest
game
required
data
t
queries.length
initial
removing
following:
5000
values.
(0-indexed)
32-bit
bi]
1).
down
(the
non-decreasing
price
ordered
+-------------+---------+
problem
25
those
never
applying
...,
nums2.length
(possibly
4:
b.
[2]
time,
digits,
edges[i]
[3],
types
it's
valid.
cost
zero
1's
decimal
n)
height
then,
equal.
300
choosing
move,
returned.
common
proven
arr.
possible.
other.
[5,
node.
go
ai,
2]
divisible
apply
undirected
linked
according
over
algorithm
added
val
otherwise
blue
representation
line
5)
17
itself.
'b',
structure
-105
empty.
infinite
bottom
obtained
complete
d
whether
[xi,
yi
nums[0]
(n
row,
duplicate
date
reverse
see
list.
performing
(in
results
0th
nums1[i],
[1,2,3],
define
zeros.
-109
diagram
[1,2],
1].
numbers.
3]
"a",
put
code
'
xi,
conditions:
chosen
string,
except
"abc",
first,
j)
24
paths
wants
extra
[4,
character.
occur
-100
head
matrix.
4)
along
larger
fit
kth
corner
average
sort
prefix
city
process
coordinates
back
query.
cell.
null
length.
boolean
20.
satisfy
space.
case,
during
edges[i].length
outside
row.
a,
'1'.
written
also,
actual
days
conditions
groups
trailing
color
conditions.
nums[1]
exists.
board
concatenation
area
check
inclusive
points.
4th
if:
26
108
spaces.
node,
(0
[1,2,3,4],
5]
index.
2).
times,
occurrence
upper
occurrences
create
convert
insert
calculate
13.
[[],
grid,
"ab"
0).
[0,1]
queries[i]
large
side
customer
longer
[1,1]
nums2[i]
he
1),
even.
first.
necessarily
entire
[3]
needs
-231
correct
five
nums[i],
:
'1'
letter.
[1,2,3,4,5]
[4],
not.
per
determine
pass
p
level
invalid
subtree
under
nums[2]
thus
'c'
squares
xor
interval
element.
12,
same.
path.
%
unit
know
example:
child
gets
(not
step,
node's
turn,
it,
operations:
(3
-->
"aa"
"ab",
32
hence,
-1,
text
sums
lengths
rearrange
trees
special
visited
children
flip
goal
,
green
true,
{
can't
player
class
parentheses
user
negative
select
107
11,
null.
connecting
j,
nums[j]
(a
40
that,
signed
day,
'e',
o(1)
left.
describes
word.
4]
exists,
value,
edges.
5:
100].
target.length
10-5
times:
counted
"b"
visit
employee
60
bitwise
play
inside
rotate
spaces
what
}
remains
based
image
10^9
direction
directly
[1,1,1]
currently
bi.
strings,
18
repeat
nodes.
number,
described
leftmost
subarray.
makes
game,
[2,3]
y,
said
day.
several
relative
include
subset
11.
21
keys
12.
bit
one.
bottom-right
way:
0),
+---------------+---------+
best
making
long
keep
palindrome
money
frequency
names
adding
none)
5],
group.
4],
2),
nums1.length
answer,
possible,
his
sequence.
19
operation.
respectively,
0's
mat
root.
6)
(including
us
rounded
[]]
fewer
2);
standing
did
zeros
scores
stones
minutes
plus
full
colored
closest
replacing
prices
maximize
build
nth
bits
'.
k)
false,
top-left
located
please
ans
'c',
location
players
system
though
13,
yi]
27
b)
person.
element,
exceed
[1,3]
below
mentioned
c.
shown.
question
graph.
parent
strings.
turns
assigned
additional
o(n)
answers,
list,
[1,2,3,4,5],
filled
"1"
round
"b",
turn
travel
23
rest
vertical
concatenated
depth
rearranging
lowest
units
employees
14.
colors
box
traversal
together
map
subsequences
higher
nums[3]
matrix.length
[].
matrix[i][j]
[2,1]
moves.
leave
built-in
matrix,
"leetcode"
up,
twice
front
design
student
match
num,
elements,
arrays.
ids
therefore
she
starti
endi
second,
replaced
3000
key.
below:
[5]
immediately
underlined
integer,
90
[3,4]
mat[i][j]
mat.length
line.
sum.
achieve
pairs.
twice.
ans[i]
adds
assign
numbers,
arranged
our
5].
leaf
swapping
bst
width
water
transform
certain
building
buy
-2
sequences
removed
1s
expression
sentence
similar
swaps
rectangle
including
denote
rules
characters,
index,
operation:
'd'
"c"
here
able
columns
heights
position.
nums2.
nums1.length,
foreign
nums2,
complexity?
[starti,
num.
denoting
followed
ending
'.'
going
nums[i
[0],
function.
score.
(5
4-directionally
cover
give
digit.
22
mat[i].length
share
optimally.
"".
modify
')'.
derived
(3,
r
"aba"
removes
beginning
taken
done
(inclusive).
[4]
needed.
empty,
c,
space?
16.
customers
available
middle
prime
increase
subtract
stone
2n
jump
version
power
construct
found
alphabet
walk
cells.
s1
s2
[1].
matrix[i].length
20,
them,
together.
xi
none
equal,
users
[2,2]
points.length
now,
matter
[a,
allowed.
5th
15,
'.',
'e'
meaning
10^5
passed
column.
'o',
"abc".
follows
instead
due
exist,
costs
modified
'('
playing
'b'.
t,
so,
receive
"aa",
input.
continue
places.
zero.
comes
(with
down,
[2,3],
reaches
[5],
lists
pile
matches
salary
17.
items
ones
weight
cities
differ
intervals
max
pattern
seat
finish
open
merge
room
nearest
partition
hence
direction.
name,
[10,
28
'c'.
lexicographical
off
say
splitting
[2,1,3]
[2,4]
points,
regardless
calculated
runs
employee.
arr[1]
arr[0]
nums.length,
num.length
meet
point.
'r',
arr[i
total,
object.
nor
sequence,
17,
150
=>
7)
floor
begin
]
[
way.
[1,3],
increasing.
(1-indexed)
-3
nodes,
true:
9)
asked
t.
move.
steps:
int[]
+-------------+------+
arr[j]
0:
clockwise
minute
rightmost
suppose
solutions
above,
val.
answer[0]
val)
item
sorted.
3);
column,
onto
greatest
winner
orders
candies
concatenating
limit
rotated
separate
placing
road
directed
boxes
stops
satisfying
vi
company
seats
coordinate
wall
increment
file
subsets
lead
overlapping
continuous
period
state
vertices
leetcode
program
'a'.
(m
word.length
whole
(i
cell,
double
stack
1000.
circular
events
students
"
points[i]
text.length
included
nums1[i]
total.
uses
connected.
nums2[j]
much
duplicates.
east,
south,
minutes.
square.
"0"
remain
ui
doesn't
again.
provided
child.
'i',
s[0]
reads
'z'
children.
come
1000].
process.
complexity
city.
returning
query,
(4
to.
(if
game.
representation.
j.
again
achieve.
pair.
divided
better
user_id
yields
[0,0]
trees.
started
ones.
once,
z
even,
fits
"aaa"
36
tie,
2].
get.
yield
constant
free
gives
1);
had
decided
nums[4]
pay
product.
different.
decrease
non-overlapping
sign
19.
belong
palindromic
addition
subtrees
sell
mapping
earliest
stay
win
identical
24.
friends
friend
instance
rank
condition
permutations
divisor
repeating
doing
played
half
+--------------+---------+
same,
created
path,
deleted
"leetcode",
"abcd"
changed
fn
y.
(row,
made.
s2.length
[1,0]
stop
mark
word,
ranges
leaves
having
probability
transactions
calling
id,
inclusive.
name.
her
have.
affect
might
fifth
endi]
read
(or
problem,
'.'.
"e"
edges,
contained
let's
beginning,
append
recursive
'#'
letter,
board[i].length
board.length
root,
34
m.
[7],
4),
d.
performed
arbitrary
characters:
42
similarly,
'(',
non-zero
1's.
100,
substring,
goes
(can
result.
14,
impossible.
^
assuming
3),
maximized.
moves,
s.length,
n).
'r'
trying
-1]
randomly
6:
substring.
simultaneously
leaving
odd,
type.
simultaneously.
stones.
const
series
water.
red,
0]
minute,
values,
meets
complexity.
show
(from
answer[1]
step.
rearranged
wait
table,
[1,3,2]
exist.
seconds.
seats.
100.
stream
judge
year
ascii
descending
places
record
waiting
coins
destination
flips
vowel
speed
profit
message
suffix
update
reorder
30.
products
rotating
rotation
sets
v
taking
15.
piles
distribute
jumps
robot
obstacle
sorting
start,
alice's
s2,
1][n
finally,
forms
"aab"
'd',
queries[i].length
collect
random
queue
encoded
piece
matching
moment
equivalent
combinations
diagonal
tie
123
if,
format.
x-y
divides
be:
group,
7],
accepted
[1,3,5]
directions
earlier
(starting
neither
6th
other,
invalid.
103
date.
18,
anywhere
box.
try
30,
10^4
key,
alphabet.
6].
[10],
b]
(a,
inputs
pile.
400
o(log
run
around
'x'
rules.
properties:
0's.
high
nums[1],
ui,
operations,
ab
(of
ordering
either:
plane,
length,
however
|x|
t.length
is.
3).
beyond
l
bidirectional
[0,2]
[3,2,1]
queries.
conditions,
"aba",
forward
"1",
decide
holds
[5].
["a",
-2,
fromi
toi
in.
initially.
[1,1,2]
"c",
rooted
correct.
31
each.
specific
[7]
indices.
'f'
target[i]
n]
associated
score,
anything.
candies.
[3].
(xi,
north,
named
days.
false]
indexed
follow-up:
(1,1)
inserted
indices,
steps.
rule
'l'
forming
c)
grouped
[[1,2,3],[4,5,6],[7,8,9]]
end,
[left,
4].
3].
[2].
120
balanced
cut
maximal
parts
degrees
evaluate
covered
tasks
divisors
house
store
label
horizontal
eat
flipping
base
22.
alternating
distances
running
marked
latest
leads
rounds
seconds
candy
network
factor
pieces
earn
sold
built
21.
ball
card
frequent
block
print
division
vertically
boundary
arrive
reachable
[3,3]
recall
real
[1,1,1],
alex
101
ri
ensure
player's
grid[m
range.
"abcd",
0;
[lefti,
i.e.,
"",
bob's
center
vice
visits
changes
'o'
'u'
composed
capacity
circle
intersection
event
method
units.
plane.
location.
points[i].length
east
indicate
wall.
[1,1,1,1,1]
groups.
[6,
[[1,
[1,1],
3|
runtime
respectively
"00"
'l',
happen
itself
10);
end.
zero)
6).
'-',
[ui,
50,
color.
function,
else
impossible,
in-place
solution.
board[i][j]
7]
swaps.
gain
8)
intervals[i]
'*',
processed
intersect
structure.
cols
rows,
country
')',
-106
edge.
positions.
low
queries,
answer.length
overlap.
zero,
8]
wins
etc.
horizontally
can:
16,
pairs,
n-1.
0],
denoted
implementation
[1,4]
y)
"add",
bst.
scenario
(and
request
a.
nums[0],
sit
"abab"
[-1]
[fromi,
10].
prices[i]
prices.length
word1
word2
'h'
[0,1,2]
john
0s
top,
maps
choice
possibly
plane
"hello"
sum,
stones.length
arr2
arr1
enough
0.5
216
p.
[3,1,2]
[2,3].
[3,1]
[2,1].
9].
grid[0][0]
zeros,
supports
[1,2].
instead.
x-axis.
blue.
6]
(inclusive)
minutes,
"bb"
inserting
checks
accepts
and/or
"this
(no
[[0,1],[1,0]]
as:
rows.
subsequent
help
-10
inserts
logs
[1,3].
0-indexed.
individually
team
allocate
execution
island
fully
deletion
preorder
reduce
describe
31.
dictionary
push
combination
distribution
anagram
drop
stock
tile
triplet
selling
fill
cards
arrange
labels
triplets
closed
work
source
threshold
50.
sales
dates
houses
neighbors
reconstruct
parallel
display
car
symbol
20);
happens
cause
additionally,
finally
s1,
stored
palindrome.
received
character,
chooses
nothing
concatenate
there.
stays
[[1]]
arrays,
lefti
below.
memory
excluding
decode
decoded
abs(x)
id.
queries[j]
heights.length
facing
text.
obtain.
linear
opposite
[8,
cost.length
removed.
garden.
multiplied
walls
unless
used.
43
second.
increases
's'
arr[arr.length
kind
10],
names.
format:
minimal
constraints
x2,
(x1,
[1,2,1,2]
'+',
(both
vertex
vi]
social
small
city,
(10
n),
order:
treat
modifying
child,
10]
existing
'u'.
s[1]
size,
picked
intervals.length
li
[li,
intervals[i].length
'p'
applied
singly
merging
rectangle.
col)
rectangular
yellow
area.
evaluates
'*'
[1,2,3].
[8]
[1,2,1]
operator.
graph,
connected,
difference.
arr[i],
nums.length.
corresponds
lose
corner,
side.
future
again,
strategy
access
f
[2,5]
belongs
empty)
4).
dollars.
trip
weights
passes
cities.
user.
expression.length
[[1,1,1],[1,0,1],[1,1,1]]
world
+----------------+---------+
r,
proved
values:
'9'.
non-empty.
fromi,
output.
"code"
"d",
"01",
33
bit.
word2.length
arrival
handle
"ccc"
nums[j].
10000
[1,2,3,4,5,6]
250
1's,
task.
stones[i]
"010"
"000"
"01"
quantity
wins.
top-right
49
(6
circle.
yi)
(4,
integers:
west
[1,2,4]
to:
alphabetically
(i.e
copy
bi,
size.
[0,0],
(x,
[[1,2],[3,4]]
optimally,
ended
')'
draw
initialize
distance.
num1
num2
amongst
[1,0],
64
"()"
own
round,
'd'.
(1,2)
testcases
[2,3,5]
sentence.
good.
minimized.
roots
occupied
105].
45
length)
finished
case.
"bab"
although
[2,3,4],
col
strs[i].length
strs[i]
strs
strs.length
pushes
"2"
enum
exact
"d"
simple
year.
product_id
winston
right)
constructed
top.
[3,2],
arr2.length
o(n
six
positioned
58
alphabetical
obstacles
duplicates
non-increasing
serialization
perfect
garden
flower
multiply
arrangement
rectangles
requests
cycles
minimize
rooms
sub-arrays
percentage
trips
decreasing
anagrams
regular
fraction
white
course
segments
counting
chunks
dot
18.
video
nice
container
workers
parenthesis
conversion
puzzle
32.
27.
instructions
factors
transaction
activity
23.
job
eating
fall
log
lines
vowels
bank
reversing
hour
60.
weighted
overlap
zeroes
beautiful
roads
food
deletions
missing
rating
custom
getting
generate
position,
[10]
cardinal
20],
'/',
nothing.
queue.
s1.length
enter
b.length
radius
formed.
[0,1,1]
board.
palindromes
99
chose
fn,
shape
s1.length,
down.
reversed
stack.
n].
1.00000
unable
limited
difference,
sizes
spaces,
&
chosen.
heights[i]
changed.
support
rotation.
field
idi
[idi,
turned
[1,1,1,1,1],
+----+-------+
full.
1010
full,
[0,0,0]
distinct,
|2
2|
|3
arr[2]
duplicates,
overall
cells,
memory.
month
50)
treated
level,
erasing
x2
x1
y2)
minus
vertex.
nums[5]
candies,
keys.
box,
addition,
bob,
people.
printable
[2]]
"cba",
pairs[i]
resolve
()
piles.length
piles[i]
coins.
"ba"
cards.
"2",
[c,
[3,6]
'u',
"aaa",
'y'
'-'
hold
o(m
locations
'2'
"0000"
printed
pieces.
h
w
'+'.
converted
formatted
number:
i.e.
evaluation
includes
lists.
falls
1000,
110
vi,
"abcde",
subsequence,
connects
b),
paths.
(a),
of:
(see
expression,
('a',
1]).
corner.
sides
'i'
'o'.
"aab",
dropped
ways:
[2,5],
worker
dollars
constraints.
respective
paired
expected
seven
g
n-1
media
+=
asks
limit.
variable
examples
outer
[-1,
[-1,-1]
"101"
[[0,0]]
endpoints
(bst),
algorithm:
substrings.
nums[i].
(1).
[0,0,0,0]
blocked
significant
(5)
others.
7:
num)
set.
[1,3,4]
preceding
don't
available,
finishes
itself).
actually
well
(for
"3"
entries
office
optimize
word1.length,
word2,
server
"bbb"
completely
objects
inputs.
"5"
disjoint
similarly
'x'.
isn't
tasks[i]
tasks.
array's
overlap,
min(n
"11"
"001"
kinds
odd.
or,
19,
[1,3,2],
bottom.
bottom-left
[2,2],
[7,
[1,1,1,1]
sitting
allow
'9'
"leet"
converts
paths.length
paths[i]
[1,5]
21,
price,
[[3,
previously
tasked
29
tasks.length
"ab".
"acb"
various
y1)
exam.
"bc"
price.
(0-indexed),
axis-aligned
pop
nums:
right).
positive.
lost
'*'.
considering
"get"]
"get",
"111"
(x
"o"
sentence.length
"i
easy
1])
thread
-x
board,
[3,3],
condition.
[1,1,1,1],
person,
correspond
5);
500.
problem.
way,
compared
sum:
listed
collection
bool
all.
differ,
logs[i]
logs.length
"a
80
directions:
[1,2,3,4,5,6,7],
zeroes.
achieved
across
continues
1-indexed
[2,1],
-4
37
[0,1],
mat,
year,
add(int
flipped
passing
solution?
specifically,
orders,
prove
"a".
arr1.length,
lower-case
interval.
traveling
[4].
't'
up.
image,
[6],
text,
necessary
(1,3)
',
columns,
35
seat.
destination.
two.
executed
away.
arr1[i],
encoding
straight
arithmetic
hand
.
secret
triangle
folder
levels
replacement
floors
direct
shift
address
generator
spell
simplified
varying
promise
reports
servers
immediate
components
break
jobs
bus
manager
labelled
42.
chessboard
fixed
mountain
department
ancestor
login
cross
domino
origin
component
multiplication
strange
title
allocated
courses
border
flowers
big
tower
01
unoccupied
great
tiles
teams
hidden
land
roll
meeting
online
capital
pairings
paint
ranks
close
buildings
balls
cycle
far
ranked
counts
spiral
happy
exam
equation
resultant
catch
money.
whereas
parentheses,
repeatedly
s2.
a.length,
method.
"x"
"z"
"hello",
lie
system.
chessboard.
balanced.
direction,
(to
diagonals
player.
righti
+------+
reversed.
+------------+--------------+
'e'.
moved
blank
compute
(100)
account
accounts
calendar
room,
answer[j]
"world"
"hello
999
area,
point,
integral
henry
joe
sam
3]]
cost.
care
2]]
flowers.
plant
planted
triplets.
valid,
8).
nums1[0]
arr[3]
nums[2].
arr[4]
|i
|0
diagram.
duration
free.
infinitely
speed.
collide
towards
amount.
'?'
mm
hours,
date,
years
triple
15);
causing
paths:
over.
system,
subsequence.
coming
collected
keys,
candy.
vi.
language.
languages,
vi)
[[1,2],[1,3],[2,3]]
content:
line,
[4,5]
considered.
lowest.
(labeled
subsequences.
val,
appends
"bac"
"bca"
pairs.length
throws
100ms.
b;
picking
cards,
"0",
d)
ri]
1234
num[i]
[[1,0],[0,1]]
1s,
[[1,1],[1,1]]
prefix.
steps,
completed
moment,
(note
judge:
intersect.
s3
requirements:
huge
horizontally,
(empty
[1,2,4],
105)
form:
email
ignored.
2.00000
"10"
nums[i][j]
values[i]
items.
values.length
[[0]]
mat.
lands
piles,
2;
(0,1)
ranking
nums2[2]
automatically
"ace"
words[0]
words[1]
words[2]
selecting
partitioned
graph.length
independent
{0,
u
descendant
property
produce
formula
start.
nodes'
traversal.
trivial,
(6,
writing
operator
'u')
subarray,
109.
yi].
later
ten
route
less.
f.
(where
reuse
separately.
5).
aforementioned
receives
street.
sixth
boxes,
order).
bag
explantion:
friends,
i++)
(int
code:
[[1,2]]
user,
"aa".
[3,2,1].
threshold.
5000].
simultaneously,
created,
"ll"
selected
dictionary.
"apple"
dictionary,
expressions
expression.
intermediate
terms
righti]
"11",
got
set,
recursively
added.
round.
neighboring
reference
sent
station
5|
[2,7,4]
d,
logged
"123"
interpreted
"l"
toi]
toi,
'-'.
pieces,
appeared
ways.
and:
differs
internal
2's
each,
server.
surrounded
threshold,
"()()",
digit,
[9,
themselves
head.
idle.
taken.
giving
intervals,
one,
(-1)
(as
25,
100)
at.
refer
"011"
itself,
erase
x).
underlined.
balls.
stuck
x-axis
drawn
neighbor
imagine
[1
perm
perm[i]
200,
height.
11]
coordinates.
computed
grow
120,
works
segment
applies
freely
ends,
unlock
"leet",
once).
right),
"bab",
12]
separating
lexicographic
brackets
stone.
deleted.
"b".
paths[i].length
matter.
q
unknown
8].
customer.
customers.
customers,
requirements
shop.
6],
pricei
pricei]
functions:
pricei.
swap.
"ba",
people,
left-to-right
require
[2,2,2]
24-hour
half.
[2,3,1]
days,
covers
calculates
distance,
(x2,
euclidean
59
place.
banned.
"123",
"6"
directly.
occurring
turn.
"ac",
price[i]
price.length
7),
(2,3),
minute.
computer
splits
[i,
j]
'0'.
knows
i-th
rounds.
arr.length.
unit.
matrices
binary,
image.
team.
old
allows
public
[1]]
[1,1,1].
representations
"cba"
210.
picks
indices[i]
indices.length
left).
keeps
'g',
'r'.
space,
customer_id
order_date
remove.
[5,4,3,2,1]
'k'
nums[j],
queries[i].
solution,
"bbb".
timestamp
games
too.
4000
nums[k]
backward
forward.
methods
threads:
answers.
threads
(r,
permutations.
[1,1,0]
path:
e,
4);
hold:
well.
i)
===
downward
shortest.
hours
happened
events.
[2,3,5],
process,
lies
obtaining
car.
right].
'5'
's',
messages
error
(2,3).
"abb"
apple
-3,
[5,5]
|5
division.
float
begins
"0".
cost[i]
condition,
strs,
more.
not).
street
dist
specified
you.
employee,
salary,
discount.
command.
o
wall,
turns,
floor,
9000
6),
goal,
executed.
called.
"the
movement
keeping
(except
|nums[i]
product_name
+-------------+-------+
below,
i]
indicating
age
39
initialized
push(int
(left
pop()
111
[1,2,5],
"i"
(there
website.
root2
root1
pass?
requires
68
"cab",
arr2[i]
arr1[i]
$5
diagonal.
"10",
state.
[1,2,3,4,5,6,7]
dictionary.length
dictionary[i]
dictionary[i].length
ways,
l,
nums2[i].
him
satisfied.
black
yj
[x,
pairwise
consecutively
consecutively.
orange
adjacent.
(0,1),
100%
$1
another.
insertion.
grid[r][c]
0);
(5,
desired
grid[row][col]
70
blocks
orders.
subtrees.
starttime
endtime
16)
(bst)
requirements.
instances
[8],
(10)
j).
so.
disconnected
shorter
n-ary
rain
averages
stick
deepest
40.
bricks
restaurant
worked
key-value
track
submatrices
zigzag
subtraction
staying
fair
compare
importance
cutting
questions
fractions
emails
complement
quality
daily
buying
assigning
tallest
connections
queens
away
phone
frog
run-length
pivot
movies
arrangements
reaching
differences
median
lucky
sticks
painting
difficulty
attack
gap
periods
summation
magic
topmost
machine
uncommon
walking
delivery
dominoes
active
perimeter
reformat
shifting
25.
nesting
expansion
rotations
rolls
mouse
window
forest
fibonacci
functions
discount
shop
folders
movie
broken
34.
bought
composition
visible
iterator
transformation
chain
×
coin
insertion
mean
cars
bars
degree
59.
28.
assignment
sentences
bags
recover
nested
collision
filling
numeric
64.
connect
cat
configuration
submatrix
connection
bracket
partial
book.
[start,
true]
there's
usual
positions,
because:
"bc",
load
yi,
strings:
j),
(even
combination.
accounts.
customer,
transformed
stack,
students.
combinations.
bank.
further
brackets.
offers
knight
balance
removals
booking
smaller.
world"
non-space
enhances
bar
wide
coordinate.
ids.
vali
status
on,
non-overlapping.
hand,
competition.
47
arrows
nobody
section
earns
60000
90000
80000
70000
plant.
nums1[j]
[-1,0,1]
0|
j|
a[1],
coli]
[rowi,
rowi,
held
meeting.
room.
done,
domino.
figure.
string)
seconds)
memory,
road.
's'.
coin.
coins,
coins.length
coins[i]
hh
"hh:mm".
bob.
31,
15],
60);
-107
square,
'/'.
'/'
solutions,
x1,
y1
y1,
10^3
[1,1,2,2],
(either
["abc",
'+'
spend
n-1,
[1,2,2,3]
unchanged.
opening
arrays:
candies[i]
candies.length
closed,
z,
(ui,
language
yielding
z.
tuples
lines,
file.txt
10th
script
painted
class.
"bob",
x's
string[]
parent,
children,
constructor
constructor.
'#',
directions.
"c".
"cab"
3x3
sequence:
generates
[13,
34,
"iii"
"bacd"
divisors:
inputs.length
promise(res
reached.
settimeout(res,
throw
(n)
asyncronous
error.
optimal.
card.
"6",
intervals.
[1,0,2,1]
181
(wrapping
alphabet,
shifts
[[1,1],[1,0]]
daniel
"xy"
transactions.
skip
program.
[3,2,4],
'8'
104.
parts.
"10101"
allowed).
necessary.
vertically.
direction:
cuts.
(an
domain
nums1.
lengths.
[2,1,2]
triangle.
evaluating
non-leaf
merged
non-empty,
swapped.
nums[i].length
d]
22,
third,
subset.
[1,1,2,2,3],
[[0,0],[0,1]]
stones'
stone,
clockwise,
[low,
bottom,
pile,
trivially
nums[2],
nums[nums.length
costs.length
costs[i]
digits[i]
digits.length
(0,0)
[false,true]
queries[j].length
negative.
duplicated
substrings:
(contiguous)
(12
rob
-2.
divisor,
environment
part.
toward
multiplication,
"abcde".
"abba"
"cd"
"baba"
performed.
3}.
{1,
values).
v,
ever
[1,1,1,1,1].
200].
9]
nary-tree
[1,null,3,2,4,null,5,6]
[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
iteratively?
maximized
bi)
pairing
elements)
unary
etc.).
'a's
floor.
7th
remember
99,
drops
dropping
overlapping.
ranges.length
[4,8]
ranges[i]
profit.length
pays
profit[i]
[2,4,6,8,10],
job,
everyone
[1,2,3,1]
constraint
security
main
boxes.length
queue,
distributing
[1,2,2,1],
preferred
[[0,
assertions
underscores).
slots
expectednums
[...];
assert
expectednums.length;
(hence
expectednums[i];
pass,
this:
(you
rows:
[[1,2],[2,3]]
(user_id,
vowel.
[6,5]
limit,
create.
palindrome,
checked
details
variables
reminder,
cycles.
subtree.
walls.
throughout
install
boundary.
installing
[1,0,1]
from.
provide
+----------------+----------+
user_id.
february
2020.
1-indexed).
components.
[2,2].
removals.
n2
pick,
alternate
individual
statement
(excluding
suffix.
net
buildings.
cities,
weighti]
denominator
calculation
"o",
"ca"
"abb",
"bb",
done.
zeroes,
yi],
outgoing
again).
day).
engage
41
55
bits.
it?
-3.
known
(i+1)th
available.
handles
goal.
project,
employee_id
+-------------+-------------+
working
54
islands.
totally
"acd",
"5",
only,
")("
"("
b:
"(()"
xth
(ie.
0.50000
upper-case
e
tasks,
00
"f"
[2,6]
(-2)
here,
"11".
0.25
75
causes
lose.
arr[k]
xn
few
wi
shaped
2-d
"v"
b2
remove,
odd-indexed
even-indexed
minimizes
5]);
5]],
equally
container.
(nums[i]
parents.
height,
dimensions
seats,
sits
enters
words)
words[i],
"111000"
reached
through.
turning
result:
position[i]
position.length
'a':
words[i].length,
chars
highlighted
'p',
[-231,
"1
chunk
printed.
term
evaluated
lexicographically.
clear
"0110",
"00",
that's
hours.
hour,
hour.
eats
vice-versa.
"aeb",
[nums[k],
jobs,
company.
arrives,
customers[i]
timei
arrives
customers.length
stops.
result,
[1,2,0]
2]],
"search",
"search"]
shop,
res
tiles.
[1,4],
[0,1,2,3]
(indexed
coordinates,
"good"
attain
searchword.length
searchword
products.
[9]
task,
root.val
source.length
south
squares,
north
endpoints.
win,
replaces
satisfied:
"aaaa",
"aaaa"
respect
puzzle.
required.
(red
[2,1,2,1]
forever.
segments.
anything
"abacaba"
"abcde"
reachable.
maximum.
score.length
banned,
banned
banned.length
num2,
"next",
"ac"
next()
hasnext()
unrooted
[[0,1],[1,2]],
times).
digits).
nums[3],
increasing,
1018
(2,2),
(109
interested
has.
back.
front,
split.
divisors.
reset
[2,0]
'|'
precedence
(bitwise
"f",
wordlist
'x',
shown,
minimum.
right:
vote
p.length
p,
match.
2):
sub-array
judged
rule.
participating
"count",
"count"]
"1010"
(1,7)
"r"
present.
signifies
criteria:
converting
"231"
210
numerical
(index
node.val,
repeats
into.
further.
(minimum
love
sentence,
2019-08-01
website
samsung
2019.
non-decreasing.
321
word's
level.
[0,1,2,3,4],
"00111"
"100"
modifications
[1,2,1],
structurally
[1,0,1],
occupied.
whitespace
boundaries
someday
games.
1/3
device.
in,
amount,
[2,1,1]
uj
[[1,0]],
vj
[uj,
abs(1
[5,6,4]
three.
[3,5]
(1-indexed).
cycles)
shares
loses
hh:mm.
words[j]
[[[1,
[3,3].
[2,4,6]
accept
defines
lodash's
[2,3,4]
[3,4,5]
[[1,0]]
two-dimensional
seen
centered
worth
type:
libraries.
weight,
product,
make.
water,
reading
upper,
travels
"aabaa"
arr[j].
|1
incorrect
sn
subgrid
string).
p1
p2
[[1,2],[2,3],[3,4]]
[3,4].
righti.
disturbing
[4,6]
1|
|10
(9
|2-3|
words[i].
(2,3)
climb
[2,1,3].
(2,2)
west,
visited.
crosses
subarrays.
(2)
manager.
themself.
(binary
64-bit
50%
prices.
next.
appended
ci]
'#'.
down).
upcoming
val1
val2
colors.
green,
resolves
42;
used:
1;
100);
message,
('a'
1st,
4th,
groups,
nums[j])
46
62
9).
shuffled
partitions.
counter-clockwise
movements
stream.
lengths,
placed.
result[i]
root)
scores.
t1
traversal,
query:
[xj,
minimal.
inclusive,
match,
send
sale
")",
s[2]
'0's
nums)
jonathan
"11111",
ki
queries[i],
[3,0]
in-order
44
arr[i].
6|
[0].
[[0,1]],
plan
[4,2,5]
sign.
a[i]
formally
[4,4]
1.5
similar.
0.00000
candidates[i]
candidates
candidates.length
indirectly
connections.length
connections[i]
[0,5]
0].
nine
abs(i
(more
"e",
mapped
(11
20)
sure
[[1,2,3],[4,5,6]]
ones,
(2).
count.
"baa"
s[i
"bca",
particular,
"leetcode".
"s"
10^6
activities
shapes.
items,
$4
$2
$3
want.
preorder.length
word1[i]
objective
"abccba"
smallest.
[2,1,3],
"12"
versa,
-5,
pair,
[1,3,3]
kilometers
drive
passengers
len
rolls.
country,
't',
(3,5),
(row
o(n2)
simply
start.length
parsed
instead,
differing
roads.
free,
180
-6
hello
world",
same:
m)
3rd,
determines
(2,1)
column).
deletes
value)
list1
list2
pi
vertices,
consistent.
14)
10:
"1010",
'3'
flattened
73
9],
n.length
500].
types:
members
from,
book
[1,2,3,3],
nums1[1]
121
relationship
[9].
graph[i]
string:
met:
target)
actions
persons
white.
lowercase.
[2,7,11,15],
(1,1),
"is",
tests
fall.
immediately.
"abab",
lines.
[1,4,2],
right]
updates
28,
evenly
acceptable
color,
blue,
off.
(3,4),
dist.length
dist[i]
speed.length
speed[i]
restaurant.
"0011",
four.
acyclic
min(5,
[2,4,6],
starttime,
algorithm.
[2,3,1,1,4]
2019-01-01
[2,2,2,2,2]
7].
valued
-108
+----------+
(horizontal
(representing
[true,false,true]
functions.
executing
executes
execute
time[i]
symbols:
ignored
["a","b","c"]
baskets
basket.
bitwise-xor
0-indexed).
email.
follow:
arr1.length
arr2,
[1,2,3,5],
(represented
devise
attend
grid[1][1]
"abcabc",
0.25000
65
units,
stores
asynchronously.
fired
faster
behind
people[i]
people.length
timestamp.
"aaaaa"
ages
wizards
tag
bloom
ice
cinema
lock
rational
monotone
traverse
communicate
laser
partners
weakest
decrypt
brick
keyboard
owner
factorial
machines
widths
cheapest
population
divisibility
spent
strongest
sequential
paid
oranges
angle
asterisks
trimmed
videos
unsorted
apples
75.
browser
eaten
25%
checking
inorder
islands
flatten
33.
conflict
cpu
pizza
tournament
trim
solving
1d
fresh
parser
critical
criteria
roman
super
wheel
gardens
view
tickets
gray
eggs
sub-tree
marking
outermost
planting
egg
powers
49.
excel
robber
squared
rate
wonderful
strength
hamming
furthest
grandparent
operators
dice
computers
cooldown
king
ii
3n
29.
partitions
iii
900.
ant
majority
avoid
n-queens
cheese
addresses
basket
routes
project
ship
categories
logical
eliminate
jewels
1011.
flood
90.
cups
non
flight
temperatures
transpose
exit
spanning
history
polygon
crossing
filter
others
ingredients
shapes
min
attendance
backspace
clock
43.
chalkboard
tic-tac-toe
ugly
salaries
local
postorder
ip
contaminated
exchange
tweet
iv
hit
contest
disconnect
asteroid
fruits
combine
bonus
halves
45.
packages
3d
sudoku
peak
hire
tweets
diff
increments
36.
balloons
single-threaded
pow(x,
falling
triangular
temperature
captures
gcd
flights
rods
sub
password
entrance
54.
cousins
favorite
subpath
asteroids
handling
spreading
slices
force
printer
safe
diagonally
truncate
successfully
event.
"book",
end)
implementing
"book"]
calendar.
half-open
book(int
"bbb",
break,
ranges.
ability
effect
can.
(101)
eat.
(that
a.length
step:
versa.
[0,1].
0001
x-coordinate
players.
righti].
(0)
account.
bill
parentheses.
7000
(3)
6000
capacity.
stand
reduced
+------------+------------+
chessboard,
eight
(1,2),
"cde",
130
"x",
"abca"
"y"
(1)
encode
bomb
short
removal
service
[2,3]:
[2,5]:
abs(2
rooms.length
rooms.
rooms[i]
me
fly
element:
location,
90,
region
counterclockwise.
angles
idi,
evenly.
bulbs
presses
[on,
pressing
off,
button
[off,
[4,2],
arrows.
ranging
(6,9)
departmentid
department.
+------------+----------+--------+
+----+-------+--------+--------------+
departments.
[[2,
cost[i][j]
cost[i].length
determined
flowers.length
gardens,
flowers[i]
(0,1,2),
(42
nums2[1]
(type
nums2[0]
[3,5,2,6],
[5,7]
a[0],
[a[n-1],
a[n-2]].
-5000
a[n-1]]
a[2],
[a[0],
why?
become:
guards
colj
guarded
(north,
[rowj,
rooms,
delayed
finish.
meetings.
half-closed
manner:
finishes.
dominoes,
"24"
240.
[3,1,0]
car,
collides
stationary
[1,3,1]
denominations
[1,2,5]
choices.
?
"23"
mary
names.length
names[i].length
names[i]
2100.
1993
2019
1971
60],
55)
55);
40);
[50,
[25,
40],
55]]
event,
unix
"/"
path.length
'_'.
directories
directory,
directory
[10,8]
included.
y2.
y2
matrix[0].length
different:
(0-9),
lowercase),
formats:
numbers:
"."
[[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]],
vertices.
apple.
[1,2,3,5]
[1,1,2,2,3,3]
beautiful.
shifted
closed.
keys.length
most.
keys[i]
guarantee
possibilities.
file.txt,
lowest).
true)
filters
[3,1,5]
pricei,
simplicity
summer
houses.length
[0,0,0,0,0],
houses[i]
birth
death
dead
older
name.length
successor
dies
alice,
lock,
'@'
str1
str2,
str2.length
"abac",
str2
str1.length,
"abac"
"ac".
1-9
sub-boxes
[5,3,1]
nodes:
26,
14]
api
20]
"ode"
primes.
palindromes.
n;
reject
50ms.
t=50ms
[5,10]
milliseconds
resolved
100));
8),
[2,4,5]
cards.length
[4,2,3,4]
cards[i]
7).
1015
"4",
"8".
twice,
1200
215
applied.
'a').
[3,5,9]
1s.
transaction,
transactions[i]
transactions,
transactions.length
all,
[1,5].
[1,5],
ahead
linked-lists
[3,2,4].
heads
(2nd
[[]]
lists,
"1001"
s3.
you"
"how
"to
be"
[[0,0,0]]
k-1
symbols
symbol.
"xxxx"
address.
code.
mask
separation
time?
illustrates
and.
2.5.
"1100"
[1,3,3,3,2],
labels.length
values[i],
[5,4,3,2,1],
["#","#"],
rests
obstacle,
high]
[1,3,3].
nums[i+1]
planning
"bcabc"
"cbacdcbc"
"acdb"
unnecessary
type,
(1,0)
decreases
higher.
student_id
"banana"
+1
police
house.
alerting
contact
police.
smart
night.
-231,
fractional
division,
mod
text1
text2
"def"
phrase
v.
u.
2}
self-edges
store,
().
[0,3,0]
[1,1,0,1]
tree)
2}.
formula.
[1,2,3,4].
chalkboard.
[0,1,0]
examples)
min(3,
5),
(ignoring
min(2,
min(1,
anywhere.
subtraction.
subtraction,
tries
corner:
grid[0][0]).
sqrt(2)
visits.
unit,
width,
placement
boxes.
fuel
fuel.
have,
'n'
"bcd",
unbroken
break.
breaks,
breaks
certainty
55,
inclusive)
[10,20]
them:
attempt
workers.
profit,
jobs.
systems
similar,
(n,
boxes[i]
trips.
violating
ship.
port
given.
rearrangement
weights.length
weights[i]
bags.
distributions.
bag.
[9,4,9,8,4]
[4,9]
intersection.
[4,9,5],
[9,4]
slice.
remaining.
[1,6]
cheese.
ingredients.
1]],
xi.
0]]
friends.
happy.
removeduplicates(nums);
kept
k;
[1,1,1,2,2,3]
line:
upper-case),
(lower-case
app
will,
{1}
instruction
drives
commands
queries.length,
"e".
[3,4,3]
intersecting
"xx".
"cc",
"gg"
backward.
legal
variable,
convenience,
expressions,
e2,
calculations
"let",
question,
concept
e1
e1,
follows.
protected
tokens
context
sequentially.
[firsti,
lefti.
firsti
[0,0].
[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
[1,null,1]
[0,null,1]
[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
loss
unfortunately,
originally
error,
decision
stop.
existed.
descendants.
built.
installed
tie.
shared
spreads
case?
+----+-----+
request,
|7
stations.length
stations.
stations
10|
stations[i]
leaves.
[3,5,1,6,2,0,8,null,null,7,4]
[0,1,3,null,2]
coloured
kn
die
faces
time_stamp)
2021-01-06
2020-02-01
time_stamp
datetime
+---------+---------------------+
[1,4,3,2,5]
[[0,1],[1,2],[1,3],[3,4]]
before,
want:
"16",
"2".
assumed
forever
put,
supply
think
"zy"
701
aa
empty:
[-1,-1,-1,-1]
requests.length
requests[i]
toi.
requests.
requests[i].length
employees.
employee's
reside
toi)
(fromi,
concatenations
numerator
positive,
"1101"
cases.
accepted,
things:
important
seq[i]
seq
"high
hand.
ranks[i]
rank.
rank,
ranks.length
allowed,
fibonacci-like
parents
times)
stock,
office,
exits
entered
2020-12-09
office.
unsigned
unsigned.
implementation,
compiler
integer's
java,
11111111111111111111111111111101
notation.
(also
permitted
word2.
arrives.
server,
necessary).
"eee".
+------------------+---------+
khaled
experience
2.50
(land)
(all
grid[0].length
s:
alphanumeric
primitive
preserved.
0-9
"1":
"132"
"021"
|2-7|
[4,7]
|2-2|
depth(a
vps's,
depth(b)),
(denoted
"()(()())"
vps)
vps's
"(()())"
vps.
depth("("
depth("")
max(depth(a),
vps
depths
depth(a),
vps's.
depth(s)
")")
trees.length
trees[i]
s[5]
'z'.
s[3]
h.
last,
center,
[1,1,1,2]
procedure
[1,1,1,1].
[2,1,4,3]
list's
largest.
idle
do,
bit,
[0,2,3,1]
[0,1,3,2]
letters.length
'f'.
letters[i]
beginning.
[2,2,2],
take,
[1,6].
[13].
(-5)
stones,
(-6)
natural
arr2.
rod
photo
wooden
"110"
volume
0.25.
serve
[3,1,2],
[2,0,2]
successful.
success
[5,1,3],
strengths
j:
arr[5]
incrementing
callcount
rectangles.
li,
rectangles.length
rectangles[i]
rectangles[i].length
[2,3,1],
visible.
hits
corners
spans
photo.
against
[5,2],
ie.
min(105,
solution(int
likely
pick.
["solution",
[[7,
store.
(blue
height.length
section)
height[i]
[4,3,5]
num[3]
[1,2,3,null,4],
neighbors.
perm.
perm[i
encoded[i]
encoded.length
35,
category
either.
mass,
mass
hi]
[16,
hi
14].
circles
green.
[0,0,0,0,0]
[2,1,1,2]
3!
n!
leave.
maximizes
[[10],
pref
0's,
1000000000
situated
"0102"
wrap
'3',
'1',
'0',
displays
invalid,
[2,2,2,3,3]
51
(each
chars.
chars.length
proper
ordering.
"bba"
1}
coefficient
["e"],
ties
ignoring
[2,1,1,1]
smash
destroyed,
[2,7,4,1,8,1]
deletion,
folder.
"two",
subfolder
identical,
folders.
identical.
subfolders
paths,
"/a"
likes
q,
4321
"100",
[3,1,2,0]
scores.length
[[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
scores[i]
y[i]
order)
x[i]
"bae",
"cad",
"abe",
rotated.
nums[k+1],
nums[k-1]]
[0,1,2,4,5,6,7]
nums[n-1],
nums.length)
i).
valid:
selections.
waits
preparing
chef
arrivali
5.00000
[arrivali,
distance[i]
distance.length
mathematical
85
carries
1]]
movies.
search(int
search,
int[][]
5]]);
list<integer>
finds
5]]],
movie.
rented
movie,
[1,1,5]
permutation.
tiles.length
tiles[i]
tiles,
188
index=2
black.
coordinates.length
white,
rock
"alice
"first
[1,2,3,3,3].
products[i]
products.length
typing
will:
quotation
key's
123.
[1,0].
finishing
leftover
like.
holds.
blocked.
squares.
tx,
[[0,1],[1,0]],
sx,
sy,
yi).
ty
million
y).
self-loops.
disconnected.
23,
23:59.
00:00,
"hh:mm",
"hh:mm"
'?'.
'7'.
win.
half:
outcome
'2'.
"abcdefg",
obstacles.length
jumps.
obstacles[i]
obstacles,
[0,1,2,3,0]
balanced,
parenthesis.
'('.
[1,2,3,2],
grows
bloomed
[1,4,3],
huge,
compressed
piles.
anymore.
+-----------+
prefix,
videos,
definition.
signal
function).
matrix)
diagram,
student,
exams.
banned[i]
shouldn't
library
2-dimensional
commas,
"1.0",
anti-clockwise
"hasnext"]
"hasnext",
blue)
choice.
[7].
red)
lying
incurred
rooting
nums[5],
[2,3,2]
picture.
computer.
processes
[0,2,1,3]
middle,
parts:
'|'.
calculation.
[1,-2,-3]
iteration,
iteration
)
startvalue
"query"]
"xyz"
(one
"query",
positions[i]
4.00000
positions.length
map,
triangles
[2,2,3,4]
(using
relations
group[i]
group.length
party,
party
procedure.
skipped
partial).
appearance
soldiers
"burger"
[3,2,1],
arr.length).
[3,2,1,4]
3):
flips.
4):
erased.
images.
ranking.
place,
resolved.
t=200,
40,
"set",
milliseconds.
t=0,
requested
methods:
count()
[1,1,3].
base-10.
part,
"xy".
x)
pattern,
"foobar"
"oo"
"t"
absent
award
late,
('l')
'l':
absent,
absences
eligible
'p'.
late.
award.
late
('a')
'p':
absent.
"acb",
'j'
"210"
231.
option
replacements
"eee",
occur,
3000].
[1,3,null,null,2]
instructions[i]
instructions.length
east.
y-axis.
north.
west.
instructions,
position:
stands
performs
departure
departs
substrings,
['a',
problem",
+-------------+
buyer_id
info
seller_id
join
lenovo
hp
order_id
decreasing,
[5,4,3,2]
infinity.
ball's
count:
factory
"ababc",
"happy"
layout
distinct).
[3,3,7]
4-queens
"00000".
"000".
ladder
bricks.
journey
ladder.
wordlist.
'b's
[3,2].
rearrangement.
[5,4,3].
[1,null,2]
01,
[1,0,0]
[1,1,1,0]
"aaabbb"
above).
day:
permutation,
(underlined
[i
("ab",
s)
[""]
2018-07-03
event_date
+-----------+-----------+------------+--------------+
2017-06-25
event_date)
player_id
2016-03-01
logging
games_played
2016-03-02
(player_id,
device_id
comma-separated
exceeds
including)
transaction.
[2,3,3],
[2,3,3]
[3,2,3]
do.
words:
worry
three,
present,
molecule.
threads.
independent.
prerequisite
prerequisites
c1)
c2)
[2,3,4,5]
[5,2,1,3].
[4,2,1,3]
"ll",
[2,4,3],
forgot
supposed
procedure:
loops/recursion?
63
[3,5,6]
subsequences,
look
[1,1,0],
parent[0]
parent.length
parent[i]
secret,
winning
[4,2,1]
tournament.
00:00
seventh
cases,
arr[left...right]
non-null
extending
[1,3,2,5,3,null,9]
visit.
records
199
unique,
[3,7,11]
[1,1,3,3]
fn(arr[i],
10;
newarray
plusone(n)
[[0,0,0],[0,1,0],[0,0,0]]
(list)
callback
a2
grid[i
grid[i][j
2020-03-01
2020-02-11
2020-02-17
user_id)
maria
+-------------+--------------+
2020-02-25
+-------------+--------------+--------------+-------------+
+--------------+
james
dog
200))
33.33
ratio
((5
"cbbd"
"bb".
teacher
[3,5,7].
diagonals.
memoized
cached
[8,1]
before.
vertex,
uncolored
purple
shifts.
questions.
answering
[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
"acb".
contains.
hash
"remove",
remove(key)
add,
folder,
(ai,
min(200,
abbreviated
[2,2,2,2,2],
groups:
1)th
plants.
'7'
press
pressed
logs[i].length
employees,
[5,3,2]
index1
index2
bolded
",
(here,
c++
interfere
source[i]
testing
implicit
quote
effective
","
clear,
code,
c;
(0,3),
pairs:
(1,3),
(0,4),
operations.length
buses
-8
sentences,
single-space
plots
[-3,
11],
|arr[j]
((4
[5,1]
|arr[i]
m|
83
[2,5].
possibilities,
cases:
sign,
[3,1,2].
"1".
si
1))
s4
xi+1
[1,2,3,4,5,6,7,8]
there?
[[1,2,3],[4,5,6],[7,8,9]],
"aebdc"
"aebdc",
210].
solved,
|4
4|
|10-9|
|3-3|
|5-3|
song
odd-numbered
"abcd".
answer[2]
["abcd"]
sums.
cycle.
diagrams
(empty)
walk.
obstacles.
(0,2)
'w',
subarrays:
[1,2,3,4,5,6],
[[0,1]]
endi].
[4,1,2]
2000].
arr[0].
comprise
managerid
102
amy
dan
+----+--------+
treenode.val
i=1
i=0
j=0,
j=1,
income
-99
[1,2]:
[1,2,3,2]
[3,2,5]
prices,
purchased
amount)
(price
sale.
amount.length
((100
bought.
prices[i].
attributes:
get,
get(int
insertion,
attribute
index)
["a"]
command,
"()",
"g",
solution"
equation,
100]
'='.
describing
extract
[ri,
ci
333
mouse.
'f',
cols,
'm',
walked
occupies
bash
[[0,1],[0,2],[1,2]]
8000
(10000
10)
card,
0.60000
draw,
plays
drawing
gains
val2.
[1,4,3]
distributed
ring.
ring's
ring
('0'
colors:
50);
promises
increment.
cancelled,
function's
wish
thrown
resolve,
rejected
};
message.
'f').
key.length
brown
fox
quick
'z')
lazy
align
serving
batch
2nd,
high,
high.
"ee"
96
[1,0,0,1,0,1],
newly
sentence"
-200
collide.
anticlockwise
convex
[5,5,5].
3/1
placed,
street,
result[0]
result[1]
|3-5|
|5-5|
[4,1]
descendants
300].
record,
-4,
"4"
ops
"sad"
element)
t2
depth.
answered
good,
(3,4,5)
manhattan
yj]
|val|
xj|
|xi
used,
creating
[15]
continuously
100th
course,
durationi
times[i]
times[i].length
times.length
2011
year)
(sale_id,
nokia
sale_id
2008
sold.
2009
+---------+------------+------+----------+-------+
quantity,
unchanged
locked
'1's.
s[4]
queen
'q'
[9],
2]);
add.
capital,
listnode
sequences.
(id,
meir
"00100",
[4,1,2,3]
"1101",
100000
hercy
rounding
+-------------+----------+
employee_id.
1024
reserved
trimming
uniquely
num1,
ans.
"pop",
stacks.
"pop"]
push,
"push",
pop,
|6
orders:
trips[i]
trip,
trips,
starti,
trips.length
→
elements'
elements),
[2,4,2]
[4,2,3,7,2,1,4]
goal.length
modifies
[5,6,7,8,9],
directly,
[1,4,2,3],
[[],[0]]
subsets.
set).
solutions:
[4,4,4].
together,
(which
equally,
quarter
cup
33,
pyramid,
[1,7],
[1,1,6],
[1,2,2],
f(x)
f(3)
[[1,3]]
connections.
network.
garden,
[7,1]
[4,2]
abs(4
abs(0
[1,2,3,null,4]
into:
"h",
"aajf"
"kjf"
"*"
ways).
grouping
"06".
represent.
"26"
mapping:
a-z
"06"
06)
"8",
"11106"
rule:
"()()"
(a)
"(())"
password.
typed
entering
colsum
colsum.length
colsum[i]
period.
david
case),
emails.
overlapped
larger.
[0,2,4]
dashes
sum(nums[i].length)
keyword
aligned
to,
[6,7,8,9,10]
(because
description.
notes:
sensitive,
"z",
"zz"
"bcb",
"aca",
"c"]
9th
positions).
play.
say,
endpoint
play,
(such
bad
-10^6
pencil
basketball
t-shirt
advances
round:
[3,2]
$9
$2,
special.length
want,
item,
special[i]
$10
given,
decrypted
2+3,
code.length
negative,
pushed
dominoes.length
pushed.
dominoes[i]
preorder[i]
process:
"ei",
"cbda",
word1.length
word1,
dictionary)
"acbd",
["abcd",
piles[i].
[0,0,0],
2k
[1,3,4].
matrix's
[1,null,3]
[1,2,3,7]
nums1[3]
subordinates.
[-1],
subordinates
relationships
nums[right]).
["numarray",
-3]
nums[left]
nums[left
sumrange(int
sumrange.
5]]
numarray
numarray(int[]
numarray.sumrange(0,
"sumrange",
"sumrange"]
tracks
locations.
added,
called,
"()".
[1,1,2,3]
val]
freq
circle,
game:
winner.
else,
"01".
car's
divisors,
distinct)
change.
[2,3,6,7],
satisfied,
"bob"
person's
xj
(xj,
[3,4,5,1,2]
updated
optimally
[1,2,3,6]
-9
stonevalue.
stonevalue[i]
"alice"
stonevalue.length
sum(paths[i].length)
country.
inputs:
engineer
function_id
x=5,
hidden,
this.
adjacent,
reserved,
[3,8]
reserved.
warehouse
cell).
fill,
fill.
pixels
image[i].length
image.length
mines
recursively.
mines.
'm'
('1'
occurrences.
(0).
salary.
2500
minimized
viewed
2019-07-21
2019-08-02
202,
maxsize
"1110"
"0100"
alternating.
alternating,
staircase.
4-directionally.
rotten
orange,
orange.
(1,0),
255
[[0,0,0],[0,0,0],[0,0,0]]
(0,2),
(0,0),
[3,3,2],
[3,2,2],
origin,
origin.
moves[i]
moves.length
original.
nums1[2]
moves:
s[k]
selection
>.
why
']',
'!',
connections[i].length
(this
earned
[[1,1],[2,2],[3,3],[4,4],[5,5]]
|x
y|.
elevation
long.
29,
fee.
$11
48
timei]
bi-directional
travel.
chronological
ans[j]
[1,2,3,4,5,6,7,8,9,10],
y-axis
width.
bus,
passenger
bus.
capacity,
"leetcode.com"
types,
lot
"of",
sentences.
words"
scores,
score[i]
5th,
y],
y]
[[1,4],[2,5],[3,6]]
(3,1)
(2,1).
advance.
tournament,
660.
dollar
$6
"abcabcabc"
"abcabc"
[1,4].
122
isempty()
isfull()
isfull.
[[3],
programming
"isfull",
isempty,
indexes
decrement
on).
strs[0]
strs[1]
["abcdef","uvwxyz"]
3},
(strs[0][0]
["bef",
answer.length.
strs[0][1]
"vyz"].
deletions,
[0,1,2,3,4,5],
list2.length
month.
yyyy-mm-dd,
[-1,0],
traveled
8);
16);
12)
"1010".
"99",
overlaps
permute
order.length
[0,1,2,3,4]
|8
differences,
maxnestingdepth
iterates
multi-dimensional
achieved.
"aaab"
inner
[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
grid[r].length
viewing
increased
red.
"sea",
"sea"
115
"eat"
[positioni,
fruit
positioni
amounti
startpos
x-axis,
depicts
[[1,0,1],[0,0,0],[1,0,1]]
picky.
member
books
then:
unlimited
endi,
nums1,
[[5],
"insert",
value.length
arriving
constructs
factors.
12],
xy
manages
[2,3,4,5],
seat,
transforms
layers,
layer
[5,7,5]
content.
files
contents
content
map.
[[1,1]]
logically
func
number)
{};
cost,
graph[i].length
arr[1],
!==
15]
4]]
traversing
(
operation).
time).
definitely
answer[x]
"h"
["a","b","c"],
painted.
leetcode"
(0,0).
(1,2).
range,
"the",
"what
["hello",
"is"
"11101",
words[j].
worker.
0.66667
distributions
0.6
looking
[1,1,2,2,2,3]
quantities
[1,0,3]
nums[0].
unmarked
[7,6,8]
[4,3],
9999
"bab".
queries[1]
|4-5|
queries[0]
[0,5]:
[0,2]:
queries[2]
queries[3]
accounts.length
customer's
accounts[i][j]
accounts[i].length
endi.
arr[j
terms,
tells
inputs[i][j]
parameters
inputs.flat().length
find(int
like:
row2
col1,
col1
row1,
row2,
row1
col2
looks
maxsum.
maxsum
(4-1)
(3-1)
army
balloon
colors[i]
colors.length
tree's
trees,
through,
mid,
mid
1/6
knight's
"bbbb"
(but
'|',
language,
"example
stacked
'f'}.
blocks.
{'a',
allowed.length
wins,
types.
orders[i].length
orders.length
12:
ordered.
(since
600
(bst).
properties
change,
$15
[3,2,0,1]
returns:
cherries,
home,
cherries
"k"
'm'.
package
closer
inside.
seem
dec
jan
','.
pointer.
preorder,
serialized
[nums[i],
[starttime,
endtime)
jumping
...)
140
2019-01-07
elvis
specify
[1,3,5,4,7]
'}',
expression[i]
{a
union
'{',
ball.
"ea"
(16
exceeding
15)
16],
special,
picture
frequently
occurred
warehouse,
[4,2,7,1,3],
heighti
heighti]
manner.
400ms.
functions.length
met.
execute.
sub-arrays.
time.length
r)
york
[6]
non-digit
ignore
123,
"42"
exists)
remaining,
answers[i]
one's
+----+---------+
leaf.
"baab"
bst's
bonus.
expressed
(non-empty)
+-----------------+
121,
111,
101,
asteroids[i]
asteroid,
asteroids.length
dots
[[1,0,0],[0,1,0],[0,0,1]]
index:
[4,2,6,1,3]
[1,0,48,null,null,12,49]
train
days:
days[i]
days.length
lets
+---------+
[x1,
110,
1111
1011
"abcab",
"u".
left),
[startrow,
startrow,
row),
[7,7,7,7,7,7,7]
company's
array).
vals.length
path).
vals[i]
vals
a2,
9:
instructions.
newnums
newnums[i]
nums[i+1])
newnums.
matches.
nums[index]
partition.
(every
0's).
[[2,2,2],[2,1,2],[2,2,2]]
grid[i][j],
"bcb"
pointer
axes.
[3,2,2]
endtime[i]
starttime.length
scheduled
endtime.length
job.
starttime[i]
[0,4],
[0,2],
"leetcode
[[1,0,0,0],
brick,
spots
"abcdefghijklmnopqrstuvwxyz"
ans[1]
ans[0]
coli
256
floating-point
graph[i][j]
island,
island.
action
messages.
joined
non-negative.
row:
92
floor:
carpetlen
nums[2
[0,1,1].
8],
["leetcode"],
25).
useful
't'.
"ababa"
"123".
number.length
2-
1-
3-
100.0
[1,0,0].
(product_id,
[7]]
"111",
seats.length
[10,11,12]
[1,4,2]
sends
counterclockwise,
(4)
[-1].
$100.
[5,2,3]
broken,
4]],
[[4,
4]);
2019-03-31
2019-02-17
(5,3),
interface:
[12],
arr2[j]
s[i+1]
s[j]
search.
[1,3,1],
parameter
took
guessed
guesses,
guesses.
"aaaaaa"
50000
comparing
via
o(log(n))
partitions),
chunks,
chunk.
pattern.length
"abc
second:
third:
first:
roads[i].length
(0,3)
roads.length
roads[i]
arrive.
(500)
xii,
ii.
iv.
numeral
principle
"mcmxciv"
usually
iiii.
xxvii,
ix.
numeral,
"lviii"
(50)
nine,
xc
numerals
(1000)
cm
1994
900,
xx
key.length,
foo
stamps
ages.length
ages[i]
[3,9,20,null,null,15,7]
-1:
orderings
-2:
col),
nums[n
probability.
[2,0,1]
c:
prints
console.
printnumber
a:
retrieves
efficiency
230
periods.
everybody
list2.
dates.
220
bound
"abaca",
vj]
uj,
restrictions
statement.
'v',
inclusively.
monitor
"day"
example).
200ms.
date.now();
[-2,
[1,3,1,2]
miles
speed,
destination,
(1,1).
(0,1).
scenario.
0))
activity_type
ride
ride.
math
elements:
puts
(1,7),
input,
(5,4)
(4,4).
(4,4)
face
cubes
[lower,
upper]
[1,3,5,7]
5*3
indices[i],
flowers,
nums2)
(2,4),
earned.
[[0,1],[1,1]]
1100
root2,
forest.
nums[j]|
["a","aa","aaa","aaaa"]
bottles
squareful
covering
separator
lonely
prefixes
consistent
meals
insertions
strong
descent
holding
sleep
barcodes
73.
calculator
unreachable
projection
lemonade
b's
maze
beams
redundant
quadruplets
wildcard
finding
pyramid
alert
bookstore
energy
poker
enemy
pseudo-palindromic
examinations
traversable
2016
bsts
596.
dota2
bulb
well-performing
fewest
x-matrix
reordered
spells
possibilities
sequentially
happiness
itinerary
26.
key-card
watched
hashset
mode
compatibility
44.
alike
35.
compete
bounds
tic
escape
bookings
magical
cuboids
article
html
shelves
coprime
transfer
hands
genetic
ports
quad-trees
underground
stadium
grumpy
sliding
stickers
classes
climbing
homework
a's
dishes
fancy
biggest
schemes
module
insufficient
rungs
triples
k-similar
respecting
storage
pillow
inversions
fence
artifacts
snapshot
41.
carpet
visiting
histogram
schedule
pickup
centennial
widest
frogs
altitude
slashes
corridor
triangulation
interleaving
parse
uncrossed
ramp
tilt
xored
harvested
999.
inform
magnetic
champagne
skyline
teach
1551.
achievable
subrectangle
1202.
checker
surface
backlog
forts
76.
700.
attended
alternately
stacking
pruning
wear
k-beauty
monsters
even-valued
k-diff
carpets
foobar
rabbits
prison
latin
delay
golf
tac
dartboard
monkeys
powerful
potions
rocks
baseball
atm
recipes
tromino
followers
uploaded
editor
sightseeing
billboard
watering
ghosts
harmonious
philosophers
additive
hourglass
2020
pangram
pseudo-critical
beauty
subgraph
chalk
frequencies
ideal
personal
competition
deci-binary
mailboxes
simulation
home
sufficient
redistribute
debounce
cornered
wood
shopping
gcds
complex
plank
763.
smooth
unguarded
allocator
alien
stacks
greatness
senate
e-mails
donuts
bouquets
deviation
pancake
appeal
snail
array-form
companies
k-increasing
trail
songs
chart
ipo
compression
cache
lattice
rle
cooperated
statistics
global
bridge
views
cameras
199.
673.
interpretation
190.
unhappy
marbles
complementary
chair
equations
reshape
reservation
ants
inheritance
removable
awesome
refueling
sector
dividing
xor-beauty
70.
goat
bananas
darts
tastiness
supplies
my
fingers
200.
scramble
archery
elimination
collisions
progression
airplane
plants
special-equivalent
monthly
repair
completing
erasure
cuts
wealth
grammar
burgers
spellchecker
99.
competitive
streak
detect
chips
fire
hills
confirmation
min-product
deque
validator
326.
skiplist
entity
naming
diameter
rings
47.
sample
town
minesweeper
95.
richest
wasted
express
truck
37.
mysterious
monotonic
incompatibility
cyclically
bookcase
growth
hats
operating
sender
patients
boomerang
smoother
koko
no-zero
lcp
deeply
890.
delivering
remapping
swim
waste
fee
sub-folders
cherry
effort
546.
votes
80.
save
twin
cookies
gain/loss
mice
square-free
self
morse
ors
prefix-aligned
taps
pencils
totals
json
cancellable
clumsy
74.
burst
rotting
invited
comments
tribonacci
allocation
handled
hashmap
virus
pool
rook
codes
washing
market
mutable
profitable
couples
68.
184.
leaf-similar
gifts
inverse
rope
dna
rearrangements
halve
boats
807.
blacklist
capitalize
successful
96.
encrypt
mutating
56.
skips
restaurants
guess
verifying
boring
counter
valleys
equality
variance
decomposition
tracker
captured
managers
fleet
week
subdomain
parity
turbulent
exclusive
concert
dungeon
performance
tenth
cake
defuse
soup
parking
1111.
advantage
cream
kids
pens
fix
rental
rhombus
booked
end),
booked,
booking.
events.).
refers
explaination:
nums[0]),
"ccc",
"ddd",
prefers
innermost
regions.
amounts
"acd"
illustrated
y-coordinate
frequency.
chess
[20,
attempts
once?
disk,
"bc".
problem:
splits.
[1,0,0,0,1,1]
obj
0-indexed,
0011
30);
students.length
school
students[i]
[0,1,0,1]
[1,1,1,0,0,1],
decoding
url.length
url
work.
"abcc"
mine
s1[i]
charlie
[3,4,5],
).
uniformly
[1,3,4,8],
ri].
"love"
"]
stopped
matched
arr.length,
it:
130.
[0,3]
make,
trainers
detonate
lunch
toeplitz
tinyurl
bombs
gold
[[3,1],[3,3],[5,2]]
minsizej,
roomidi,
abs(id
[3,1]:
minsizej
[3,3]:
hotel
sizei,
roomidi
[[2,2],[1,2],[3,2]],
[3,-1,3]
[[2,3],[2,4],[2,5]]
[2,4]:
sizei]
minimized,
minsizej].
preferredj)
sizei.
abs(3
[5,2]:
[[1,4],[2,3],[3,5],[4,1],[5,2]],
[roomidi,
[preferredj,
preferredj
"moon"
joyboy"
"joyboy"
moon
"luffy
[5,25]
[40,25]
nums.last()
array.last()
histogram's
[2,1,5,6,2,3]
histogram.
location.length
angle,
rotate.
obstruct
posy]
[[1,0],[2,1]],
view.
angle/2].
shaded
360
sight.
[[2,1],[2,2],[3,3]],
[d
determining
angle/2,
posx,
posx
[[2,1],[2,2],[3,4],[1,1]],
posy
posy,
view,
vision
see.
[posx,
k).
(subtext1,
subtext1
subtext2
subtexti
"antaprezatepzapreanta"
"ghiabcdefhelloadamhelloabcdefghi"
subtextk
subtextk)
"(merchant)".
"merchant"
text).
"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)".
"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
subtext2,
[[1,6],[2,3],[3,2],[4,6]]
[[2,4],[3,6],[5,5]],
[[1,2],[2,3],[4,5]],
[[1,3],[2,4],[3,6],[4,3],[5,5]]
[[1,4],[3,2],[4,1]]
vali]
nums1[i].length
[[1,3],[4,3]]
ids,
nums2[j].length
vali.
[2,5,10]
[4,6,16]
gcds.
[5,15,40,5,6]
[6,10,3]
[1,2,1,2,4,1,5,10].
statuses
on]
...).
bulbs.
press.
[on]
functionality
presses.
[off]
off]
press,
3k
buttons
presses,
([5,1],
target(2).
[-1,3,5,1,4,2,-9],
[3,5,1,4,2,-9])
shot
alicearrows[i],
11),
[0,0,0,0,0,0,0,0,1,1,1,0]
section,
bobarrows
bk
bobarrows[i]
[0,0,1,0,0,0,0,0,0,0,0,2]
ak
scoring
alicearrows
scored.
sections
[1,1,0,1,0,0,2,1,0,1,2,0]
opponents
bk,
shoots
sum(alicearrows[i])
[0,0,0,0,1,1,0,0,1,2,3,1]
numarrows.
bobarrows.length
numarrows
alicearrows.length
successive
form.
[3,6,9,1]
(3,6)
[1,3,6,9],
jim
size1,
1--a
size2
size2.
size1
2--c
96],
2--b
8]]
3--a
[[15,
[36,
gardens.
[5,4,5,5].
additionally
caretaker
[3,6,2,2].
complete.
newflowers
incomplete
[1,3,1,1],
partial.
flowers[i],
beauty.
[2,4,5,3],
newflowers,
nums1[3]2
nums1[i]2
nums2[k]
(3,0,1).
nums2[2].
[1,2,9,7]
nums1.length.
nums1[k].
(0,0,2),
[5,2,8,9]
(0,0,1),
nums2[3]2
(3,0,2).
[7,7,8,3],
(1,1,2).
nums2[i]2
(1,0,1),
[7,4],
nums1[1]2
(2,0,1).
nums2.length.
nums1[k]
(1,0,2),
nums2[k].
nums1[1].
[-7,-1,1,3,4]
[-5,-1,1,2,3]
[-3,-1,2,-2,4].
[3,1,7]
[4,1,3],
[5,0,3,4,0]
[1,3,1,1,2]
nums[3].
[0,5,3]
[4,5,6,7,0,1,4]
[2,2,2,0,1]
[0,1,4,4,5,6,7]
walls.length
guard.
guards.length,
west)
guard
guards.length
[[1,1]],
guarded.
walls[j]
coli,
walls[j].length
guards[i].length
[[0,1],[1,0],[2,1],[1,2]]
obstructed
colj]
rowj
guards[i]
[[0,0],[1,1],[2,3]],
[[0,1],[2,2],[1,4]]
delayed.
meetings,
[[1,20],[2,10],[3,5],[4,9],[6,8]]
[[0,10],[1,5],[2,7],[3,4]]
unused
[10,12).
meetings[i].length
meetings
[10,11).
unused,
meetings[i]
[5,10).
meetings.length
endi).
bottoms.length
bottoms[i]
rotations.
bottoms:
bottoms
domino,
tops
[5,2,6,2,3,2]
[3,6,3,3,4]
tops.length
tops[i],
tops[i]
[2,1,2,4,2,2],
tile.)
indicated
[3,5,1,2,3],
"430043":
"30"
(taking
240,
430043.
k:
"240":
"04"
"40"
"43"
430043,
memory).
memory1
consumes
sticks.
crashtime
memory1crash,
faulty
crashed
memory2crash],
crashes.
memory1,
[6,0,4]
memory1crash
memory2crash
memory2
[crashtime,
"rlrsll"
directions[i]
directions,
directions.length
collision,
motion.
collided.
"llrr"
involved
stationary,
[2,1,1,5,6,2,3,1]
[1,5,6,3,1].
amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
choices
"00:00"
"15:00".
unknown,
"25:00"
"05:00"
1440
"0?:0?"
"??:??"
"?5:00"
"23:59".
digital
"59"
producing
tallest,
[155,185,150]
["bob","alice","bob"]
heights.
["mary","john","emma"],
emma
[180,165,170]
people's
["alice","bob","bob"],
names,
["mary","emma","john"]
john.
"friday",
"saturday"}.
"wednesday",
{"sunday",
"saturday"
"sunday"
1999
"tuesday",
"thursday",
"monday",
[40,
40)
["mycalendartwo",
mycalendartwo
mycalendartwo.book(5,
mycalendartwo()
booked.
mycalendartwo.book(25,
mycalendartwo();
mycalendartwo.book(10,
mycalendartwo.book(50,
walks
4-directional
(0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
[[0,1],[2,0]]
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
(0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
non-obstacle
(0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
(0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
[[1,0,0,0],[0,0,0,0],[0,0,0,2]]
"/home/foo"
"/home"
"/home//foo/"
'..')
canonical
file/directory
'/')
no-op,
'//')
unix-style
"/../"
"/home/"
'...'
slash
'..'
go.
[10,9]
[7,6,7]
[4,4,7,6,7]
(14
[7,7,6]
[7,7]
[4,3,10,9,8]
matrix[i]
y2')
[[0,1,0],[1,1,1],[0,1,0]],
(x1',
10^8
1x2
x2',
y1',
matrix[x][y]
[[1,-1],[-1,1]],
submatrix.
1x1
-10^8
2x1
submatrices,
[[904]],
2x2
x1'.
[2,5,1,3,4,7],
x1=2,
y2=4,
y3=7
y1=3,
[x1,x2,...,xn,y1,y2,...,yn].
x3=1,
x2=5,
[2,3,5,4,1,7].
[1,2,3,4,4,3,2,1],
[2,3,5,4,1,7]
[1,4,2,3,3,2,4,1]
[x1,y1,x2,y2,...,xn,yn].
"99e2.5",
"+3.14",
"--6",
"1a",
"+6e-1",
"-0.1",
"3e+7",
"0089",
"e3",
'-').
"-.9",
"4.",
"-90e3",
"1e",
"53.5e93",
"2e10",
["2",
order):
(optional)
"-+3",
"-123.456e789"],
"95a54e53"].
[false,false,true,false,true,true,false]
[false,false,false,false,false,false,false]
hasapple[i]
hasapple,
hasapple
[false,false,true,false,false,true,false]
hasapple.length
apple;
[1,1,2,3,5]
[1,1,1,1,1,1],
containedboxes[i][j]
[[1,2],[3],[],[]],
initialboxes
[[],[],[1],[]],
status.length
initialboxes.length
status,
status[i]
[1,0,0,0,0,0],
keys[i].length
containedboxes[i]
containedboxes[i].length
[7,5,4,100],
[[1,2,3,4,5],[],[],[],[],[]],
keys[i][j]
containedboxes
initialboxes[i]
[1,0,1,0],
1,2,3,4
containedboxes.length
friendship
knows,
languages[i].length
friendships[i]
users,
languages[i]
languages
teach.
[[1,4],[1,2],[3,4],[2,3]]
languages[i][j]
[[1],[2],[1,2]],
[[2],[1,3],[1,2],[3]],
friendships
languages.length
transitive,
friendships.length
explore
output?
solutions.
file.
[id=3,
restaurant).
veganfriendlyi
[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]],
veganfriendly
[id=2,
price=30,
[id=4,
restaurants.length
[id=1,
maxprice,
distance=1]
filtering,
maxdistance
distance=4]
rating=4,
distance=10]
restaurants[i]
(meaning
distancei
price=50,
restaurants[i].length
distance=3]
veganfriendly=1,
veganfriendlyi,
filters.
veganfriendly=0,
price=10,
(ordered
[4,3,2,1,5]
maxprice
distance=5]
ratingi,
price=40,
rating=8,
rating=10,
price=15,
rating,
distancei].
rating=1,
[id=5,
{2,2},
[{3},{1},{2},{3}]
[2,2,1,2,2]
[1,2,2,1,1]
neighborhoods,
painted,
{2},
[[1,1,1],[1,1,1],[1,1,1],[1,1,1]],
houses[i]:
cost[i][j]:
{3,3},
[1,2,2,3,3,2,1,1]
neighborhoods
[0,2,1,2,0],
{1,1}].
{2,2}].
neighborhood
[3,1,2,3],
houses,
[{1},
yet.
[{2,2},
neighborhoods.
{1},
[[1,10],[10,1],[10,1],[1,10],[5,1]],
kingname
"bob");
kingname)
"alex");
childname),
"getinheritanceorder",
"bob"].
well-defined
jack,
successor(x,
grandchildren,
bob),
throneinheritance("king");
[null],
["bob"],
["king",
king,
alive.
member.
death(string
curorder)
birth(string
successor(x's
getinheritanceorder.
"alex"],
inheritance.
[null]]
"birth",
t.birth("andy",
["king"].
successor(alice,
"death",
["bob",
kingdom
successor(jack,
getinheritanceorder()
"alice",
throneinheritance
born.
"catherine"]
name)
"jack",
curorder
"andy");
dead.
who's
jack.
[["king"],
far,
"catherine"],
t.getinheritanceorder();
"alex",
["throneinheritance",
family
while,
"andy",
throneinheritance(string
someone
"matthew",
arguments
"asha",
"catherine"]]
kingname.length,
t.birth("king",
asha
childname.length,
"catherine");
catherine
"matthew");
kingname,
birth(parentname,
childname,
"asha");
t=
parentname,
death.
childname
parentname.length,
oldest
parentname
["andy",
gave
t.death("bob");
"getinheritanceorder"]
matthew
"matthew"],
curorder):
"jack"].
successor(king,
"asha"],
t.birth("bob",
son
curorder:
successor(bob,
curorder),
childname)
"andy"],
andy
"bob"],
(alice
"alice"].
childname.
locks
'@'.
acquire
["@.a..","###.#","b.a.b"]
["@..aa","..b#.","....b"]
key;
lock.
["@aa"]
locks.
properties.
"aaaaaaaa",
"cabac"
"aaaaaaaa"
["h","a","n","n","a","h"]
["h","e","l","l","o"]
["o","l","l","e","h"]
reverses
[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
[10,4,6]
"getindex",
inc,
fancy();
"append",
addall(inc)
[26,
10*2]
14+3]
multall
multall(m)
[5*2,
fancy.append(7);
multall,
inc.
multiplies
17]
["fancy",
fancy.append(10);
[10+3,
fancy.append(2);
fancy.addall(3);
getindex(idx)
idx
"getindex"]
append,
addall,
getindex.
7*2]
fancy.getindex(1);
append(val)
"addall",
fancy.getindex(0);
[2+3]
17*2,
fancy.multall(2);
fancy.getindex(2);
"multall",
[13*2,
fancy()
"eet"
"abciiidef",
"aeiou",
"lee",
vowels.
"acbd"
s[1],
"bcad"
s[3],
indices(0-indexed)
"dcab",
[[0,1],[1,2]]
pairs[i][1]
s[2],
[[0,3],[1,2],[0,2]]
[[0,3],[1,2]]
pairs[i][0],
12321
108].
exceeded","time":50}
async
milliseconds,
{"resolved":25,"time":100}
{"resolved":15,"time":120}
fullfill.
await
120));
rejects
t=100ms.
{"rejected":"time
"time
"error";
{"rejected":"error","time":0}
exceeded".
t=120ms.
[9,8,7,6,5,1,2,3,4]
choice,
consecutive).
[2,4,1,2,7,8]
"cdbcba"
"cdbcbbaaab"
"aabbaaxybbaabb",
"cabxe".
"cdbcbbaaabab".
"cdbcbbaa"
"cxbae".
"cdbcba".
"cdbc"
"cdbcbbaaab".
"cdbcbbaaabab",
"cdbcbbaa".
"cabxbae"
[3,4,2,3,4,7]
[3,4,2,3]
[1,0,5,3]
"2582"
"3245"
564908303
prime.
[1,1,2,3,3,4,4,8,8]
[3,3,7,7,10,11,11]
ri),
[[1,4],[3,6],[2,8]]
[2,8],
[[1,4],[2,3]]
[2,1,5],
1021
274
806
[1,2,0,0],
[1,3,2,1].
1321,
[4,5,5]
[2,7,4],
455
shift('t')
shifts[i]
"gfd"
"rpl"
"igc".
shift('a')
"rpl",
shift()
shifts.length
shift('z')
"dbc".
bigger,
cough
patient_name
diab1
diab1.
patient_id,
patient_id
diab100
'conditions'
acne
+------------+--------------+--------------+
george
yfev
myop
diabetes
alain
diab201
hospital.
diabetes.
"ur".
multiples
"ohhh"
"holasss"
"love".
"pppz"
"ag"
arithmetic.
factorial(10)
clumsy(10)
[[3,0],[0,3]],
fail
cashbacki].
costi
cashbacki.
[[0,3],[3,0]],
transactions[i].length
cashbacki
[[3,0],[0,3]]
costi,
[costi,
[[2,1],[5,0],[4,2]]
a;
[5,6,1,8,4,5].
occurs.
skipa
intersected
c1:
retain
memory?
(your
[2,6,4].
head)
[5,6,1,8,4,5],
headb
listb
intersect,
returns.
[4,1,8,4,5],
heada
listb[skipb]
[1,9,1,2,4],
[2,6,4],
intersectval
heads,
references.
lista
lista[skipa]
headb,
[1,9,1,2,4].
skipb
(3rd
correctly
[4,1,8,4,5].
intersect).
inputs):
1->1->2->3->4->4->5->6
lists[i].length
lists.length
linked-list
lists[i][j]
1->4->5,
list:
[1,1,2,3,4,4,5,6]
2->6
lists[i]
[[1,4,5],[1,3,4],[2,6]]
1->3->4,
"1|01|01"
"0|0|00"
"10|1|01"
"00|0|0"
"0|00|0"
"1|010|1"
"10|10|1"
["tbontb","oerooe","
t"
g","t"]
"oro"
t"]
"tbontb"
"weu"
["hay","oro","weu"]
i","e
"oerooe"
["cic","oso","n
n","s
m","t
"contest
(trailing
"hay"
coming"
targetgrid,
[[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
targetgrid[i].length
[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
targetgrid
[[1,2,1],[2,1,2],[1,2,1]]
targetgrid[row][col]
turns.
targetgrid.length
solid
[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
pizza.length
vertically,
["a..","a..","..."],
pizza[i].length
cell)
pizza.
["a..","aaa","..."],
apple)
["a..","aa.","..."],
horizontal,
[23,
[23,2,6,4,7],
two,
[23,2,4,6,7],
sum(nums[i])
verticalcuts[i]
verticalcuts.
horizontalcuts[i]
h,
horizontalcuts.length
verticalcuts[j]
verticalcuts
horizontalcuts
min(w
cake.
cake,
[3,1],
min(h
verticalcuts.length
cut.
0-3
{'+',
asterisks.
"ab@qq.com"
"1(234)567-890"
somewhere
email:
"leetcode@leetcode.com"
"+**-***-***-xxxx"
"***-***-xxxx"
middle.
"l*****e@leetcode.com"
lowercase,
character).
10-13
'}
"a*****b@qq.com"
"***-***-7890".
"+*-***-***-xxxx"
"+***-***-***-xxxx"
symbol,
"***-***-7890"
masked
address:
letters)
"*****".
[1,2,3,0,0,0],
[2,5,6],
merged,
accommodate
this,
[2,5,6].
[1,2,2,3,5,6]
lengths:
[1,2,1,10]
evaluations.
children's
[2,1,3,null,null,0,1]
2.50000
(m+n)).
s[1]]
consecutive,
s[3]]
[occuring
"11100100"
[at
"11011000"
3500
[20,24].
[[1,2,3],[1,2,3],[1,2,3]]
24,26],
30],
[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
[20,24]
uselimit.
uselimit
[0,0,0,1,1],
numwanted,
labels[i]
numwanted
[9,8,8,7,6],
numwanted.
(flip
[[1,0,0],[1,0,0]]
cannot.
["*","*"],
gravity.
box[i].length
["#",".","."]]
["#",".","*"],
["#","*","."],
box's
inertia
["#","#","*","."]]
side-view
obstacles'
box[i][j]
[["#","."],
gravity
["#","#","#","*",".","."],
[["#",".","#"]]
["#","#","#",".","#","."]]
[["."],
box.length
["#","#","*"],
["#"]]
[".","#","#"],
["#"],
[".","."]]
[["#","#","*",".","*","."],
[[".","#","#"],
[["#",".","*","."],
13000
[123,234]
[1234,2345,3456,4567,5678,6789,12345]
"24241"
"24142"
"231132"
"12345678"
"213123"
"3242415"
101.
706
piles[i][j]
wallet
[[1,100,3],[7,8,9]],
sum(piles[i].length)
[[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]],
assorted
wallet.
denominations.
[1,5,2,4,1]
[1,1,2].
[1,2,2].
circularly,
[2,3,4,-1,4]
circularly
[2,-1,2]
[1,2,3,4,3]
traversing-order
[[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
interview
bcosti
[acosti,
3086
1859
bcosti.
interviewing
flying
acosti,
bcosti],
[[10,20],[30,200],[400,50],[30,20]]
[[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
https://leetcode.com/problems/remove-duplicate-letters/
316:
[8,6,7,1,0]
[8,1,9]
"981"
"8760"
[[5,2],[1,6]],
[pj,
edgelist[i]
edgelist.length,
disi,
qj,
edgelist
limitj
disi]
[[0,1,10],[1,2,5],[2,3,9],[3,4,13]],
limitj],
edgelist,
[[0,1,2],[1,2,4],[2,0,8],[1,0,16]],
disi.
[[0,1,2],[0,2,5]]
edgelist[i].length
pj,
[[0,4,14],[1,4,13]]
qj
[true,false]
pj
negative_feedback
report[i].length
student_id[i]
["this
student_id.length
positive_feedback
feedback,
negative_feedback,
negative_feedback[j]
negative_feedback[j].length
negative_feedback.length
negative_feedback.
["not"],
positive_feedback.length,
feedback
report[i]
["smart","brilliant","studious"],
smart"],
reports,
studious","the
student_id,
report.length
3-1=2
report[i].
positive_feedback[i]
positive_feedback[i].length,
"ana"
579.
[1,4,10,12],
k1,
[5,8,6,9],
nums2[i])2
8)2
20)2
k2
k2.
(nums1[i]
5)2
k1
2)2
19)2
9)2
[2,10,20,19],
10)2
7)2
579
thief
tour,
besides
[3,2,3,null,3,null,1]
himself
directly-linked
thievery
realized
[3,4,5,1,3,null,1]
dividend
range:
truncated
-2.33333..
dealing
8.345
-231.
quotient
losing
dividend,
−
-2.7335
10/3
7/-3
divisor.
[−231,
3.33333..
[1,2,3,4,null,5,6,null,null,7]
text1.length,
text2,
text2.length
["abba","baba","bbaa","cd","cd"]
"bbaa"
["a","b","c","d","e"]
["abba","cd"].
["abba","cd","cd"].
words[2].
words[i
words[1].
anagrams,
["abba","baba","cd","cd"].
["abba","cd"]
"abdc".
"dacb"
undirected).
u).
graph[u]
[[1,2,3],[0,2],[0,1,3],[0,2]]
graph[u][i]
graph[u].length
graph[v]
sets:
[[1,3],[0,2],[1,3],[0,2]]
(graph[u]
graph[u],
bipartite
bipartite.
sort.
[1,3,2,4,1],
bars.
[1,6,3,1,2,5],
sweltering
spend,
afford
boy
0,1,2,4
[10,6,8,7,7,8],
"()(())".
[["(","(","("],[")","(",")"],["(","(",")"],["(","(",")"]]
"((()))".
"))("
")((".
[[")",")"],["(","("]]
[0,2,0]
dresses.
dress
[1,0,5]
machines.length
move:
machines[i]
dresses
<--
machines,
[0,1,1,1,1,1,0,1]
[0,1,1,1,0,1,1,0,1]
[1,null,1,null,1]
1".
[1,null,0,0,1]
[1,null,0,null,1]
"every
[1,1,0,1,1,null,1]
[1,0,1,0,0,0,1]
[1,1,0,1,1,0,1,0]
'n':
"h2o2"
"h2o2he3mg4"
added)
{'h':
{'k':
chemical
"h1o2"
"h2mgo2"
'mg':
formulas.
's':
4}.
"h2o"
follow.
"(h2o2)"
(optionally
"k4n2o14s4"
atomic
order),
"k4(on(so3)2)2"
formula,
atom.
"mg(oh)2"
formulas
element's
"(h2o2)3"
'o':
1}.
formula.length
[7,5,3,1].
[1,5,7,8,5,3,4,2,1],
[1,3,5,7],
"^"
0])
[1,3,5,6,2,4]
[1,2,3,6,7,11,14,4,8,12,5,9,13,10]
min(6,
min(ai,
bn)
(a1,
[1,4,3,2]
b1),
(a2,
b2),
[6,2,6,5,1,2]
(an,
"-x
*,
(op1)
op2,
op1,
negation.
(+,
adhere
(op2)
-,
(-).
negation
(op3)
"x
conventions:
(/)
100000000
/).
x"
501
vowels,
"uaeio",
"aaaeeeooo"
'e's,
"aeoiu",
"aaaaaaeiiiioou"
'e's
'i's,
beautiful,
"aaaaeiiiiouuu"
"aeeeiiiioooauuuaeiou"
"aeiaaioaaaaeiiiiouuuooaauuaeiu"
"aeiou"
-7
"202"
"-10"
[2,-1,2],
[[1,1],[3,4],[-1,0]]
points[i][1]
second).
[[3,2],[-2,2]]
points[i][0],
[-1,0]
cube
cubic
touching
storeroom
boxes:
fuel:
reduces
finish).
locations.length
routes:
[2,3,6,8,4],
locations[j]|.
locations[i]
[4,3,1],
[5,2,1],
|locations[i]
routes,
"input",
27th
"ouput",
79,
drops.
64,
didn't,
94,
85,
45,
outcome,
survive,
72,
97,
[[1,3],[10,20],[2,5],[4,8]]
ranges[i].length
[[6,10],[5,15]]
overlapping,
[40,25,25]
$1,
worker.length
[24,66,99],
difficulty[i],
worker[j]).
profit[i],
$3.
worker[i]
difficulty,
[4,5,6,7]
difficulty[i]
[4,4,6,6]
$0.
[85,47,57],
[10,20,30,40,50],
worker[j]
difficulty.length
[20,20,30,30]
[5,4,5,1,1,null,5]
[1,4,5,4,4,null,5]
dollars)
distributed.
dollar.
money,
house,
robbing
professional
stopping
(money
[2,7,9,3,1]
stashed,
tonight
[[1,0,0],[1,1,0],[1,1,1]]
[[0,0,1],[1,1,0],[1,0,0]]
[[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
portscount,
[[1,1],[2,1],[1,1]],
delivered.
deliver
[[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]],
maxboxes
[[1,2],[3,3],[3,1],[3,1],[2,4]],
maxweight
weighti],
portsi
box).
port,
needed,
loaded
limits
delivered
weightsi
carry.
storage.
maxboxes,
portscount
ports.
maxweight.
[portsi,
[-2,-3,0]
prefix[i]
[2,-1,0,1,-3,3,-3]
[2,5,6,5,2,2,-1],
[2,3,1,-1,-3,0,-3].
"1.234"
987
(".")
"987"
thousands
bag,
[1,3,5,1],
marble
[1],[3,5,1]
inclusively,
(1+3)
(1+1)
[1,3],[5,1],
[1],[3].
marble.
weights[j].
(3+1)
(5+1)
burgers.
2*6
tomato
tomatoslices
cheeseslices
4*1
burger:
total_small]
cheeseslices.
[total_jumbo,
tomatoslices,
jumbo
burger
preferences
n/2
pairs[i].length
preference.
[[1],
preferences.length
preferences[i]
unhappy.
0]],
preferences[i][j]
[0]],
preferences[i].length
but:
[0,0,1,1,2,3,3,_,_]
[0,0,1,1,1,1,2,3,3]
[1,1,2,2,3,_]
"paypalishiring"
"pahnaplsiigyir"
"paypalishiring",
numrows);
convert(string
numrows
','
font
"pinalsigyahrpi"
legibility)
{2,4}
[[1,2],[2,3],[2,4]]
{1,2},
{1,2,4},
{2,3}
{1,2,3},
[3,4,0]
subset,
dth
{2,3,4}
{1,2,3,4}
[2,3,-1,5,4].
[4,-2,3].
[3,1,0,2].
[2,-3,-1,5,-4],
[4,2,3],
[3,-1,0,2],
-nums[i].
+---------+-------------+
{0}
+---------+----------------+
followers_count|
{0,1}
follower_id
follower
followers.
follower_id)
(reverse):
*=
(accelerate)
"aar",
"aaara".
[2,3,0]
[[0,2],[1,4],[1,1]]
(strings
"e").
"ece",
"ece").
[[0,2],[0,1],[2,2]]
sum(words[i].length)
["aba","bcb","ece","aa","e"],
["a","e","i"],
[2,3,0].
[6,5,6,5],
3.5.
[6,5,6],
[1,3,4,3,1],
[6,5,6,5,8],
[6,5,6,5,8]
[1,null,-3,4]
[1,2,3,4,null,null,7,8,9,null,14]
[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14],
[1,2,-3,-5,null,4,null],
[5,4,8,11,null,17,4,7,1,null,null,5,3],
[5,4,8,11,null,17,4,7,null,null,null,5]
"lcggcl",
["ab","ty","yt","lc","cl","ab"]
"lc"
"lcyttycl"
created.
"clgglc"
"ty"
"yt"
["lc","cl","gg"]
"cl"
"tylcclyt",
["cc","ll","xx"]
"worl".
"wor",
"apply"
"apply".
["w","wo","wor","worl","world"]
"wo",
["a","banana","app","appl","ap","apply","apple"]
"w",
[2,3,4,7,11],
[5,6,7,...].
[1,5,6,8,9,10,12,13,...].
[10,2,5,3]
-103
[3,1,7,11]
"mult"
(add
(let
variable.
en
mult
statements
"mult",
3+2
e2)"
evaluation,
negative.)
evaluated,
x)"
e2.
e2
v2
vn
legal.
expr)",
y),
y))))"
(mult
lisp-like
y))"
"(add
sequentially;
evaluate.
scope
scope.
syntax
expr.
scopes
v1
of.
"(mult
"(let
parentheses)
firsti,
firsti.
secondi.
secondi
[[0,2],[2,3]]
[[-1,-1]]
[[4,5]]
"101101",
secondi].
"0101",
[[0,5],[1,2]]
[0,2].
[[12,8]]
1038:
https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/
repetition
[1,2,2,4]
"rgeat"
"great"
recursively,
"caebd"
"g/r
led
"at"
"gr/eat"
scrambled
"r/g
e/
e/at"
"great",
a/t"
"a/t".
[[1,2],[2,3],[3,4],[1,4],[1,5]]
[7,7,7,7]
[6,5,4,8]
[8,1,2,2,3]
nums[4]=3
nums[2]=2
j's
[4,0,1,1,3]
[2,1,0,3]
nums[1]=1
nums[0]=8
nums[3]=2
[4,8,5,0,1,null,6]
night,
rapidly,
isinfected[i][j]
night).
infected
builds
virus.
isinfected
[[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
saved,
contained.
quarantine
resources
(continuous
affected
modeled
infect
uncontaminated
threatens
isinfected,
cells)
wall)
isinfected[i].length
infected,
limited.
viral
isinfected.length
uninfected
singly-linked
2016/06/03
+--------------+-------------+-------------+
requester_id
(requester_id,
accept_date
2016/06/09
world,
accepter_id)
accepter_id
requestaccepted
2016/06/08
government
stations,
[4,4,4,4],
pre-existing
sanctioned
[1,4,4,5,0].
power,
[1,2,4,5,0],
https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/
lca
leaf-nodes
865:
dice,
6+1.
222616187
2+5,
3+4,
(out
ways)
1+6,
faces.
4+3,
5+2,
face-up
2020,
last_stamp
00:46:50
2019-07-14
2020-01-16
2020-12-30
09:00:00
07:59:08
2020-06-30
2021-04-21
00:18:15
14:06:06
logins
december.
15:06:07
2019-03-07
2019-08-25
05:10:53
11:59:59
02:49:50
(december)
smallestinfiniteset();
smallestinfiniteset.popsmallest();
smallestinfiniteset
"addback",
smallestinfiniteset()
...].
smallestinfiniteset.addback(1);
"popsmallest",
popsmallest
["smallestinfiniteset",
"popsmallest"]
popsmallest()
addback.
smallestinfiniteset.addback(2);
addback(int
[7,9,6,6,8,7,3,0,9,5]
[7,9,6,6,7,8,3,0,9,5],
[1,5,5,4,11],
[4,5,7],
[5,4,11].
[3,3,3].
[4,4].
[1,9],
[5,5].
[5,5,2,4,4,2],
defined:
[[0,1],[1,2],[5,2],[4,3],[1,3]]
[[1,2,3],[8,9,4],[7,6,5]]
[1,9,6,10].
[5,8,3]
[1,2,6,10].
havenâ€™t
[6,8,11,12]
[4,9,6,10]
"238182",
"54",
"165462",
discipline
behaviour
thinking
putrightfork
threads,
ends.
spaghetti.
algorithm)
wantstoeat(philosopher,
specifies
thinking,
pickleftfork
forks.
philosophers.
{1
pickrightfork,
philosophers'
output[i]
philosopher
simulate
eating,
demand
concurrent
think.
wikipedia.org
pickleftfork,
putleftfork
silent
fork:
putrightfork)
eat}.
[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
philosopher.
fork
space;
stomach
putleftfork,
spaghetti
(three
assumed.
controlling
asking
forks
number).
philosopher,
right}.
bowls
integers)
eat,
starve;
pickrightfork
c]
columntitle
"fxshrxw"].
columntitle.length
sheet,
"leve"),
"el",
"evel").
"level"
("l",
"le",
"vel",
"l".
"ababab"
"lev",
s="",
t="zza".
s="zza",
p="",
t="".
t="ba".
p="addb",
"addb"
p="abc",
"azz"
robot.
paper.
"bdda"
t="bdda".
"zza"
p="ab",
p="azz",
s="bdda",
s="c",
t="c".
deletion.
(contiguous
[1,-2,-2,3]
optionally
[1,-2,0,3]
[[0,3],[3,1],[1,2],[2,0]]
requests:
building,
[[0,0],[1,2],[2,1]]
season,
transfers
[[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
uni-valued,
[2,2,2,5,2]
uni-valued
[1,1,1,1,1,null,1]
[city
weighti,
distancethreshold,
distancethreshold.
[[0,1,3],[1,2,1],[1,3,4],[2,3,1]],
[[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]],
distancethreshold
edges'
"un"
"uniq"
"iq"
("cha"
["un","iq","ue"]
["cha","r","act","ers"]
"chaers"
("iq"
"ue")
"ique"
"iq")
("un"
"acters"
["abcdefghijklmnopqrstuvwxyz"]
"ers").
("act"
"ue"
arr[i].length
"ers")
â±numerator/denominator.
"-1/6"
"0/1"
2/1.
irreducible
'9',
output)
fraction.
"1/3-1/2"
"-1/2+1/2"
"-1/2+1/2+1/3"
int.
fractions,
omitted.
"1/3"
(input
corressponds
[1,2,_]
[0,1,2,3,4,_,_,_,_,_]
[0,0,1,1,1,2,2,3,3,4]
[-5,1,5,0,-7]
biker
altitudes.
gain[i]
[-4,-3,-2,-1,4,3,2]
altitudes
[0,-4,-7,-9,-10,-6,-3,-1].
gain.length
[0,-5,-4,1,1,-6].
trip.
[9,4,7,2,10]
seq.length
[20,15,10,5].
seq[i
[3,6,9,12]
[4,7,10].
[20,1,15,3,10,5,8]
"abbca":
"co",
"abbca"
"abbc",
"code":
"bbc",
"bbca"
"cod",
"de"
"od",
[4,4,2,4,4],
suits[i]
"pair".
["a","b","c","a","d"]
card":
suits.
suit
kind":
kind"
"flush":
"flush"
kind".
["a","a","a","a","a"]
"flush".
suits
suits[i].
"pair":
"three
["d","a","a","b","c"]
[13,2,3,1,9],
"pair"
case-sensitive.
worst:
suits.length
suit,
[10,10,2,12,9],
suit.
f[i
"1101111"
579].
"112358130"
[123,
[11,0,11,11]
456,
"0123"
111]
[110,
type),
231,
f[i]
"123456579".
f.length
[[1,2],[2,3],[2,4],[1,5]]
ancestors.
[[1,2],[2,3],[1,3]]
return:
figures.
oriented
cooldown,
restrictions:
[buy,
[1,2,3,0,2]
sell]
buy,
sell,
2020-12-03
(32
entry
(33
+------------+--------+------------+
+--------+------------+---------+----------+
happened,
out_time.
events:
employees'
total_time
in_time
out_time
in_time.
(200
(74
173,
event_day,
in_time)
2020-11-28
74
173
event_day
emp_id
1440.
47)
(emp_id,
[1,null,2,null,3,null,4,null,null]
[3,1,4,null,2]
[2,1,3,null,null,null,4]
thirty
weight).
00000000000000000000000010000000
00000000000000000000000000001011
'r')
'x')
"ros"
word:
horse
enention
'e')
intention
't')
rose
"horse",
(remove
exection
"intention",
inention
(replace
"execution"
rorse
ros
(insert
exention
'c')
all).
load.length
arrival.length,
busiest.
[10,12,11]
arrival.length
servers.
[5,2,3,3,3]
k)th
complete).
server(s).
busy,
busiest
arrival[i]
(i+2)th
load,
load[i]
computational
requests,
dropped.
arrival[i],
"caa"
"cda"
"dabadd",
project_id.
experience_years
ali
+-------------+---------------+
(project_id,
project_id
employee_id)
+-------------+--------+------------------+
doe
average_years
2.00
[10,12,19,14]
[18,43,36,13,7]
[1,0,1,0,1,0,1],
grid.length,
[1,1,1,1,1,1,1]]
[[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
[[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
bottom)
(group
[[1,1,1,1,1,1,1],
1s).
<=1
[1,0,1,1,1,0,1],
[1,0,0,0,0,0,1],
(water).
"dsahjpjauf",
"ace".
["a","bb","acd","ace"]
["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
object,
objects,
primitives
inludes
booleans,
json.stringify(object).length
maxnestinglevel
{"key":{"a":1,"b":[{},null,"hello"]}}
json.stringify
{"y":1,"x":2}
object.keys().
{"a":"str","b":-12,"c":true,"d":null}
[[1,2,3],[3,1,2],[2,3,1]]
[[1,1,1],[1,2,3],[1,2,3]]
[9,8,6,5,3]
[9,8,9]
[6,7],
[3,4,6,5],
[6,0,4],
[6,7,6,0,4]
[3,9],
[9,1,2,5,8,3],
[8,9],
[9,8,5,0,3,6,4,2,6,8]
"934"
change[2]
"832".
change[num[i]]).
change[d]
change[0]
"021":
change[1]
"832"
"934".
"132",
to)
"021",
mutate
[9,4,3,5,7,2,1,9,0,6]
change.length
0-9.
[1,4,7,5,3,2,5,6,9,4]
change[d].
|2-4|
[2,4,7]
|4-7|
[8,2,4,7],
|8-2|
[10,1,2,4,7,2],
[4,2,2,2,4,4,2,2],
|7-7|
[8,2,4]
[8,2]
|8-8|
[2,4,7,2]
[8,2,4,7]
|4-4|
side-length
[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]],
[[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]],
[0,0,0,1,1,0,1,1]
depth(b))
seq.size
seq.length).
[0,1,1,1,1,0]
seq.length)
"()(())()"
")"
seq,
encodes
[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
[[1,2],[2,2],[4,2]]
rope,
perimeter.
well-fenced
[[1,1],[2,0],[4,2],[3,3],[2,4]]
fence.
expensive.
[[4,2],[2,2],[1,2]]
trees[i].length
enclosed.
shift('c',1)
s[i])
s[7]
shift(c,
x),
shift('b',2)
"a1b2c3d4e"
shift(s[i-1],
shift('a',
shift('a',1)
shift('e',1)
shift('d',4)
"abbdcfdhe"
s[i]).
"a1c1e1"
"abcdef"
shift('x',
shift('c',3)
6})
3}),
filled,
{2,
[1,2,3,4,5,null,7]
({4,
node-values
2h
[[1,0],[1,1]]
[[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
[9,3,5]
[8,5]
changed.)
counts[i]
[2,1,1,0]
[5,2,6,1]
[[1,0],[0,0],[0,1]]
[[0,0],[0,1],[1,0],[0,2],[2,0]]
-50
array),
["a","a","a","b","b","b"],
["a","a","a","a","a","a","b","c","d","e","f","g"],
task.length
["a","b","a","b","a","b"]
["b","b","b","a","a","a"]
["a","a","a","b","b","b"]
n-bit
[00,01,11,10].
[00,10,11,01].
letters[0].
["c","f","j"],
["x","x","y","y"],
["i","eat","leetcode"],
startindex
["hello","i","am","leetcode","hello"],
"ate",
["a","b","leetcode"],
"ate"
words[(i
n],
startindex,
[1,2,3,4,5,6,1],
cardpoints.
cardpoints[i]
cardpoints
cardpoints.length
[9,7,7,9,7,7,9],
[[1,4],[4,5]]
[[1,6],[8,10],[15,18]]
[[1,5]]
[[1,3],[2,6],[8,10],[15,18]]
endi],
[-3].
[-22].
[-1,2,-3,4,-5]
-22
-22.
[-10,-12]
(alice's
(-12)
score).
(-10)
(-22)
[2,-5].
[7,-6,5,10,5,-2,-6]
(-3)
[2,3,4].
divisor1.
divisor2.
divisor1
uniquecnt1
divisor2,
uniquecnt2,
divisor2
uniquecnt1,
divisor1,
uniquecnt2
[1,3,5,7,9,11,13,15],
[2,6].
stick,
scenario:
[5,6,1,4,2]
cut).
[1,3,4,5]
16).
explanation.
cuts.length
cut,
wish.
cut),
cuts[i]
"110".
(i-2)th
(0th)
(i-1)th
[0,1,2,2,4,4,1]
these,
[29,47,21,41,13,37,25,7]
[4,4,4,9,2,4]
becoming
0.71875
0.62500
soup.
soup,
ml
someone,
ml's
0.625.
soup:
loses.
chalkboard,
choices:
wants,
erases
[4,0,3]
success.
[8,5,8].
spells.length
spell.
[3,6,9,12,15].
[1,2,3,4,5].
[16,10,16].
potion
[5,10,15,20,25].
[24,15,24].
potions[j]
spell:
potions,
potion.
potions.length
spells[i]
[8,5,8]
spells[i],
potions[i]
[8,5,8],
[4,8,12,16]
arr[k
arr[j]]
[9,4,2,10,7,8,8,1,9]
[100]
comparison
[arr[i],
maxdoubles
maxdoubles,
gen.next()
xn-2.
relation
gen.next().value;
gen
xn-1
fibgenerator();
[0,1,1,2,3]
outputted
wi]
maxlen.
wi.
maxlen
[[2,3],[3,7],[4,3],[3,7]]
[[5,8],[3,9],[5,12],[16,5]]
[4,6],
[5,3,5,5].
(mod
[1,3,2,5,4],
647427950
uniquely-sized
arrangements.
redirects
[0,1,2,3,4,-1]
b3
[[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
b1
b0
boards
redirect
[[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
[[-1]]
b4
sides.
[1,-1,-1,-1,-1]
[3,1,4,2],
[6,3,5,2],
[6,3]
a[2]
a[0]
a[4]
a[3]
a[1]
[9,6,1,6,2]
blacklist[i]
solution(7,
"pick",
blacklist)
blacklist.length
blacklist.
pick()
ok.
[0,1,4,6]
"pick"]
blacklisted
1/4).
solution.pick();
slant
[1,8,6,2,5,4,8,3,7].
[1,8,6,2,5,4,8,3,7]
height[i]).
container,
[5,8,6],
candies[i].
candies[1]
candies[2]
unused.
1012
[6,5].
[3,6,1,2,5],
[2,2,4,5],
[2,1,4,3,5],
[3,2,4,6]
xor.
[1,2,3,9,2]
cousins,
[1,2,3,null,4,null,5],
nums[n]
peaks.
nums[-1]
peaks,
[1,2,1,3,5,6,4]
-âˆž.
[2,4,1,5,3]
[6,5,4,6]
2,2
"bulky",
"neither"
"both".
"heavy".
"bulky".
"bulky"
"heavy"
700,
"heavy",
800,
categories,
24500000
"neither".
categorized
[lo,
[12,13,14,15].
lo,
(lo
hi)
lo
circles[i].length
circles[i]
min(xi,
[[2,2,2],[3,4,1]]
[[2,2,1]]
circles.
circles.length
circumference
satisify
search_cost
[3,1,2,2,2]
[3,1,5,4,2].
[3,1,4,4,2]
[2,1,1,1,1]
[3,1,1,1,1]
initial.
[1,2,3,2,1]
[3,1,3,3,2]
[3,1,5,4,2]
[3,1,1,2]
[1,2,2,2,1]
5!
logarithmic
n!.
examroom(int
p)
examroom
"leave",
"seat"]
simulates
seat()
"seat",
leave(int
examroom.seat();
["examroom",
examroom(10);
examroom.leave(4);
f(string
[[["apple"]],
pref.length,
searches
suff.length
pref,
"e"]]
wordfilter(string[]
suff
["wordfilter",
wordfilter(["apple"]);
wordfilter
wordfilter.f("a",
suff)
"e");
"f"]
suff.
longer,
"110100010"
grass,
fire,
former
stayed,
grass
field.
[[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
touching).
safehouse
spread
safely
[[0,0,0],[2,2,0],[1,2,0]]
safehouse.
[[0,0,0,0],[0,1,2,0],[0,2,0,0]]
latter
[5,2,-3]
[5,2,-5]
[2,-3,4]
"1201"
stuck.
"0001"
"0009".
"0009"
'4',
wheels.
codes,
'2',
'6',
"0202".
deadends[i].length
"1202"
deadends.length
slots:
"8888"
slot.
around:
'5',
deadends[i]
'7',
["0201","0101","0102","1212","2002"],
"1200"
deadends
["8888"],
"0102".
"0002"
["8887","8889","8878","8898","8788","8988","7888","9888"],
wheels
'0000',
'8',
deadends.
"1000"
"0202"
[1,1000000000]
position[i].
chips,
chip
evil.length
evil,
"ca","cc","cd",...,"cz"
"gz",
"da",
"leetgoes",
"aa","ac","ad",...,"az".
'c':
'd':
evil
"gx",
"da".
"cat"
["hello","world","leetcode"],
["cat","bt","hat","tree"],
"atach"
"hat"
"welldonehoneyr"
[["a","a","a","a"],["a","b","b","a"],["a","b","b","a"],["a","a","a","a"]]
[["a","b","b"],["b","z","b"],["b","b","a"]]
(up,
[["c","c","c","a"],["c","d","c","c"],["c","c","e","c"],["f","c","c","c"]]
anagrams.
same)
"mangaar"
"anagram"
"anagram",
"practice"
evalvars
evalvars.length
multiplied,
"e
5"
"5*c",
"4*a",
"3*b*b",
evalvars[i].length
alternates
evalints
{"e":
"(e
well-formatted
multiplicity.
"b*a*c",
8)",
"-x".
evalints.length
5",
["-1*a","14"]
["e",
pressure",
asterisk
["e"]
digits.)
["1*e*e","-64"]
"2x"
3"
"temperature"],
(e
"a*b*c".
["-2*a*a*a",
(given
["7"].
term.
exist.)
terms)
evalints[i]
[1]),
"-6"].
coefficient,
"3*a*a*b",
"a*a*b*c"
symbols,
breaking
["-1*pressure","5"]
evalvars[i]
"00110110",
heaviest
[2,4,1,1,1]
/b/x
[["a"],["c"],["a","b"],["c","b"],["a","b","x"],["a","b","x","y"],["w"],["w","y"]]
[["a","b"],["c","d"],["c"],["a"]]
level)
"/a/b/x"
bug,
/a/x
/b/z
"/b"
"y".
/b/x/y
[["c"],["c","b"],["a"],["a","b"]]
"/a/x"
/a
[["d"],["d","a"]]
[["a"],["c"],["d"],["a","b"],["c","b"],["d","a"]]
"/w"
marked,
paths[i][j].length
beforehand.
[["c"],["c","d"],["a"],["a","b"]]
subfolders.
/b
"/b/w",
"/c"
marked:
"three"]
underlying
"/one/two/three".
/a/x/y
/a/z
["one",
"/b/x"
sum(paths[i][j].length)
path[i][j]
subfolders)
slowly
return.
[3,6,7,11],
bananas-per-hour
[30,11,23,4,20],
bananas.
bananas,
loves
gone
receptor
receptors
corners,
receptor.
southwest
reflected
eventually.
mirrors
ray
"1342"
"4321",
"36789",
"36789"
ok
[0,1,2,3].
[0,3,2,4]
[[0,3],[5,3],[2,4],[1,3]]
[1,0,2,3]
[5,2,9,8,4],
[9,20,6,4,11,12],
"leetcodee",
"dca".
"ayx"
"adc",
s2="xya"
s1="abe"
s1="abc".
"eab"
"eba"
"interview"
"dac"
"cda",
"bea",
"xya"
s2="acd"
[4,5,6,7,0,1,2],
[4,5,6,7,0,1,2].
prior
schedule.
[6,5,4,3,2,1],
jobdifficulty
dependent
[9,9,9],
jobdifficulty[i]
difficulties
jobdifficulty.length
jobdifficulty[i].
[10,6,5,8]
[1,3,5,3]
circular.
[5,5,5,5]
[1,3,1,3]
[2,5,5,7],
[1,4,1,3],
("time",
doffee".
("toffee",
ideas
"dime
"toffee"
selections:
ideas[i].length
ideab
["lack","back"]
ideas[i]
dime".
ideas.length
"toffee"):
"conuts
"donuts"):
("donuts",
selections
["coffee","donuts","time","toffee"]
ideaa
"tonuts
conuts".
("coffee",
ideas,
"time"):
"coffee"):
ideab,
"doffee
tonuts".
ideab.
space)
3.25.
[[5,2],[5,4],[10,3],[20,1]]
3.25000
prepares
chef.
arrivali+1
arrivali,
till
timei]:
prepare
[[1,2],[2,5],[4,3]]
1998.
"2(4)7+38"
"<num1>+<num2>"
170.
38)
(47
"1(2+3)4"
"999+999"
"2(47+38)"
170
"12+34"
"247+38"
"(999+999)"
<num1>
<num2>
inversions.
inversion
inversion.
[1,0,2]
movies,
movierentingsystem(int
rent(int
movierentingsystem
report()
"rent",
report.
cheapest;
rent,
drop(int
rented,
shopj.
for,
shops
entries)
unrented
searching
movierentingsystem.rent(1,
booking,
[shopj,
report:
copy,
movierentingsystem.rent(0,
shops,
entries[i]
moviei.
moviej]
res[j]
rents
entries.
movierentingsystem(3,
2]].
shopi
movierentingsystem.search(2);
renting
list<list<integer>>
movierentingsystem.search(1);
generating
drop:
movierentingsystem.drop(1,
id)
[shopi,
shops.
rent
shopj
["movierentingsystem",
"report",
rent:
movierentingsystem.report();
"drop",
movie)
moviei
moviei,
moviej
entries.length
cheapest,
search:
[1,9,4,6,7]
exchanges
distinct),
[1,7,4,6,9]
"baa".
"aaabbc"
dislikes[i].length
dislikes
[[1,2],[1,3],[2,4]]
dislike
dislikes.length
dislikes[i]
favoritecompanies.length
favoritecompanies[i]
index=3
[0,1,4]
[0,1,4].
[["leetcode"],["google"],["facebook"],["amazon"]]
companies.
favoritecompanies[3]=["google"]
favoritecompanies[i].length
favoritecompanies
favoritecompanies[2]=["facebook","google"]
favoritecompanies[0]=["leetcode","google","facebook"]
[["leetcode","google","facebook"],["google","microsoft"],["google","facebook"],["google"],["amazon"]]
favoritecompanies[i][j].length
favoritecompanies[0]=["leetcode","google","facebook"],
favorites
favoritecompanies[1]=["google","microsoft"].
[["leetcode","google","facebook"],["leetcode","amazon"],["facebook","google"]]
favoritecompanies[2]=["google","facebook"]
favoritecompanies[j].
"c7"
"a1"
black,
reference.
coordinates[0]
"h3"
coordinates[1]
third",
["we","rock"]
"we",
girl
["girl","student"]
"we
third".
student",
you",
second.length
first.length,
"will"
[10,10,10,10,10],
[1,1,1,3,3].
ceiling
ceil(val)
[1,10,3,3,3],
ceil(nums[i]
[1,4,3,3,3].
minimums
[["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]]
mou,
suggested
[["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
["havana"],
sum(products[i].length)
mo
["mobile","moneypot","monitor"].
mous
["mobile","mouse","moneypot","monitor","mousepad"],
["mouse","mousepad"].
["mobile","moneypot","monitor","mouse","mousepad"].
suggests
typed.
"mouse"
"havana"
products[i].length
searchword.
"name"
"yesyesyesaaa"
knowledge[i]
"hi?"
[keyi,
"bobistwoyearsold"
[["a","b"]]
[["name","bob"],["age","two"]]
valuei
"(age)"
"?"
keyi
valuei]
knowledge
"(a)(a)(a)aaa",
"name",
[["a","yes"]]
"(name)is(age)yearsold",
marks).
"yes".
keyi.length,
evaluated.
valuei.length
"two".
valuei.
"(a)"
"age".
knowledge.
"yes",
keyi,
"bob".
knowledge.length
(without
"?".
"a"s
"hi(name)",
"(name)"
"age"
knowledge[i].length
[4,3,2,2].
[4,3,2,2]
4321.
[1,2,4].
[4,3,2,1]
4322.
124.
[actuali,
[[1,2],[2,4],[4,8]]
minimumi]:
[[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
actuali
[[1,3],[2,4],[10,11],[10,12],[8,9]]
energy,
minimumi
234
4421
[2,2,5,null,null,5,7]
sub-nodes,
sub-node.
min(root.left.val,
sub-nodes.
25].
root.right.val)
blocked.length
[tx,
blocked[i].length
blocked[i]
sy]
ty]
xy-plane,
[999999,999999]
[sx,
inaccessible
segments).
prizes.
prizepositions
prize
prize.
prizes
prizepositions.length
[1,1,2,2,3,3,5],
prizepositions[i]
[[1,2],[1,3],[1,4]]
[[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]
"02:30",
"04:35"
"04:35".
current,
"11:01"
current.
"03:30".
"11:00",
"04:30".
'?'s
"243801",
"93295927".
8+0+3.
8+0+1.
num:
"?3295???"
"932959??".
"5023"
"25??"
"243803",
"9329592?".
2+4+3
"93295???".
puzzles[i]
"abslute"
"able"
[1,1,3,2,4,0]
["apple","pleas","please"],
"beefed"
"access"
"absoryz"
puzzles[i].length
["aboveyz","abrodyz","abslute","absoryz","actresz","gaswxyz"]
"abrodyz"
["aelwxyz","aelpxyz","aelpsxy","saelpxy","xaelpsy"]
"actresz"
"baggage",
[0,1,3,2,0]
(does
(includes
puzzle).
'g'.
puzzles
puzzles[i].
"cabbage",
'a')
"asas"
"aboveyz"
"asas",
["aaaa","asas","able","ability","actt","actor","access"],
"actt",
"faced",
"based"
"gaswxyz"
puzzles.length
[0,1,1,3,3,0]
obstacles[n]
lanes
obstacles[0]
lane.
lane
arrows).
[0,2,1,0,3,0]
(ranging
adjacent)
obstacles[2]
"(()))"
"(())))"
"()))"
'))'.
'))',
matching.
"))())("
"())(())))"
"())"
"(())())))"
")()",
closing
"())",
'))'
growtime,
pots
blooms.
growtime[i]
planttime[i]
seed.
growth,
planttime
growing
grayed
planted.
blooms
growtime.length
each:
seeds
planttime.length
seeds.
grow,
planttime[i],
bloom.
seed
growtime
blooming.
{(0,2)},
{(0,1),(1,3)},
{(0,1)},
n-1)
796297179
{(1,2),(2,3)},
{(0,1),(2,3)},
{(0,2),(2,3)},
{(1,2)}.
{(0,1),(1,2)}.
3796297200.
1-d
796297179.
"aabccc"
"a11"
"aabbaa",
"aaaaaaaaaaa",
"a3bc3d"
"a2"
"aaabcccd",
"a2bc3".
"a3c3"
(length
compress
"abcccd"
"c3".
(repeated
run).
"a4"
compressing
abc3d.
[-2,2],
diff.
[3,-1],
[3,2,5],
[2,2,1],
[17].
[3,2,4,1],
[10].
[3,5,1,2,6],
"abcdefghijklmnopqrstuvwxyz".
"za"
customerid
+----+------------+
server.upload(3);
videos.
"upload"
[[4],
luprefix(4);
luprefix(int
upload(int
yet,
video)
server.longest();
["luprefix",
"longest",
"upload",
upload
longest()
longest.
"longest"]
server.upload(2);
server.upload(1);
uploads
luprefix
quality.
towers,
sqrt(1)⌋
⌊5
sqrt(0)⌋
towers[i].length
⌊4.5⌋
tower,
d)⌋,
[23,11]
qi
⌊val⌋
[[1,2,5],[2,1,7],[3,1,9]],
tower's
⌊7
cy)
⌊9
[[23,11,21]],
[cx,
qi.
towers.
⌊qi
towers.length
(cx,
quality,
⌊7⌋
[[1,2,13],[2,1,7],[0,1,9]],
towers[i]
⌊2.07⌋
qi]
sqrt(2)⌋
radius.
garbled,
towers
cy]
qualities
165
7.5
degrees)
score[i][j]
score[i].length
scored
[[10,6,9,1],[7,5,11,2],[4,8,3,15]],
[[3,4],[5,6]],
[[5,6],[3,4]]
[[7,5,11,2],[10,6,9,1],[4,8,3,15]]
[-1,-1,0,-1]
[0,-1,-1,-1,-1]
bring
perform,
i's.
[0,1,3],
[0,-1,-1,1]
happen.
arr[banned[i]]
[2,4],
num1.length,
"56088"
"456"
num2.length
biginteger
s[s.length
["(1,
comma.)
3)"]
0.5)".
1.23)","(0,
"(00011)"
"0.0",
".1".
"(0123)"
0.011)","(0.001,
"(1,
"(205)".
["(0,
123)","(0.1,
"(13)"
"001",
00,
0.5)"
2.3)","(0.1,
00.01
"(2,
12.3)","(0,
1)"]
(occurring
23)","(0.12,
3)"
2.3)","(1,
0.0,
23)","(1.2,
3)","(12,
"00.01",
"(123)"
been.
"0.00",
extraneous
slice
slices.length
pizzas.
[8,9,8,6,1,1]
slices[i]
combinationiterator("abc",
combinationiterator
itr.next();
combinationiterator(string
characters.length
combinationlength)
itr
arguments.
["combinationiterator",
[["abc",
hasnext.
combinationlength
itr.hasnext();
[9,8,7,6,10,5]
[0,1,2]:
[2,1,3,4]:
(colored
[7,8,6,10],
[[0,1],[1,2],[1,3],[3,4],[3,5]],
"bccabb".
"abaaba".
"baab".
"cabaabac"
"cca".
"aabccabba"
7896
345
[12,345,2,6,7896]
(odd
1771
[555,901,482,1771]
nums[nums[1]],
nums[nums[i]]
nums[nums[4]],
[0,1,2,4,5,3]
[nums[nums[0]],
nums[4]]
[0,2,1,5,3,4]
[nums[0],
memory)?
[4,5,0,1,2,3]
nums[nums[3]],
[5,0,1,2,3,4]
[nums[5],
nums[nums[2]],
nums[nums[5]]]
zero-based
[1,2,5,7].
[1,2,5,7]
[1,2,10,5,7]
[2,3,1,2]
[1,1].
nums.length).
(xi2,
rectangles,
[[0,0,1000000000,1000000000]]
xi1,
xi2
yi1)
yi2)
yi1,
(xi1,
rectanges[i].length
[[0,0,2,2],[1,0,2,3],[1,0,3,1]]
yi2]
yi2
xi1
yi1
[xi1,
rectangle[i]
xi2,
recharged.
drained
running.
batteries.
battery
batteries.length
batteries
computers.
drained,
[3,3,3]
batteries[i]
alicesizes.length,
bobsizes[j]
exchange,
bobsizes.length
alicesizes
alicesizes[i],
bobsizes
exchange.
alicesizes[i]
perm[n
i:
pushing
popback.
q.popfront();
pushmiddle,
choices,
"pushfront",
popfront,
frontmiddlebackqueue
q.pushmiddle(3);
popping
frontmiddleback
pushfront,
q.pushback(2);
["frontmiddlebackqueue",
"pushback",
"popfront",
"popmiddle",
q.popback();
popmiddle()
"popback",
frontmiddleback()
pushback,
"popfront"]
"pushmiddle",
pushmiddle(int
popback()
pushback(int
pushfront(int
frontmost
popmiddle,
q.popmiddle();
frontmiddlebackqueue();
q.pushmiddle(4);
q.pushfront(1);
popfront()
[10,4],
[10,4,-8],
[2,3,1,0]
[10,4,-8,7]
[-8,7],
[4,-8,7],
[21,21]
[21,4,7]
"reset",
"flip"]
solution(3,
solution.flip();
returned,
"flip",
reset.
flip()
resets
flip.
solution.reset();
reset()
"1|(0&(1))"
'&'
expressions.
"(0|(0|0&1))"
1|0&1
"1&(0&1)"
operator),'|'
'1','0','&'
properly
'1','0','&','|','(',
1|1|(0&0)&1
"(1)&()"
expression).
"1&(0|1)"
"1|1|(0&0)&1",
1&1
"(0&0)&(0&0&0)"
1|1|0&1
'&'.
"(0|(1|0&1))"
matched.
"(0|1)|(0&0&0)"
"()1|1"
"(((1))|(0))",
operator),'(',
(i.e:
+4
startvalue.
[-3,2,-3,4,2]
+2
streamchecker.query("i");
streamchecker.query("j");
letter)
["f"],
["g"],
'cd'
["i"],
"axyz"
one)
["d"],
streamchecker(string[]
query(char
streamchecker.query("c");
streamchecker.query("f");
streamchecker.query("l");
["h"],
'z',
streamchecker(["cd",
["k"],
streamchecker.query("d");
streamchecker.query("h");
[[["cd",
streamchecker.query("k");
["streamchecker",
streamchecker.query("b");
streamchecker.query("g");
streamchecker
"kl"]],
streamchecker.query("a");
["l"]]
["j"],
'kl'
["c"],
["a"],
"xyz"]
["b"],
streamchecker.query("e");
'y',
"kl"]);
[xcentre,
positions[i].length
2.82843
minimized:
ycentre]
[[0,1],[1,0],[1,2],[2,1]]
2d-map
[[1,1],[3,3]]
2,3,4
2,2,3
[[],[6],[5],[6],[3,6],[],[],[]]
beforeitems[i].length
[[],[6],[5],[6],[3],[],[4],[]]
beforeitems.length
[-1,-1,1,0,0,1,0,-1],
beforeitems[i]
item).
indexed.
belonging
beforeitems[i][j]
[6,3,4,1,5,2,0,7]
beforeitems
senators,
parties:
senate[i]
"rdd"
victory
victory:
senator's
predict
round-based
senate.length
announce
dire.
dota2,
voting
vote.
ban
radiant
"dire".
senators
belonging.
"radiant"
exercise
parties.
guy
anymore
dire
party.
rights:
"dire"
rights
voting.
senator
"rd"
"a*"
(.)".
(*)
".*"
"zero
(5,4,1),
(rating[i],
(soldiers
rating[j],
rating[i]
soldier
[2,5,3,4,1]
rating[k]).
rating[k])
(rating[i]
rating[j]
rating.length
(5,3,1).
teams).
(2,3,4),
"sandwich"
[["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]],
["bread","sandwich","burger"]
ingredients[i].
"yeast"
ingredients.length
recipes[i].length,
["bread"],
["bread"]
"flour".
[["yeast","flour"]],
recipes.
["bread","sandwich","burger"],
ingredients[i][j],
ingredient
supplies[k]
["bread","sandwich"]
["yeast","flour","meat"]
ingredients[i].length,
combined
recipe
supplies[k].length
"meat"
"bread".
ingredients[i]
"bread"
recipes.length
ingredients[i][j].length,
recipes,
recipes[i],
[["yeast","flour"],["bread","meat"]],
"sandwich".
["yeast","flour","corn"]
supplies.length
["bread","sandwich"],
[4,2,4,3]
sorts
arr[0...k-1]
(k
flips,
sorted,
state:
[3,2,4,1]
k-values
red).
[[0,0,0],[0,1,1],[0,0,1]]
img2
img1[i][j]
[[1,1,0],[0,1,0],[0,1,0]],
borders
translate
(shown
img1[i].length
img2.length
translated
translation
[[1]],
images
[[0]],
img2[i].length
img2,
img2[i][j]
img1
img1.length
images,
votes[i].length
votes[i]
["wxyz","xyzw"]
tied
["zmnaguedsjylbophrqicwfxtvk"]
votes[i][j]
votes.
conflict,
votes[j].length
votes.length.
votes[0]
voter,
team,
position-one
voters.
"xwyz"
["abc","acb","abc","acb","acb"]
tie-breaking
voted
systems.
votes[j]
third.
votes.length
voters
voter
"zmnaguedsjylbophrqicwfxtvk"
un-expired
expiration
t=50,
get(key):
100],
non-expired
t=140,
t=120,
duration):
50],
overwritten
t=150,
t=40,
inaccessible.
constructed.
(1:
count():
key=1
250]
t=100,
cache.
["timelimitedcache",
existed
overwritten.
150]
get(1)
setting
expires.
42)
t=250,
42,
set(key,
elapsed,
[1,1,1,2,2].
nextlargest
[3,1,3].
[1,1,2,2,2].
[5,1,3]
[1,1,2,2,3]
nextlargest.
[1,1,1,1,2].
equal:
"0101"
complement.
https://leetcode.com/problems/number-complement/
476:
"daabcbaabcbc",
"axxxxyyyyb",
"axxyyb".
"axxyyb",
part.length
"axxxyyyb".
"dababc",
"dabaabcbc",
done:
"axyb",
"dab"
removed:
"axyb".
"dab".
"dababc".
"axxxyyyb",
"dabaabcbc".
finite
targetx
targety)
(targetx,
(1,8)
targety
targetx,
(4,7).
(1,4)
(2,7)
points:
ones)
representations:
(two
disobeys
"fobat"
[true,false,true,false,false]
[false,true,false,false,false]
[true,false,true,true,false]
"foobartest"
"foba"
"fb"
"r".
"football"
"ll".
"all".
"uffer".
"rame"
pattern.length,
"est".
"framebuffer"
"ar".
["foobar","foobartest","football","framebuffer","forcefeedback"],
"ot"
"fo"
"oot"
award,
"ppallp"
"ppalll"
targetword
targetword.length
"cdb"
letter's
secondword
"021".
firstword,
firstword.length,
firstword
targetword,
secondword.length,
secondword,
solution([1]);
["solution","pickindex"]
[[[1,3]],[],[],[],[],[]]
25%),
w.length
correct:
sum(w).
solution([1,
[null,1,0,1,0,0]
[null,1,1,1,0,0]
[null,1,1,1,1,1]
[null,1,1,1,0,1]
1/4.
3/4.
......
["solution","pickindex","pickindex","pickindex","pickindex","pickindex"]
75%).
outputs
[null,1,1,1,1,0]
randomization
pickindex(),
[[[1]],[]]
[null,0]
pickindex
3]);
w.
w[i]
0.75
solution.pickindex();
targets[i]
targets[i].length
"eeecd"
sources[i]
targets.length
["ab","ec"],
sources.length
"eeebffff"
indexes[i]
"ec"
["ab","bc"]
["eee","ffff"]
"cd"],
indexing
["eee",
testcase
targets[i].
targets,
"eeecd".
sources,
targets
"ffff"]
"ffff".
sources[i].length,
sources
cannot).
[1,null,3,null,4]
removing,
[1,2,3,2,null,2,4],
center).
[1,2,null,2,null,2],
(target
(picture
[2,7,13,19].
primes
primes,
primes.length
factors,
[1,2,4,7,8,13,14,16,19,26,28,32]
[2,3,5].
[2,7,13,19]
primes[i]
[2,6,14,11,7,3,12,8,4,13,9,10,5,1]
[5,6,3,2,4,1]
south.
"r":
"ggllgg"
direction).
instructions:
cycle:
"gl"
advancing
anti-clockwise.
(-1,
"l":
"g":
"jfk",
tickets.length
"lgb"].
itineraries,
flight.
[["muc","lhr"],["jfk","muc"],["sfo","sjc"],["lhr","sfo"]]
["jfk","muc","lhr","sfo","sjc"]
"lga"]
"jfk".
airline
["jfk",
tickets[i]
fromi.length
["jfk","sfo","atl","jfk","atl","sfo"]
reconstruction
toi.length
[["jfk","sfo"],["jfk","atl"],["sfo","atl"],["atl","jfk"],["atl","sfo"]]
itinerary.
tickets[i].length
["jfk","atl","jfk","sfo","atl","sfo"]
lexical
airports
man
'cc']
'cc'].
'ab',
'ba'].
maximally
"ababccc"
tired",
"problem"
searchword,
am
burger",
"burg"
"you"
index).
"pro"
product_key
2018-01-19
2018-08-02
+---------+------------+----------------+
2018-08-04
2018-05-21
item_id
favorite_brand
orders_in_2019
item_brand
2018-01-01
2019-08-05
+-----------+------------+----------------+
join_date
lg
buyer
2019-08-03
+----------+------------+---------+----------+-----------+
2018-02-09
+---------+------------+
[3,10,4].
[1,2,3,3,5]
[4,3,2,1].
[10,4,2]
[1,2,3,10,4,2,3,5]
lowlimit
highlimit
highlimit,
sequence.length
k-repeating
"ababc".
y2|.
fingers.
|y1
fingers,
finger
|x1
"cake"
x2|
[1,2,null,3],
[5,8,9,2,1,3,7,4,6],
xi)
mi.
[[3,1],[1,3],[5,6]]
mi].
[[12,4],[8,1],[6,3]]
[5,2,4,6,6,3],
mi,
[15,-1,5]
max(nums[j]
mi
"10111"
"11000"
"00000"
h[i])
ladders
[14,3,19,3],
buildings,
(h[i+1]
ladders.
[4,12,2,7,3,18,20,3,19],
i+1
building's
bricks,
[4,2,7,6,9,14,12],
capitlization,
["yellow"],
capitalization:
wordlist[i].length,
wordlist[i]
mistakes:
wordlist.length,
(case-insensitive),
"yellow"
"yllw":
errors:
["kite","kite","kite","hare","hare","hear","hear","keti","keet","keto"]
wordlist,
"yellow":
["yellow"]
individually,
["kite","kite","kite","hare","hare","","","kite","","kite"]
operates
(case-sensitive),
["kite","kite","hare","hare"],
"yollow":
errors,
"yeellow":
spelling
match)
ignored).
"aaabbc".
"aaabcc".
"aaabbbcc"
"eabaab".
'c's
"ceabaacb"
[1,0,3],
(nums1[0]
[5,3,4]
(nums1[n
(nums1[1]
nums2[0])
nums2[n
nums2[1])
[1,0,2,3,0,4,5,0]
written.
[1,0,0,2,3,0,0,4]
fixed-length
[4,-1,2,1]
approach,
conquer
figured
coding
[5,4,-1,7,8]
[-2,1,-3,4,-1,2,1,-5,4]
subtle.
nums[0..i]
booleans
most-significant-bit
[false,false,false]
011;
x0
[true,false,false]
least-significant-bit).
one-bit
bits.length
11).
bits[i]
two-bit
[0,0,1,1,0,0,0,0]
cells.length
[0,0,1,1,1,1,1,0]
cells[i]
[1,0,0,1,0,0,1,0],
vacant,
vacant
vacant.
[0,1,0,1,1,0,0,1],
summarizes
actor_id
actordirector
+-------------+-------------+-------------+
director_id
director_id)
(actor_id,
actor
director
provides
ding"
contest"
tsetnoc"
"let's
gnid"
edocteel
ekat
preserving
"dog
"s'tel
"god
[5,2,3,4,1]
[1,2,5,4,3]
682289015
(recall
(1-indexed.)
it.)
[10,-5,-2,4,0,3],
[1,-5,-20,4,-1,3,-6,-3],
[1,-1,-2,4,-7,3],
[10,4,3]
[1,-1,4,3]
k)]
("aac",
("a",
"acaba")
(good
("aacab",
"ba")
"aacaba"
("aaca",
"aba")
("aa",
"a")
split).
"caba")
"cd").
sleft
sright
["(())()","()()()"]
"(a)())()"
"()())()"
["(a())()","(a)()()"]
0.33
$1000,
["alice,20,800,mtv","alice,50,1200,mtv"]
{amount}
["alice,50,1200,mtv"]
["alice,20,800,mtv","bob,50,1200,mtv"]
or;
2000.
minutes),
{city}
{name}
["alice,20,800,mtv","alice,50,100,beijing"]
"{name},{time},{amount},{city}"
["bob,50,1200,mtv"]
{time}
nums[l].
l)
nums[k],
quadruplet
quadruplets.
[1,3,2,4,5]
quadruplets,
"leetcodocteel".
"mdbabdm".
"mbadm"
"mbdadbm"
insertions.
"zzazz"
'a's,
(palindrome).
[2,3,1].
[2,1,1],
[2,1,3,1],
[2,3,1,3,1,null,1]
[2,1,1,1,3,null,null,null,null,null,1]
(palindrome)
water.length
barriers
hydrogen
water[i]
"ohhhoh",
explicitly;
thread.
barrier
hydrogen.
molecule
"ohhohh"
barrier.
sets;
"ohhhho",
examine
"hho"
molecules
"hoh"
bond
"hhohoh",
enforces
synchronization
releasehydrogen
"hohhoh",
"hohhho",
oxygen
"oohhhh"
"hohohh"
"ohh"
molecules.
"hhoohh",
releaseoxygen
with.
"hhohho"
bind
prerequisites,
prerequisites.length
numcourses
[false,false]
[[1,0],[1,2]]
[[1,2],[1,0],[2,0]],
prerequisites[i].length
prerequisites[i]
[true,true]
vj].
indirect.
(numcourses
(r
points[r][c]
points[r].length
abs(c1
[[1,5],[2,3],[4,2]]
[[1,2,3],[1,5,1],[3,1,1]]
smallest,
[1,2,3,6],
"rl",
"lr",
"llllrrrr"
"rlrrllrlrl"
"llllrrrr".
"rrll",
"rlrrrllrll"
"rrrllrll",
"rr",
l1
[8,9,9,9,0,0,0,1]
[7,0,8]
[9,9,9,9,9,9,9],
465
342
[9,9,9,9]
l2
whitespaces
[1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
[1000]
k]
"1317",
"1000",
billion
elapsed.
3x
(-1).
3x.
[7]).
numbers).
[3,3,6,8],
(63
([6,7],
[3,3,6]
61).
61
[2,3,3,4,6,7],
(nums
[3,5,6,7],
0110.
"0a1b2c",
"0a1b2c".
"0a1b2c"
(alphanumeric
"1229857369"
"a0b1c2",
"0c2a1b"
"a0b1c2"
reformatted
[0,1,1,1]
arr[0].length
arr[i][j]
[0,1,1,1],
[2,1,3,5,6,4,7]
[1,3,5,2,4]
[2,3,6,7,1,5,4]
"aabc"
[-1,0,0,0],
"abacbe"
[-1,0,0,1,1,2],
forget
person)
afterwards.
discovering
discovers
delay,
forget,
secret.
people)
forgets
he/she
(0-based)
[4,2,3]
"03:00"
logintime,
"10:14"
10:00.
10:14
10:00
03:00.
began.
clock.
09:31
"09:31",
logouttime.
logintime
09:30
09:45
01:30.
midnight
00:45,
23:45.
logouttime
ended.
21:30
logout
00:15,
"21:30",
10:15
starts.
"leotcede"
"holle"
["a",""]
["a","a"]
["bat","tab","cat"]
words.length,
[[0,1],[1,0],[3,2],[2,4]]
["abcddcba","dcbaabcd","slls","llssssll"]
["abcd","dcba","lls","s","sssll"]
["battab","tabbat"]
strings)
majoritychecker([1,
["majoritychecker",
efficiently
majoritychecker.query(2,
majoritychecker.query(0,
arr)
threshold)
majoritychecker
1]);
query(int
majoritychecker(int[]
(5,3,null,9).
[1,3,2,5]
levels.
(3,2).
[1,3,2,5,null,null,9,6,null,7]
(6,null,null,null,null,null,7).
end-nodes
nodes),
[[5,7,0],[0,3,1],[0,5,0]]
[[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
non-zero.
(diagonals)
x-matrix.
2017-01-09
2017-01-04
2017-01-03
2017-01-05
visit_date,
+------+------------+-----------+
2017-01-07
visit_date
increases,
2017-01-02
145
attended.
2017-01-01
1455
2017-01-06
id's,
[2,6,10,4,8,12],
[220]
[2,6,10]
[5,435]
[4,8,12].
higher,
[2,10,6,4,8,12]
higher[i]
[435].
belonged
remembers
possibility
215.
combining
lower[i]
[8,10,12].
[1,1,3,3],
[5,7,9]
array.filter
30]
[0,10,20,30],
[20,30]
filter(arr,
filtering
falsey
[-2,-1,0,1,2],
greaterthan10(n)
fn);
[-2,0,1,2]
firstindex(n,
truthy
filtered
[4,2,8],
[1,4,2,6,8],
2500].
[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
downwards.
[1,4,2,6],
obstaclegrid
obstaclegrid[i].length
obstacle.
obstaclegrid.length
obstaclegrid[i][j]
[[0,1],[0,0]]
_.groupby
selector
"id"
fn(arr[i])
(item)
[{"id":
string(n
"2"}]
9]]
{"id":"2"}
"1"},
],
{"id":
"1"}],
string(list[0]);
{"id":"1"},
"true":
"2":
array.groupby(fn).
acceptable.
array.groupby(fn)
item.id;
array.length
"false":
there're
arrow
1][j])
[[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
signs
[[1,1,3],[3,2,2],[1,1,4]]
[[1,2],[4,3]]
pointing
2020-02-12
2020-01-01
2020-01-12
monica
2020-02-22
avengers
movie_id
review
"frozen
frozen
rated
joker
("avengers",
3.5
(movie_id,
movierating
created_at
2"
review.
"joker")
user's
2:00.
[starttime2,
events).
evnet1.length
endtime1]
event1[i].length
event2,
hh:mm
endtime2
["14:00","15:00"]
["01:00","02:00"],
event2.length
[starttime1,
endtime2].
01:20
["01:15","02:00"],
endtime1
event2[i].length
event1
02:00.
["02:00","03:00"]
["01:20","03:00"]
event2
starttime1
starttime2
["10:00","11:00"],
[1,2,3,3,4,4,5,6],
[9,10,11].
[3,2,1,2,3,4,3,4,5,9,10,11],
846:
[3,4,5,6].
https://leetcode.com/problems/hand-of-straights/
dist(0,4)
dist(0,2)
dist(0,1)
[8,12,6,10,10,10]
dist(0,3)
[[0,1],[0,2],[2,3],[2,4],[2,5]]
dist(0,5)
neccesarilly
56803
difference)
[4,9,3],
[60864,25176,27249,21296,20204],
11361
((2
poor_query_percentage.
shirazi
0.66
golden
sphynx
query_percentage
poor_
query_name
poor_query_percentage
7))
database.
+------------+---------+-----------------------+
shepherd
retriever
+------------+-------------------+----------+--------+
siamese
query_name,
german
poor
mule
subsequence's
"bbbab"
"bbbb".
chalk,
chalk.length
restart
[5,1,5],
solve,
chalk[i],
chalk.
[3,4,1,2],
chalk[i]
nums[i][i]
diagonals,
[[1,2,3],[5,17,7],[9,11,10]]
4*106
numsi.length
nums[i][nums.length
[[1,2,3],[5,6,7],[9,10,11]]
[1,5,9]
prime,
memoize(sum);
[[2,2],[2,2],[],[1,2],[]]
fib
1));
memoizedsum
"sum"
["call","call","call","getcallcount","call","getcallcount"]
"fib"
[4,4,1,3,2]
memofactorial(3);
["call","call","getcallcount","call","getcallcount"]
["call","getcallcount"]
memoize(factorial);
"factorial"
fib,
fib(n
memofactorial(2);
[2,6,2,2,6,2]
factorial(n
[[2],[3],[2],[],[3],[]]
factorial.
fib(5)
memofactorial
memoizedsum(2,
[[5],[]]
sum()
memoizedsum(1,
presence
[[0,1],[1,2],[2,3],[3,4],[4,5]]
[[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]
[1,0,0,0,0,1],
[0,0,0,1,1,0,0,1],
[1,2,3,4,5,6,7,8,9,10,11],
if)
node.)
algorithm?
sorted?
nums2's
size?
nums1's
better?
green:
red:
[228,216,211]
middle)
[[7,7,7]]
[20,9,8]
[[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
228
(area
depicted
211
blue:
corner)
[1,4,0,2,3],
[one
[1,3,0,2,4]
point],
point].
nums[k
[2,3,1,4,0]
[2,4,1,3,0],
[3,1,4,0,2],
[2,3,1,4,0],
[1,3,0,2,4].
afterward,
points],
[0,2,3,1,4],
[no
nums[k-1]].
[4,0,2,3,1],
types[i].length
counti
questions,
[[50,1],[50,2],[50,5]]
[counti,
marksi]
indistinguishable.
types[i]
marksi
types.length
counti,
[[6,1],[3,2],[2,3]]
[[1,1,2],
[2,1,1]]
"bac".
"aaabc".
string..
"aacab".
"aaabc"
"baaca",
removed)
found)
hashset,
myhashset.contains(2);
myhashset.add(1);
myhashset.contains(1);
myhashset.add(2);
myhashset.remove(2);
"contains"]
myhashset.contains(3);
["myhashset",
add(key)
"contains",
contains(key)
myhashset();
(already
myhashset
hashset.
[3,7,1,6]
must:
[4,6,2,5].
[5,5,2,5].
comprising
[4,6,1,6].
[10,1]
"azxxzy"
"abbaca"
"ca".
"aaca",
"ay"
["/a","/c/d","/c/f"]
folder.length
["/a/b/c","/a/b/ca","/a/b/d"]
"/c/d/e"
["/a","/a/b","/c/d","/c/d/e","/c/f"]
sub-folder
"/leetcode"
folder[i]
filesystem.
["/a"]
"/a".
folder[j],
"/a/b/d"
"/leetcode/problems"
"/c/d"
folder[i].length
"/a/b"
"/a/b/c"
["/a","/a/b/c","/a/b/d"]
[5,1,8],
mechanic.
[4,2,3,1],
repaired
repaired.
ranksi
garage
mechanics
cars.
mechanics.
mechanic
bottle
bottle.
numexchange
drink:
numbottles
drink.
drinking
numexchange,
mst
mst.
observe
graph's
weighti
msts,
[[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
pseudo-critical.
msts
[[0,1],[2,3,4,5]]
(mst).
(mst)
[[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
weight.
[[],[0,1,2,3]]
msts:
leftchild[i],
[2,3,-1,-1]
leftchild
rightchild[i]
leftchild[i]
rightchild[i],
rightchild
leftchild.length
[2,-1,-1,-1]
rightchild.length
[1,-1,3,-1],
39916800.
"399168e2"
"7219856259e3"
"e0".
<suf>
375
7219856259000.
12345...54321,
<pre>
abbreviation
"12345...89876e5".
"<pre>...<suf>ec".
399168.
"24e0".
"24e0"
"399168e2".
1234567.
abbreviate
1234567
1234567654321
<pre>...<suf>
371,
12345678987600000
"e2".
word[j,n-1].
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]
lcp.
letter;
lcp.length
lcp,
[[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]
"aaca"
lcp[i][j]
lcp[i].length
[[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]
lcp[3][3]
"abab".
word[3,...,3]
"aaaa".
word[i,n-1]
"aabd"
nums[b],
nums[a]
[nums[a],
nums[d]
[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
nums[d]]
nums[c]
nums[b]
[1,0,-1,0,-2,2],
[[2,2,2,2]]
nums[c],
[[5,10],[6,8],[1,5],[2,3],[1,10]]
[[1,3],[5,6],[8,10],[11,13]]
[2,2,3,3],
waters
capacitya,
max(plants[i])
refill
refills
capacityb
(instantaneously)
plants[i]
needs,
cans
capacities
needs.
can,
plants.length
plants,
capacitya
his/her
alice/bob
plant,
cans.
"cdd",
"badd",
phone.
"222222222222222222222222222222222222"
"aaae",
'k',
texting
"abdd",
"2266622".
transmission,
"aaadd",
"ce".
pressedkeys
pressedkeys.length
82876089.
"22233"
82876089
messages,
2082876103
sent.
idi+1
[[0,10],[1,20]]
[[0,3],[2,5],[0,9],[1,15]]
[[1,1],[3,7],[2,12],[7,17]]
leavetimei]
leavetimei
expressible
nums[index1]
nums[indexk]
expressible,
expressible.
nums[index2]
indexk
comment,
"/*/"
["/*test
c++,
visualized
delimited
main()",
"*/"
"line",
quote,
"{
comments.
c;",
6-9.
deleted,
yet
program,
"a/*comment\nline\nmore_comment*/b",
*/",
"/*
/*test
/*
["int
main()
c;","}"]
right.)
c;","a
*/";"
newline
"/*"
eventually
*/
"int
"string
macros
comment.
test",
["a/*comment",
main()","{
["ab"]
details.
"}"]
multiline
comment
control
"//"
","int
single-quote
comments,
["ab"].
'\n'.
declaration
"more_comment*/b"]
(non-overlapping)
source[i].length
double-quote
pair:
[0,1,7,4,4,5],
(1,5).
[1,7,9,2,5],
(1,4),
(0,5),
operations[i][0],
[[1,3],[2,1],[3,2]]
[3,2,7,6].
[1,2,4,6],
operations[i].length
[[1,3],[4,7],[6,1]]
operations[i][1].
operations[i][0]
operations[i][1]
[3,2,7,1].
[3,1].
[3,2,7,1]
[3,2,4,6].
routes[0]
sum(routes[i].length)
routes.length
routes[i].length
routes[i]
source,
[[1,2,7],[3,6,7]],
initially),
routes[i][j]
[[7,12],[4,5,15],[6],[15,19],[9,12,13]],
'bbb'
'aaa'
maximal.
[989,null,10250,98693,-89388,null,null,null,-32127]
[1,7,0,7,-8,null,null]
["sweet","sour"]
sweet",
apple",
"apple
["banana"]
sour"
no-adjacent-flowers
[1,0,0,0,1],
flowerbed.
flowerbed.length
flowerbed
planted,
flowerbed[i]
plots.
[-7,
((n
arr[m]
17,â€‰3],
stronger
[6,7,11,7,6,8],
m|,
[11,8,6,6,7]
22]
[5,5,1,1,3].
[11,8,6,6,7,7].
[5,1,4,2,3].
[1,1,3,5,5],
[7,7].
[7,1,3,9]
[1,0,9,2,1].
[13,25,83,77]
10921,
[1,3,2,5,8,3,7,7].
77
separations
[1,3,2,5,8,3,7,7]
[7,1,3,9].
[8,3].
"1000/((100/10)/2)"
bold
priority.
1000/(100/10/2)
2.667
1000/100/(10/2)
[1000,100,10,2]
1000/(100/10)/2
1000/100/10/2
"1000/(100/10/2)".
"1000/(100/10/2)"
(2/(3/4))
8/3
"2/3/4".
priority
1000/((100/10)/2)
influence
1000/(100/(10/2))
"2/(3/4)"
[[9,9,4],[6,6,8],[2,1,1]]
wrap-around
[[3,4,5],[3,2,6],[2,2,1]]
[3,1,-2,-5,2,-4]
[-1,1]
[-2,-5,-4].
[1,-1].
[3,1,2,-2,-5,-4],
[3,-2,1,-5,2,-4].
|nums[i]|
signs.
[-2,3,-5,1,-4,2]
[3,-2,1,-5,2,-4]
[1,-2,2,-5,3,-4],
[1,-1]
"0111001"
inverts
sn.
"0111001".
reverse(x)
invert(x)
"011100110110001".
reverse(invert(si
11th
"011100110110001"
cost("85")
2*3+
3*1
"977",
cost("7772")
[7,6,5,5,5,6,8,7,8],
"85"
"7772"
cost[i],
[4,3,2,5,6,7,2,5,5],
[2,4,6,2,4,6,4,4,4],
[3,11,14]
fibonacci-like:
[1,11,12],
[7,11,18].
[1,3,7,11,12,14,18]
[1,2,3,5,8].
xi+2
[1,2,3,3]
[2,1,2,5,3,2]
[5,1,5,2,5,3,5,4]
odd;
even;
"magic
[[4,3,8,4],[9,5,1,9],[2,7,6,2]]
not:
subgrids
square:
square"
[[8]]
contiguous).
[[12,21,16],[27,45,33],[24,39,28]]
[[45,45,45],[45,45,45],[45,45,45]]
answer[i][j]
mat[r][c]
for:
["aaa","aaa","aa"]
["aba","cdc","eae"]
representation,
[0,1,2,3,4,5,6,7,8]
[1,2,4,8,16,32,64,128,256,512,1024]
[1024,512,256,128,64,32,16,8,4,2,1]
[0,1,2,4,8,3,5,6,7]
[1,2,4,8]
[[1,2],[7,8],[4,5]]
fashion.
[7,8].
subsequences:
[1,2,3,3,4,4,5,5]
[1,2,3,4,4,5]
[1,2,3,3,4,5]
integer).
ther
[6,7]
[7,1,4,6,null,5,3,null,null,null,null,null,2],
[[1,2,3],[4,5,0]].
[[1,2,0],[4,5,3]]
[[1,2,3],[4,5,0]]
solved
solves
[[0,1,2],[4,5,3]]
[[4,1,2],[5,0,3]]
[[1,0,2],[4,5,3]]
[[4,1,2],[0,5,3]]
solved.
[[1,2,3],[5,4,0]]
[[1,2,3],[4,0,5]]
"pop":
["push","push"]
["push","push","push"]
["push","push","pop","push"]
top)
"push":
(integer
[2,5,3,9,5,3]
|19
|27
|24
division)
|(2
decreasing.
[6,5,4,4]
monotonic,
[1,4,8,10,20],
|4-3|
|12-14|
|3-1|
|18-14|
|20-20|
|9-8|
[2,3,5,12,18],
mailbox.
ids:
9.1
science
rating.
8.6
8.9
fiction
description
"boring".
fantacy
+----+------------+-------------+--------+
genre,
war
interesting
8.5
irish
6.2
prefixes:
"cab"],
prefix:
answer[3]
["abc","ab","bc","b"]
[4,3,2,3,5,2,1],
(5),
decimal.
"000001"
decimal,
"00100"
"1001010",
"00101"
"00010",
"00101001",
[1,3,5,7,8,10].
rung
dist.
[1,3,4,6,7].
climbed
[1,3,5,10],
rung)
ground.
[3,6,8,10],
[3,4,6,7],
rung.
rungs.length
rungs.
rungs[i]
[4,2,1,3,7].
[[5,3],[4,7],[2,3]]
[4,5,3]
bi].
(obstacle).
(4,2).
eliminating
[[0,1,1],[1,1,1],[1,0,0]],
(3,2)
[[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]],
'n',
path[i]
"nes"
'w'.
"nesww"
[3,4,3,4].
[1,2,1].
[1,2,1,3,3].
[3,3,3,4,4].the
subarray:
trimmed([1,2,3,3,3,4,4])
trimmed(subarray).length.
[1,2,1,3,3]
trimmed(subarray)
[1,2,1,2,1,3,3],
[1,2,3,3,3,4,4],
[1,2,1,2,1],
[1,2,1,2,1].
trimmed([3,1,2,4,3,4])
[1,2,1,2,1]
matrix[i][j],
o(log(m
[[1,3,5,7],[10,11,16,20],[23,30,34,60]],
n))
[11].
[2,1,3,4,5]
nums[starti
[19,18,10].
[6,5,4,3,2,1]
[[0,2],[1,3],[1,1]]
[3,5,4,2,1]
nums[starti]
nums[endi].
[1,2,3,4,5,10],
requests[1]
[[1,3],[0,1]]
requests[0]
nums[endi
[4,10,5,3,2,1]
subroot,
[3,4,5,1,2],
subroot.val
subroot
[3,4,5,1,2,null,null,null,null,0],
[4,2,0,7,4]
[6,2,7,3],
[1,0,2,1],
["a","b","c","ab","bc","abc"],
["a","a"],
watchedvideos[i]
friends[i][j]
watchedvideos
watchedvideos[i][j].length
(yellow
(increasing).
figure)
figure):
greatest.
friends.length
friends[i]
general,
["c"]
friends[i].length
watchedvideos[i].length
figure).
friends[j]
["d"]
[["a","b"],["c"],["b","c"],["d"]],
["b","c"]
[[1,2],[0,3],[0,3],[1,2]],
watchedvideos.length
(green
lead_id
+-----------+-----------+--------------+-----------------+
2020-12-7,
2020-12-8,
partner_id's.
honda
partner_id
make_name,
lead_id's
2020-12-7
2020-12-8
date_id
unique_leads
make_name
+-----------+-----------+---------+------------+
partner
dailysales
unique_partners
toyota
ron
anne
+-----+-------+------------+-----------+
department,
reports.
+---------------------+
secondhighestsalary
grandchildren.
trees[j].
j=1
bst,
trees[0]
bsts.
[[5,3,8,2,6]].
property:
trees[0].
trees[1]
[[5,3,8],[3,2,6]]
[[3,2,5,1],[5,4]].
[3,2,5,1,null,4]
trees[0],
[[5,4],[3]]
trees[1],
performed,
[[2,1],[3,2,5],[5,4]]
trees[1].
trees[j]
[[3,2,5,1,null,4]].
salary:
[$20000,
12747
+------------+--------+
"average
$50000].
108939
categories.
91796
"low
$20000.
account_id
salary":
accounts_count
category.
$50000.
+----------------+----------------+
87709
category,
[2,4,8],
[3,4,8],
[[7]]
[1,6,8],
[2,6,8],
[2,4,9],
[1,6,7],
[3,4,9],
[1,5,9],
[2,6,7],
[3,5,7],
[1,5,7],
[2,1]:
perm[2]
perm[i].
construct.
perm[1]
afterwards,
consequently,
[3,4,2]
[2,2,3,3,3,4]
4's
"ababcbacadefegde",
"eccbbbbdec"
incorrect,
"ababcbaca",
"hijhklij"
"hijhklij".
"ababcbacadefegdehijhklij"
"defegde",
[9,7,8]
getnthhighestsalary(2)
+------------------------+
(3+3)
(5+6+4)
(2+3+2)
[2,3,3,1,2]
(3+2+5)
[3,1,5,6,4,2]
subtotal
discount,
product.length
cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
paying,
getbill(int[]
prices)
product[j]
500.0.
["cashier","getbill","getbill","getbill","getbill","getbill","getbill","getbill"]
groceries
cashier.getbill([3,7],[10,10]);
2500.0.
subtotal.
4000.
cashier.getbill([1,2],[1,2]);
getbill.
products,
discount)
cashier.getbill([4],[10]);
amount[j]
cashier.getbill([7,3],[10,10]);
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
any).
supermarket
percent
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
cashier.getbill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);
800.0.
product[j],
frequented
cashier.getbill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]);
7350.0.
7350.
product).
14700,
100).
4000.0.
1600
cashier
800.
paying
bill,
14700
cashier.getbill([2,3,5],[5,3,2]);
cashier(int
mylinkedlist()
deleteatindex(int
"addatindex",
mylinkedlist.addathead(1);
addatindex(int
mylinkedlist.deleteatindex(1);
addattail(int
mylinkedlist();
linkedlist
inserted.
library.
addathead,
"addathead",
mylinkedlist.addattail(3);
addattail,
mylinkedlist.addatindex(1,
mylinkedlist.get(1);
["mylinkedlist",
"addattail",
doubly
1->2->3
pointer/reference
addatindex
"deleteatindex",
addathead(int
deleteatindex.
mylinkedlist
prev
1->3
indexth
["eat","tea","tan","ate","nat","bat"]
phrase,
[["bat"],["nat","tan"],["ate","eat","tea"]]
[["a"]]
typically
[[""]]
"goal".
"al".
"goal"
"g()(al)"
parser's
"gooooal"
"algaloog"
command
(al)
"(al)"
command.length
"g"
interpret
al
"(al)g(al)()()g"
"g()()()()(al)"
interprets
"x=0"
"x=#value".
coefficient.
"2x=x"
solutions"
"infinite
equation.length
"x=x"
"x=2"
"no
equation.
"x+5-3+x=6+x-2"
c2i,
'd')
min(n2,
uncovered,
artifacts.length,
(r2i,
dig[i]
extract.
namely
[[0,0],[0,1],[1,1]]
[[0,0,0,0],[0,1,1,1]],
r1i,
c1i,
r2i,
excavate
c2i)
(ri,
c1i)
mud
uncovered.
excavated
artifact.
artifacts[i]
c2i
ci),
dig[i].length
artifacts.
(r1i,
uncovered
c2i]
artifact
r1i
artifacts[i].length
buried
c1i
dig
dig.length
ri,
r2i
extracted,
underneath,
[r1i,
numerator,
enclose
fraction,
"0.(012)"
"0.5"
repeating,
["####f","#c...","m...."],
mouse),
["m.c...f"],
mouse,
(left,
catjump,
catjump
cat.
food.
mousejump,
(cat,
mousejump
'c'(cat),'m'(mouse).
(xxx)
(123)
987-123-4567
456-7890
digit)
xxx-xxxx
456
7890
xxx-xxx-xxxx.
line),
one-liner
[1,null,2,3]
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
other:
[[0,2],[0,5],[2,4],[1,6],[5,4]]
+---------------+-------------------+
9000$.
-23000
corona
masks
1010$.
capital_gain_loss
'buy')
9500
10$
stock_name
7000$.
1000)
8000$.
operation_day)
'sell')
(500
'sell'
9500$.
(1010
stock.
'buy'
handbags
500$.
operation_day
30000$
gains/losses
30000
-23000$.
('sell',
10000$.
1000$
stocks
('buy'
(stock_name,
+---------------+-----------+---------------+--------+
loosely
draws
maxpts
probabilities.
outcomes
maxpts],
0.73278
"21".
[1,0,2,1,3]
max(bik)
[3,3,2,2,1]
nums[i...j].
[1,0,2].
[0,2,1].
[3,3,2,2,1].
sized
or.
bij
[4,7,8,15,3,5]
coprime.
coprime,
val2)
[4,7,15,8,3,5]
gcd(val1,
validly
[3,1,3,4,3],
[1,2,3,4]:
3's,
[3,1,3,4,3]:
transactions:
3-0
4-2
[3,2,6,5,0,3]
[2,4,1]
6-2
"b0b6g0r6r0r6g9"
('r',
'9').
color-position
"b0r0g0r9r0b0g0"
"g4"
rings:
rings,
rings[i]
rings.length
'b').
rods.
"r3g2b1"
caught.
caught,
function*
"success";
settimeout(cancel,
hasn't
cancelled.
function*()
result;
200));
cancellable(generator);
res("hello"));
msg
caught
t=150ms,
promise.then(console.log);
responsibility
{"rejected":
resolving
t=100ms,
tasks()
reject)
hello"}
promise]
[cancel,
cancellable(tasks());
2));
object).
`error:
4}
reject("promise
"error:
completes.
usual.
t=0ms
resolve(2));
{"resolved":
settimeout(resolve,
rejects.
resolve(2
cancel
promise.
catch(e)
promise(resolve
rejected"));
rejects,
200ms,
generatorfunction
promise.catch(console.log);
res(1));
cancelling
promises.
promise((resolve,
cancelledat
"cancelled"
generatorfunction();
cancel()
yielded.
${msg}`;
uncaught,
yielded
42}
generator.
"cancelled"}
substitution
message.length
suepuv"
dog".
vcnjrdb"
boy"
dog",
secret"
"eljuxhpwnyrdgtqkviszcfmabo",
"happy
(actual
('h'
quickly"
cipher
mnoeius
alphabet),
boxing
ycgk
bs
lqantp
themselves.
hnfx
"eljuxhpwnyrdgtqkviszcfmabo".
"zwx
"vkbs
substituted
[6,2,4,5,1,3].
batchsize
groups[i]
served
batches
bakes
groups.length
donut.
donut
[1,3,2,5,2,2,1,6]
batchsize.
donuts.
batch.
1):
[9,8,4,2,1],
[1,4,2,7],
"abbcccddddeeeeedcba"
"eeeee"
970
+-------------+----------------+
visit_id
+----------------+----------+--------+
mall
visit_id.
count_no_trans
mall.
transaction_id
+----------+-------------+
910
310
see,
[0,0,0,0,0,1,1,1].
comprises
sum(nums)
[1,0,0,0,0,0,1,1],
[1,1,0,1],
releasetimes
releasetimes.length
tested,
keyspressed[i]
keypresses.
49).
[9,29,49,50],
29).
releasetimes[i+1]
50).
keypad
designed
releasetimes[0].
keyspressed.length
keyspressed
tester
[12,23,36,46,62],
"spuda"
releasetimes[i
keypress
releasetimes,
released.
duration.
release
(pressed
keypresses
keypresses,
released
"cbcd"
test,
releasetimes[i]
myself
i4",
a3
a3"
"myself2
"this1
"me
and3
"sentence4
is2
sentence4",
myself2
and3"
i"
i4
this1"
appending
a3".
"me1
sentence4
"is2
me1
this1
[1,4,3,2,5,2],
[1,2,2,4,3,5]
preserve
movements.
monkey
happens.
collision.
monkey.
direction;
obj.addelement(10);
calculatemkaverage()
[3,1,10,5,5,5]
mkaverage(3,
[3,1,10]
mkaverage(int
["mkaverage",
addelement(int
calculatemkaverage.
obj.calculatemkaverage();
"calculatemkaverage"]
mkaverage
"addelement",
k*2
addelement
obj.addelement(5);
obj.addelement(1);
obj.addelement(3);
5/1
[3,1,10].
[3,1,10,5,5]
"calculatemkaverage",
[3,1,10,5]
"textbook"
alike.
"bo"
"ok".
"book".
"book"
"text"
'u').
plots,
plot,
plot
arrangements:
result[2]
|5-2|
sum(|nums[i]-nums[j]|)
|2-5|
[24,15,13,15,21]
|3-2|
[1,4,6,8,10]
2d-array.
[[1,2],[2,3],[3,4],[4,1],[1,5]]
2d-array
num[1]
'3'.
"1210"
"030"
num[2]
violate
num[0]
"1210",
+----+----+----+----------+
z)
+----+----+----+
yes
[1,1,2,3,3]
"-2"
15].
["1","c"]
104,
-4].
-2].
invalidate
record.
"+"
"9"
operations[i]
["5","2","c","d","+"]
"+",
[-3
["5","-2","4","c","d","9","+","+"]
"sadbutsad",
haystack,
haystack.
"leeto"
haystack
haystack.length,
needle
needle.length
[4,16,2]
[2,4,16].
[4,3,6,16,8,2]
[4,16,2].
streak.
[2,3,5,6,7]
max(|nums[1]
[10,1,2,7,1,3],
nums[j]|,
[4,2,1,2],
nums[4]|,
attain.
|nums[2]
(nums.length)/2
nums[5]|)
max(0,
t_4
tn+3
tn+1
tn+2
t0
tn
1389537
2^31
tn.
t_3
-321
(signed
-123
unsigned).
examples).
farthest
[0,3,2,3]
maximumbit.
nums[nums.length-1]
[0,1,2,2,5,7],
2maximumbit
maximumbit
[2,3,4,7],
[0,1,1],
[0,1,1,3],
[4,3,6,4,6,7]
[5,2,6,5]
(3,1,3)
[3,1,4,3,null,1,5]
10^4].
(3,4)
[-10^4,
[3,3,null,4,2]
10^5].
[[3,12],[-2,5],[-4,1]]
2d-plane,
[[0,0],[2,2],[3,10],[5,2],[7,0]]
|yi
yj|,
[[1,3,4,2],[1,3],[1]]
1,3
[[4,3,2,1]]
[1,3,4,1,2,3,1]
1,3,4,2
le
"42352338"
"777"
"2300019"
largest,
"777".
"6777133339"
"333".
[15,88],
[[16,18,49]]
[[88],[15]]
[91,4,64,78],
[78]
[49,18,16],
pieces.length
[88]
[[78],[4,64],[91]]
sum(pieces[i].length)
pieces[i][j]
[4,64]
pieces[i].length
[91]
pieces[i].
pieces[0].
lastdayi.
most:
[[3,2],[4,3]]
lastdayi
1101st
1300th
3300th
ready
courses.length
[[100,200],[200,1300],[1000,1250],[2000,3200]]
courses[i]
1100th
courses,
101st
[durationi,
durationi,
take.
lastdayi]
[[0,0,0],[0,1,0],[1,2,1]]
[[0,0,0],[0,1,0],[1,1,1]]
signal,
[[2,1,1],[2,3,1],[3,4,1]],
signal.
edges.)
wi),
[[1,2,1]],
[[0,0]],
[[7,3,4,9],[2,3,6,2],[2,3,7,0]],
[[5,2,4],[3,0,5],[0,7,2]],
+------------+------------+----------+-------+
selects
first_year
s[i].
locked,
permits
locked[i]
s[0].
locked[1]
"010100"
locked.length
s[3].
locked[3]
"))()))",
[[".q..","...q","q...","..q."],["..q.","q...","...q",".q.."]]
[["q"]]
n-queens'
placement,
kthlargest.add(4);
kthlargest.add(5);
kthlargest.add(9);
"add"]
kthlargest(int
kthlargest.add(3);
["kthlargest",
kthlargest(3,
kthlargest
kthlargest.add(10);
[4]]
venture
profits.length
profits
capital.
projects
soon.
capital.length
projects.
profits[i]
resources,
pure
projects,
capital[i]
ipo.
|-4|
|4|
[-4,-2,1,4,8]
[2,-1,1]
|8|
|1|
|-2|
[1,2,3,-3,4]
objects.)
[1,2,-3,3,1]
[1,2,3,-3,-2]
serializations
+----+----------+
unique_id)
+-----------+----------+
+----+-----------+
employeeuni
unique_id
"0001",
flips.length
prefix-aligned.
"0000".
[3,2,4,1,5]
"01100",
flips[i]
"1111",
"11110",
"01110",
"1001",
touches
thereafter,
pictorial
routine
minutes:
max(7,
[1,100000]
[4,2,2,3]
(n-1-i)th
twin.
twins
[5,4,2,1]
100001.
100001
afer
changes,
1th
seconds,
2th
average_age
him,
reports_count
+-------------+---------+------------+-----+
anyone
+-------------+-------+---------------+-------------+
(reports_to
null).
managers,
reports_to
reporting
(41+36)/2
38.5,
ops,
ops.length
m[x][y]
incremented
ops[i].length
[[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
[[2,2],[3,3]]
ops[i]
10080
[2,4,3,7,10,6]
[2,4,8,16]
seatsi]
[10,55,45,25,25]
lasti,
bookings[i].length
[[1,2,10],[2,2,15]],
[10,25]
seats:
lasti
reserved:
labels:
bookings,
bookings[i]
bookings.length
[[1,2,10],[2,3,20],[2,5,25]],
seatsi
"02"
trimi].
trimi
[[1,1],[2,3],[4,2],[1,2]]
[[2,1],[2,2]]
problem?
[2,2,1,0]
251
["24","37","96","04"],
remain.
radix
["2","3","1","4"].
["02","73","51","14"].
["4","7","6","4"].
["102","473","251","814"],
[ki,
kith
0101,
1100,
determined.
[1,2,1,1,2,1]
[1,3,2,1,1,3,2,1]
ans[i
[nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
[1,3,2,1]
[nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
[20],
"popatstack",
dinnerplates
popatstack(int
["dinnerplates",
d.push(21);
﹈
d.push(20);
d.popatstack(0);
dinnerplates(2);
[[2],
d.push(4);
now:
capacity)
popatstack.
d.pop()
d.push(2);
dinnerplates(int
[21],
d.popatstack(2);
d.push(5);
d.push(1);
d.push(3);
firstlen,
[8,9]
firstlen
[3,8,1,3,2,1,8,9,0],
[2,1,5,6,0,9,5,0,3,8],
[0,3,8]
[5,6,0,9]
secondlen
secondlen,
[0,6,5,2,2,5,1,9,4],
secondlen.
[3,8,1]
considered,
subtree,
36,
children;
[6,2,4]
231).
[4,11]
[4,2,7,2,4,4,5]
j|.
[2,1,3,1,2,3,3]
[5,0,3,4]
[10,5,10,10]
3s
10s
d1),
(p1,
(p2,d2,p1,d1).
(p2,p1,d1,d2),
pickup(i).
(p2,p1,d2,d1)
(p1,p2,d2,d1),
(p1,d1,p2,d2),
services.
delivery(i)
(p1,p2,d1,d2),
(p1,d2,p2,d1)
pickup/delivery
[[0,3],[2,1],[2,3]]
[2,2,10,6],
non-adjacent
[[0,1],[1,2],[1,3]],
proven,
[0,1,3].
2x2.
3x1.
[[0,1,1,0],[0,1,1,1],[1,1,1,0]]
3x2.
1x2.
1x3.
1x1.
[[1,0,1],[1,1,0],[1,1,0]]
2x1.
referred
[-1,0,0,1,2]
prevroom[i]
prevroom
built,
rooms:
prevroom,
colony.
prevroom.length
prevroom[0]
subsequence).
reindexing
(after
[5,6,7,8]
[6,2,1,2,4,5]
[6,1,5]
[4,2,5,3]
(-8)
(+8)
(-9)
(+1)
(+9)
(+5)
(+6)
521
886996
"cbad".
s[j].
[3,2,20,1,1,3],
total)
[1,1,4,2,3],
[2,1,5,4,3]
a[i].
[2,1,5,4],
[5,2,3,null,1],
[1,4,2,3,5]
construct(a))
routine:
construct([a[0],
construct(a)
construct(b).
[2,1,5,3,4]
[5,2,4,null,1,3]
construct(a).
[2,1,5,3],
1]]).
[5,2,4,null,1],
construct([a[i
[5,2,4,null,1,null,3]
a[a.length
[4,1,3,null,null,2],
(root
[5,4,null,1,3,null,null,2]
a[i
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
[1,4,8,13],
[4,4,8,13].
[3,9,6],
[1,4,13,13].
[1,8,8,13].
[3,4,-1,1]
missing.
[7,8,9,11,12]
[3,3,1,4]
22:
[[1,4],[2,4],[3,6],[4,4]],
[2,19,5,22]
contains,
[[2,3],[2,5],[1,8],[20,25]],
[20,25]
[2,-1,4,6]
19:
16.5.
[3,8,20]
16.5
overall,
14.75
15.5.
[1.5,
9.5.
4.75.
18.25,
14.5
4.75,
4.75
operations.)
[5,19,8,1]
14.5.
31/2
33/2
18.25
14.75.
9.5
16.5,
1.5.
"arts"
similarity:
"rats"
"tars"
{"star"}.
["tars","rats","arts","star"]
"rats",
["omv","ovm"]
"arts"}
positions)
strs.
"star"
"tars",
(swapping
{"tars",
"arts".
glasses
glass
100000009,
liquid.
champange.
glass,
glasses,
excess
champange
champagne,
now.
0)).
0-indexed.)
query_row
pouring
liquid
champagne.
floor.)
poured,
poured
pictured
query_glass
[2,5,2,1,2],
[10,1,2,7,6,1,5],
candidate
(target),
(candidates)
convention,
0!
11!
3!,
4!
x!.
2!,
x!
f(11)
0!,
39916800
1!,
python.
**
exponent
2.82842...,
0.5)
[2,6]},
competitive.
subsequence:
[5,6],
[2,4,3,3,5,4,9,6],
[3,6],
{[3,5],
[2,3,3,4]
server-to-server
removed,
[[0,1],[1,2],[2,0],[1,3]]
[[3,1]]
one-dimensional
open.
activate
ranges[i]]
[3,4,1,1,0,0]
tap
[-3,3]
[-3,5]
watered
ranges[i],
["e23","2x2","12s"]
["e12","1x1","21s"]
up-left
collect,
(diagonally)
["e11","xxx","11s"]
,["8",".",".",".","6",".",".",".","3"]
(partially
solvable.
repetition.
,["4",".",".","8",".","3",".",".","1"]
,["6",".",".","1","9","5",".",".","."]
filled)
,[".",".",".",".","8",".",".","7","9"]]
,["7",".",".",".","2",".",".",".","6"]
validated
8's
,[".","9","8",".",".",".",".","6","."]
[["5","3",".",".","7",".",".",".","."]
,[".",".",".","4","1","9",".",".","5"]
sub-box,
,[".","6",".",".",".",".","2","8","."]
[["8","3",".",".","7",".",".",".","."]
start),
[1,1,1,1,1,1,1,1,1,1],
start).
start)
res.
["","","4","","","",""]]
res[0][(n-1)/2]).
[["","","","1","","",""],
2height+1
res[r+1][c-2height-r-1]
res[r][c],
[["","1",""],
res[r+1][c+2height-r-1].
["2","",""]]
["","2","","","","3",""],
"21",
"23",
"k").
"15",
"2*"
"25",
"9".
"3",
"1*"
"1*".
"24",
excluded).
decoded,
"13",
"29"
"19".
(e.g.
"14",
"29".
"18",
"26",
"28",
"17",
"12",
"2*".
"*".
"27",
"7",
"22",
(<=
262
77,
44,
66,
atleast
88,
[5,4,9,1,10,null,7]
[0,0,0,7,7,null,11]
cousin
cousins'
[5,7,7,8,8,10],
-1].
30228214
yellow,
color).
"01100"
safe.
"11001"
incorrect.
"10011",
4096
password:
"012345":
peculiar
"234",
unlocks.
"345",
"345"
recent
"012",
upper.
[[1,0,1],[0,1,0]],
0-th(upper)
[[0,1,1],[1,0,0]]
[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
1-st(lower)
column(0-indexed)
colsum[i],
[2,1,2,0,1,0,1,2,0,1]
lower.
[[1,1,0],[0,0,1]]
colsum.
[2,2,1,1]
bella-@leetcode.com
dash
david69@gmail.com
e-mail
.shapo@leetcode.com
(upper
winston@leetcode.com
sally
'_',
#
marwan
quarz#2020@leetcode.com
shapiro
+---------+-----------+-------------------------+
mail
underscore
'@leetcode.com'.
sally.come@leetcode.com
jonathanisgreat
annabelle
domain.
root2.
[2,1,3,null,4,null,7]
[3,4,5,5,4,null,7]
[1,3,2,5],
[0,3,5]
floor(nums.length
[1,2,1,2,1,2,1,2,1],
[1,2,1,2,6,7,5,1],
-500
[1,2,5,3,4,6,7]
"1-2--3---4-5--6---7"
depth-first
[1,2,5,3,null,6,null,4,null,7]
(dfs)
"1-2--3--4-5--6--7"
"1-401--349---90--88"
node),
[1,401,null,349,88,90]
[3,4,5,6]
[[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
[3,1,2,4,5],
engraved
button.
"gd"
"freedom
fallout
ring.length,
"12:00"
stage).
spelled,
dial
key[i]:
key[i].
spelling.
stage
keyword.
freedom"
(next
door.
"godding",
purpose
spell,
ring"
pressing,
spelled
"godding"
quest
"ddinggo".
key[i]
"road
metal
[4,1,5,2,6,2],
suboptimal
arr[3]).
k-increasing,
[4,1,5,4,6,5].
arr[i-2]
arr[1])
[2,2,3,4,4].
arr[i-k]
arr[i-3]
["0","0","0","0","0"]
["1","1","0","1","0"],
["1","1","0","0","0"],
'1's
["1","1","1","1","0"],
["0","0","1","0","0"],
["0","0","0","1","1"]
(water),
[42,42,42]
constant()
array.map
i;
resides
returnedarray[i]
map(arr,
plusi(n,
[10,20,30],
plusone);
687
num2.
4325
indeed
[1,-2,1],
[-1,-2],
"aaabbbb"
jewels.length,
jewels.
jewels,
[[0,0],[1,1],[0,0]]
[[0,0,0],[0,1,1]]
selected.
(string
"abcbabcbcb"
["aba",
"cbc"].
"bac",
"ababbc"
'c'].
"cac",
[2,-1,3,4],
nums[indexi]
indexi
[[1,0],[-3,1],[-4,0],[2,3]]
[-2,-1,3,4],
[-2,-1,3,6],
[vali,
[2,2,3,4],
[8,6,2,4]
[[4,0]]
vali,
indexi].
(-2)^3
(-2)^2
zeros:
[1,0,0,0,0]
(-2)^0
rounds,
[2,2,3,3,2,4,4,4,4,4]
[7,4,9]
illegal
[6,5,4,3,10]
[["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
[["0"]]
[["1"]]
scenarios,
"aacc"
"abbacc"
"leeeetcode"
"cc"
1+2,
1+1+1,
1+2+3+4].
[3,1,2,10,1]
[3,4,6,16,17]
[1,3,6,10]
1+1+1+1,
1+2+3,
runningsum[i]
1+1,
sum(nums[0]â€¦nums[i]).
1+1+1+1+1].
comma.
2020-06-01,
activities:
basketball,
bible
(pencil,
market.
2020-05-30,
+------------+----------+------------------------------+
(headphone,
bible),
t-shirt),
headphone
2020-06-01
num_sold
sell_date
bible,pencil
2020-06-02,
(mask),
2020-05-30
basketball,headphone,t-shirt
sell_date.
2020-06-02
tiles:
tile.
tilings
tiling,
shape.
[1,5,10],
patches
patch.
add/patch
winners
firstplayer
(player
competes
participating.
secondplayer,
over,
firstplayer,
(ascending
secondplayer
lined
1c,
special[i][n]
sell.
(special
2b,
[[1,1,0,4],[2,2,1,9]],
#1),
[[3,0,5],[1,2,10]],
array)
2b
,2b
special[i].length
price[i],
special[i][j]
offers,
needs[i]
1c.
offer
1b,
3a
0b
offers.
needs.length
2a
buy.
2a.
1a
2b.
offer.
1b
#2),
[|0
leftsum
[15,11,3,0].
rightsum[i]|.
[0,10,14,22]
3|,|22
[15,1,11,22].
[15,1,11,22]
leftsum[i]
11|,|14
[10,4,8,3]
15|,|10
|leftsum[i]
rightsum[i]
0|]
rightsum
code[0],
code[n-1].
1+4+5,
bomb!
9+4].
code[0]
code[n-1]
[2,4,9,3],
4+2,
defuse,
[7+1+4,
4+5+7,
-(n
circular,
[3+9,
[12,10,16,13]
around.
[5,7,1,4],
informer
[12,5,6,13]
out!
code[i]
5+7+1].
[4,5,6],
mat[1][1]
[1,1,1,1]]
[7,8,9]]
[[1,2,3],
secondary
[[1,1,1,1],
[[5]]
118505380540.
505379714
505379714.
"11011",
"1101110010111011110001001101010111100".
[[5,1,2],[4,0,3]],
movecost[i][j]
[[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
movecost
movecost[i].length
[[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
[[5,3],[4,0],[2,1]],
movecost.length
sides,
"ll.rr.llrrll.."
purposes
fallen
forces.
".l.r...lr..l.."
"rr.l"
expends
upright.
postorder[i]
postorder.length
[4,5,2,6,7,3,1]
[1,2,4,5,3,6,7],
"ccbccacc"
"ccaccbcc"
dictionary[i],
"cbcd".
encrypts
encrypt(string
encrypter
encrypter(char[]
"dacb",
"encrypt",
"am".
[[['a',
"abad"]);
encryption
'd'],
encrypter([['a',
"badc",
"am"],
"zf",
"adbc",
"zf"
decryption.
encrypted
"eizfeiam".
decrypt(string
"ei"
carried
encrypter.encrypt("abcd");
"abad",
encrypter.decrypt("eizfeiam");
["ei",
values[i].length
"am"
"eizfeiam",
"abad"
"decrypt"]
"abad"]],
decryption
"cbad",
["eizfeiam"]]
"cadb",
word2)
["encrypter",
["abcd"],
out,
word1)
2m.
max(m,
[2,7,9,4,4]
[1,2,3,4,5,100]
"aaccba"
"aaccba",
palindrome.length
"abacba".
"zbccba",
r.
queries:
[[1,1,1],[2,1,0],[3,0,0]]
[[2,0,0],[3,0,0]]
r].
nums1.length,nums2.length
[1,10,4]
[4,3,1,2,4].
[4,3,1,2,4]
[1,2,3,1,2]
[1,2,1,2,3],
[2,1,2],
[1,2,1,3],
[1,2,1,3,4],
mat[3][1],
[[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
[[1,1,1,1],[1,2,2,2],[1,2,3,3]]
[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]
mat[2][0],
[[3,3,1,1],[2,2,1,2],[1,1,1,2]]
mat[4][2].
countandsay(3)
"1211"
countandsay(1)
formula:
"say"
countandsay(4)
countandsay(n-1),
"21"
countandsay(n)
count-and-say
countandsay(2)
"3322251":
saying
"anna"
constructions
"annabelle",
"anbna"
"true",
"anellena"
"elble",
"elle",
[1,2,3,null,5,null,4]
yourself
"312"
"213"
"321"
labeling
listing
"2314"
[2,1,4,6,9]
[5,6,7,8].
[1,2,3,8],
nums2[3].
[1,3,5,4],
[0,3,5,8,9],
[5,6,7,4],
news).
urgent
informtime[i]
headid.
informtime
manager[i]
informed.
headid
news.
manager[headid]
[0,0,1,0,0,0]
manager.length
subordination
informtime.length
[2,2,-1,2,2,2],
subordinates,
a's)
abcde
"caabbb"
aacabb
b's,
"cabbba",
aecdb
"baaccc"
"abbccc"
close,
"cabbba"
bbcbaa
-1]);
numarray([-2,
-1]],
[[[-2,
numarray.sumrange(2,
"branford".
"orland".
alps
"bradford",
add(string
locations,
sortracker();
attractiveness
branford,
worst.
"bradford".
precedes
better.
location:
["alpine",
queried
supports:
sortracker
get()
["bradford",
sortracker()
["orland",
branford
orland.
name="branford"
bradford.
worst,
bradford
"branford",
name="alpine"
tracker.add("branford",
["alps",
orlando,
["orlando",
tracker.add("bradford",
score=2
tracker.add("orlando",
alpine,
name="orland"
querying
name="alps"
"alps",
query).
"orland"]
score=3
scenic
alps,
score)
invoked
tracker.get();
["branford",
invocation).
tracker.add("orland",
locations:
"alps"
name="bradford"
tracker.add("alps",
bradford,
tracker.add("alpine",
["sortracker",
name="orlando"
["((()))","(()())","(())()","()(())","()()()"]
well-formed
["()"]
")()())"
"()()".
(well-formed)
encoding.
[nums[2*i],
sublists
sublist.
[4,4,4]
[2,4,4,4]
nums[2*i+1]]
[2,4,4,4].
[freq,
decompressed
friend.
brings
wraps
repeat.
[3,2,1,4,7]
[1,2,3,2,1],
[0,0,0,0,0].
"110011"
"000110"
"10".
y's
"00010"
"000101"
binary.length
"111011"
"00001"
"10010"
"100101"
"110101"
west).
vehicle
[numpassengersi,
[[2,1,5],[3,3,7]],
numpassengersi
trips[i].length
"eleetminicoworoep"
"leetc"
"leetminicowor"
e's.
vowels:
"leetcodeisgreat"
"bcbcbc"
[2,2,3],
primefactors.
primefactors
factors:
[2,2,2,5,5],
[10,20,40,50,100,200].
danny
sneakily
mittal"
weekly
99899.
d1
remaps
99009
mittal
99009.
d2,
congratulate
remap
d2.
11891
"danny
sided
[4,2,1,2,3,3,2,4,1],
rolls[i]
rolls[i].
rolls,
[1,1,3,2,2,2,3,3],
rolling
rolls.length
average(b).
average(arr)
[1,4,5,8]
4.5.
average(a)
[0,1,0,1,0,1,0,1],
[1,0,1,2,1,1,7,5],
grumpy[i]
satisfied
grumpy.length
grumpy.
technique
grumpy,
queens.length
[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]],
[[0,1],[1,0],[3,3]]
yqueeni,
yking]
yqueeni]
queens[i].length
xqueeni,
[xking,
[xqueeni,
dashes).
queens[i]
[[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]],
yking
king.
ad
king.length
xking,
[[2,2],[3,4],[4,4]]
worker's
["10:00","10:40","11:00","09:00","11:00","13:00","15:00"]
saves
doors.
"11:00"
alphabetically.
keyname[i]
keyname.length,
["alice","alice","alice","bob","bob","bob","bob"],
keyname
["bob"]
keytime
"daniel"
"23:52"
"10:00"
keyname.length
keytime.length
"09:49".
keytime[i]
keytime[i]]
["12:01","12:00","18:00","21:00","21:20","21:30","23:00"]
one-hour
["daniel"]
"22:51"
use.
key-card,
"21:30").
emits
("10:00","10:40",
keyname[i].length
period,
("21:00","21:20",
key-cards
keycard
"11:00").
"23:51"
["daniel","daniel","daniel","luis","luis","luis","luis"],
[keyname[i],
[[2,1],[1,4]]
yj).
rectangles.length,
hi).
hi.
[[1,3],[1,1]]
[[1,2],[2,3],[2,5]],
[[1,1],[2,2],[3,3]],
count[j]
points[j].length
hi,
points[j]
(li,
[4,5,6,7,0,1,2]
[11,13,15,17]
max(5,
[2,5,5].
max(5,3)]
[[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
[[2,5,3],[1,8,4],[2,7,5]]
zero):
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]].
max(ci,
triplets[i].length
max(5,2),
triplets.length
[2,7,5]
max(bi,
[[2,5,3],[1,8,4],[1,7,5]].
max(3,
[[3,4,5],[4,5,6]],
triplets[i]
triplets[j]
[2,7,5].
[[2,5,3],[1,8,4],[1,7,5]],
bj),
[max(ai,
max(3,5)]
[max(2,1),
[[2,5,3],[2,3,4],[1,2,5],[5,2,3]],
ci,
[[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
[max(2,
5)]
triplet.
[5,5,5]
triplets,
z]
cj)].
[max(2,5),
max(5,7),
aj),
[1,2,3,-9]
"tie"
secondlist
endj].
[[1,3],[5,9]],
[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
endj
startj
startj+1
firstlist.length,
[startj,
secondlist,
[[0,2],[5,10],[13,23],[24,25]],
secondlist[j]
[[1,5],[8,12],[15,24],[25,26]]
secondlist.length
starti+1
firstlist
firstlist[i]
firstlist.length
paths[i][j]
friend's
[4,3,2,1,0]]
subpaths
[[0],[1],[2]]
[4,0,1,2,3]]
friend,
paths[i].
[[0,1,2,3,4],
too",
thanks
fight",
sentences[i].length
"continue
win"]
(underlined)
["please
["alice
much"]
sentences[i]
sentences.length
wait",
much",
leetcode",
callable
interface
implementations
f(x,y)
y=3
y=4
f(x
y=2
f(4,
y=1
x=1,
f(5,
customfunction,
y=5
f(int
monotonically
f(3,
f(x,
x=4,
with),
f(2,
findsolution
f(1,
customfunction
y);
public:
i.e.:
[[1,4],[2,3],[3,2],[4,1]]
x=2,
[[1,5],[5,1]]
x=3,
[4,3,6],
numsdivide
[2,3,2,4,3],
[3,4,3].
[2,3,2,4,3]
numsdivide.
[9,6,9,3,15]
numsdivide[i]
numsdivide.length
[8,2,6,10]
reservedseats.length
10^4)
reservedseats[i].length
[[2,1],[1,8],[2,6]]
exceptional
[[4,3],[1,4],[4,6],[1,7]]
[3,4])
aisle
reservedseats[i][0]
[[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
reservedseats[i][1]
reservedseats[i]
min(10*n,
reservedseats
four-person
push.
["#",".",".",".",".","#"],
["#","#","#","#","#","#"]]
(impossible
storekeeper
["#",".","#","#",".","#"],
["#","t",".",".","#","#"],
["#",".",".","b",".","#"],
there).
["#",".","#","b",".","#"],
["#",".",".",".","s","#"],
[["#","#","#","#","#","#"],
["#","#","#","#",".","#"],
["#","t","#","#","#","#"],
image[sr][sc].
[[0,0,0],[0,0,0]]
pixel),
[[0,0,0],[0,0,0]],
sr,
image[i][j]
[[2,2,2],[2,2,0],[2,0,1]]
(sr,
pixel.
sc
sr
pixel
pixel,
[[1,1,1],[1,1,0],[1,0,1]],
color),
sc)
pixels)
sc,
image[i][j],
diagonals),
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
unrevealed
mine,
(wikipedia,
revealing
'8'.
clickc
mine.
[["e","e","e","e","e"],["e","e","m","e","e"],["e","e","e","e","e"],["e","e","e","e","e"]],
revealed,
[clickr,
[["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]],
'8')
('m'
click.length
click
revealed.
clickr
char
[["b","1","e","1","b"],["b","1","x","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]
clickc]
revealed
board[clickr][clickc]
game)!
'e').
ocurrences
[1,1,1,2,2,2,3,3,3,4,4,4,5]
[2,2,1,1,5,3,3]
[2,2,1,1,3,3],
[2,2,1,1,5,3,3,5]
demonstrated
[5,3,4,5]
ties.
sum(piles[i])
[3,7,2,3]
product_name,
2008.
2011.
+--------------+-------+-------+
conclude
2009.
2500.00000
[4000,3000,1000,2000]
[1000,2000,3000]
salary[i]
(2000)
2000.00000
(2000+3000)
salary.length
[0,1,2,3],
[0,1,3]
[0,3,1,4]
max(6,
5+2)
4+4,
(6,2).
max(3+3,
max(8,
[3,5,2,3]
6+2)
4+4)
[3,5,4,2,4,6]
max(3+5,
(3,3)
max(1+5,
(5,2).
(4,4),
(a,b)
(1,5),
viewer
articles.
view_date
author)
(written
article_id
+------------+-----------+-----------+------------+
2019-07-22
author_id
viewer_id
authors
202]
increment,
[101,
201,
[201]
pops
inc(int
stk.increment(2,
103,
stk.push(1);
stk.push(2);
201
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
maxsize)
[201,
stk.push(4);
maxsize,
stk.push(3);
102,
stk.pop();
202
customstack
stk.increment(5,
customstack(3);
customstack(int
103]
["customstack","push","push","pop","push","push","push","increment","increment","pop","pop","pop","pop"]
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
stk
maxsize.
swapped,
"101010"
top?
maxk.
mink,
mink
maxk
fixed-bound
[1,3,5,2].
[1,3,5,2,7,5],
mink.
[[2,1,1],[0,1,1],[1,0,1]]
rotten.
rotten,
[[2,1,1],[1,1,0],[0,1,1]]
[[0,2]]
elapse
floor(0.88888889)
(1,1):
floor((50+200+200+200+200+100+100+100+100)/9)
img[i].length
surrounding
floor(0.83333333)
floor(138.888889)
floor((200+200+50+200+100+100)/6)
smoother).
img[i][j]
floor(0.75)
138
(2,2):
img.length
[[100,200,100],[200,50,200],[100,200,100]]
(2,1):
floor(5/6)
(2,0),
floor(141.666667)
floor(8/9)
floor((100+200+200+50)/4)
[[137,141,137],[141,138,141],[137,141,137]]
grayscale
floor(137.5)
137
img
141
floor(3/4)
2⌋
⌊n
[2,2,1,1,1,2,2]
[3,3,2,2],
[2,3,3,2,2]
[2,3,3,2],
[2,3,3,2,2],
(right),
started.
magnitude,
irrelevant.
"ud"
(up),
completes
robot's
(left),
"moves"
(down).
magnitude
"facing"
"bacdfeg"
min(2,3,4)
[1,3,3,2],
n-1}
[4,2,3,1,1],
[7,5,10,9,6],
ik
(3+3+2)
nums2[i1],
nums1[i1]
optimal:
i1,
nums1[ik
i0,
(nums1[i0]
min(2,1,4)
,nums2[ik
+...+
min(2,1,3)
[2,1,3,4],
(1+3+3)
(1+3+2)
min(nums2[i0]
min(1,3,4)
'_'
"l___r__r_".
"l______rr"
"_r",
"_l__r__r_",
"__lr"
"r_"
"l___r___r".
"_rl_".
"r_l_",
anymore,
"l______rr".
"abcabcabc".
nums[2]}
[5,4,0,3,1,6,2]
s[k].
0}
nums[6]
{nums[0],
{5,
subjected
{nums[k],
s[k]:
nums[6],
nums[nums[nums[k]]],
nums[nums[k]],
"computation"
character:
'e'/'a',
"baba")
"computer"
("aba",
"bb")
portions
[10,5,2,6],
start_tag
"]]>>]"
wrapped
<![cdata[cdata_content]]>.
tag_name.
valid).
<b>
plain
issue
"<![cdata[<div>]>]]>",
<![cdata[<div>]]></div>"
"<b>"
[1,9].
<tag_name>
note1)
tag_content
"<div>>>
'<',
"<a>
"<a>"
<,
unmatched
cdata
tags,
"<div>]>"
</b>"
unmatched,
unbalanced.
">>
"<div>this
forbid
"</div>"
<div>
tag_name,
tag.
unbalanced
tag_name
nested.
![cdata[]]
tag,
end_tag
</tag_name>
valid)
snippet,
'>',
cdata_content
tags
cdata_content,
"<div>"
</,
start_tag|tag_content|end_tag.
invalid),
"<![cdata[<div>]>]]>]]>"
<![cdata[<div>]>]]>]]>>]</div>"
<tag_name>tag_content</tag_name>.
]]>.
cdata.
'[',
</div>.
</a>
"<div>>>"
text1|cdata|text2.
reason
<![cdata[
snippet
groupsizes[6]
groupsizes.length
groupsizes[4]
groupsizes
groupsizes[i]
[3,4,6].
groupsizes[3]
[2,1,3,3,3,2]
[[2,1,6],[5],[0,4,3]]
groupsizes[5]
[[5],[0,6,2],[4,3,1]].
groupsizes[1]
groupsizes[i].
[0,1,2].
[[5],[0,1,2],[3,4,6]]
[3,3,3,3,3,1,3]
[[1],[0,5],[2,3,4]]
groupsizes[2]
groupsizes[0]
groupsizes,
[[1,0],[1,2],[3,2],[3,4]]
narrow.
ministry
orient
[[0,1],[1,3],[2,3],[4,0],[4,5]]
(capital).
reorder.
reorienting
tree).
[[1,0],[2,0]]
(city
transport
brainpoweri
question.
earned:
[[3,2],[4,3],[4,4],[2,5]]
pointsi,
questions[i]
questions.length
questions[i].length
exam,
[pointsi,
brainpoweri].
5]]:
pointsi
|25
[1,15,6,3]
16|
2016-05-02
first_login
+-----------+-------------+
trapped.
[4,2,0,3,2,5]
trap
[0,1,0,2,1,0,1,3,2,1,2,1]
(black
raining.
[0,1,0,2,1,0,1,3,2,1,2,1].
[2,1,4,3],
[2,9,2,5,6],
"a1b2"
["a1b2","a1b2","a1b2","a1b2"]
["3z4","3z4"]
"3z4"
fees.
passingfees,
journey,
passingfees[j]
fees
cities).
loops.
$48
passingfees.length
[[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]],
passingfees
[5,1,2,20,20,3]
maxtime,
maxtime
servers[i]
[5,1,4,3,2],
[2,2,0,2,1,2]
[2,1,2,4,5,2,1]
servers.length
tasks[j]
priorities
servers[i],
[1,2,3,2,1,2]
tasks[j].
[1,4,1,4,1,3,2]
output[0].next
output[4]
[[1],[2],[3],[],[]]
output[0].val
possible:
[[1,2,3,4],[5,6,7],[8,9,10]]
output[0]
later.
themselves,
alone.
mirrored),
rotating.
degrees,
height).
[[8,7],[9,9],[7,4],[9,7]]
fixed-width
[[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
passengers.length
[20,30,10],
arrived
buses[i]
[10,20],
[19,13,26,4,25,11,21],
buses.length
passengers[j]
passengers[i]
passenger,
passengers.
later,
[2,17,18,19],
passenger.
buses[i],
-10,
-6,
["9001
"com",
"9001
d1.d2.d3"
"google.mail.com"
subdomains.
google.mail.com",
900
discuss.leetcode.com"]
"repi
discussed
cpdomain[i].length
com"]
cpdomain.length
"wiki.org"
"discuss.leetcode.com"
["900
yahoo.com","900
901
"50
cpdomains
google.mail.com","5
d1i,
"mail.com"
d3i
d1.d2.d3
repi
9001
discuss.leetcode.com","9001
"discuss.leetcode.com",
subdomains,
discuss.leetcode.com"
domain:
formats
"discuss.leetcode.com".
d1i.d2i.d3i"
leetcode.com","9001
"org"
cpdomains,
"intel.mail.com"
yahoo.com",
"5
mail.com","50
implicitly.
"rep
["901
discuss.leetcode.com
count-paired
domains
rep
org","1
"yahoo.com"
"com"
intel.mail.com","951
951
wiki.org"]
cpdomain[i]
d2i,
d1i.d2i"
intel.mail.com",
d1.d2"
wiki.org","5
[5,5,0]
[2,7,4,3,5]
[7,0,5,5,0]
[2,1,5]
boxtypes[i]
numberofunitsperboxi
boxtypes
91
[[5,10],[2,5],[4,7],[3,9]],
trucksize,
numberofunitsperboxi]:
numberofboxesi
[numberofboxesi,
truck.
boxtypes,
trucksize
boxtypes.length
numberofboxesi,
[[1,3],[2,2],[3,1]],
trucksize.
haley"
is"
now",
"jane"
jane"
sentence2.
"eating
haley",
"my
"name
"haley".
now"
sentence1
sentence2.length
sentence2
"my"
sentence2,
"right
"eating"
sentence1.length,
abs
"loveleetcode",
[3,2,1,0]
abs(8
"aaab",
[3,2,1,0,1,0,0,1,2,2,1,0]
negatives
column-wise,
row-wise
[[3,2],[1,0]]
[[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
[3,2,3,2,2,2]
"bronze
medal","4","5"]
[1st,
[10,3,8,9,4]
"silver
athlete,
athlete
medal".
medal","4"]
"gold
athlete.
placements
athletes
athlete's
medal","silver
rank:
medal","bronze
medal","5","bronze
["gold
"x").
4th].
5th].
[y,
indirectly.
[false,false,false,false,false]
x].
3--6
[false,false,true]
[[4,5],[4,5],[3,2],[2,3],[3,4]]
[[4,5],[3,4],[3,2],[2,6],[1,3]]
them).
[true,true,true,true,true]
2x2)
(square
integer-sided
1x1)
(squares
min(m
happiness)
neighbors)
introvert
extroverts.
extrovertscount.
extrovertscount
introvertscount
30)
happiness:
neighbor)
happiness.
extroverts
extrovert
living
light
live
introverts
260.
introvertscount,
240
people:
260
(introvert
extrovert).
played,
decided.
advance
tournament:
paired.
declared
numerals.
148,
512,
512.
522,
74,
673
[52,2].
[7,52,2,4]
[14,13,8].
1549.
52,
[5,14,13,8,12]
596
"$1.00".
"$1e5"
"$100",
preceded
"$9".
8$
shop",
"$3",
"$",
$0.00
"$1".
"$0.00".
"$6",
"$23",
"$0.50".
$10$"
'$'.
"$0.50",
"$1"
"$2"
$0.50
$1.00
"$5",
"$2".
5$
"$6"
discount%
$10$",
shop"
"there
[0,0,0,2,0,0]
[2,10,2019]
[1,3,0,0,2,0,0,4]
tright.
"aabcbc"
tleft
tright
"abcabcababcc"
tright,
nums[0],nums[1],nums[2]:
nums[5],nums[6],nums[7]:
[0,0,0,1,0,1,1,0],
[1,1,1,1,0,1,1,0]
k-bit
nums[4],nums[5],nums[6]:
[1,1,1,1,1,1,1,1]
[1,1,1,1,1,0,0,0]
[0,1,0],
score's
[5,3,1,4,2]
[5,3,1,4].
(poor
[7,90,5,1,100,10,10,2]
[3,1,4].
loses),
"rear",
benefits
dequeue()
"rear"]
mycircularqueue.enqueue(3);
(first
rear,
normal
mycircularqueue.isfull();
dequeue,
mycircularqueue.dequeue();
["mycircularqueue",
enqueue,
rear()
"ring
mycircularqueue(k)
mycircularqueue.rear();
mycircularqueue.enqueue(4);
mycircularqueue.enqueue(1);
mycircularqueue.enqueue(2);
principle,
enqueue(int
fifo
mycircularqueue(3);
mycircularqueue
buffer".
front()
"enqueue",
out)
"dequeue",
[1,3,7,1],
[3,8,5,2],
nums1:
[4,3,1,4],
[2,4,1,6],
[1,3,7,1].
[1,3,4,4].
1]),
strs[1][strs[1].length
strs[1][0]
strs[0][strs[0].length
strs[1][1]).
["babca","bbazb"]
["ghi","def","abc"]
"az"].
["bc",
strs[1][1]
(row)
(strs[1][0]
strs[0][0]
["edcba"]
lists:
[1000000,1000001,1000002]
ath
[1000000,1000001,1000002,1000003,1000004]
[0,1,2,3,4,5,6],
bth
list1's
list1.length
[0,1,1000000,1000001,1000002,1000003,1000004,6]
[0,1,2,1000000,1000001,1000002,5]
"3rd",
"mar",
2100].
1933"
"jun",
{"jan",
"apr",
"nov",
{"1st",
"2nd",
jun
"20th
"feb",
"6th
dd
"may",
oct
"4th",
"26th
2052"
[1900,
"sep",
"30th",
"aug",
"31st"}.
"jul",
"1933-06-06"
"2052-10-20"
yyyy
"dec"}.
"1960-05-26"
1960"
"oct",
p2.length
p2,
[0,-1]
p3
p3.length
[0,12]
p1,
p4
p1.length
p4.length
p4,
angles).
(90-degree
1*1*3
144.
3*4*7
scores:
triangulate
245,
triangulations,
n-sided
triangulation.
144
1*1*1
4*5*7
triangulated,
1*1*5
triangle,
[1,3,1,4,1,5]
3*7*5
[3,7,4,5]
1*1*4
triangles.
polygon.
3*4*5
[3,6,2,7]
[0,3,1,6,2,2,7].
stationname,
undergroundsystem.checkout(45,
"paradise");
t2,
[[],[45,"leyton",3],[32,"paradise",8],[27,"leyton",10],[45,"waterloo",15],[27,"waterloo",20],[32,"cambridge",22],["paradise","cambridge"],["leyton","waterloo"],[10,"leyton",24],["leyton","waterloo"],[10,"waterloo",38],["leyton","waterloo"]]
undergroundsystem.checkin(32,
["undergroundsystem","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime","checkin","checkout","getaveragetime"]
t2.
"waterloo",
endstation.length
"waterloo"
undergroundsystem.checkin(5,
checkout(int
undergroundsystem
getaveragetime.
30-21
undergroundsystem();
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
checkin(int
undergroundsystem.checkout(32,
undergroundsystem.checkout(2,
checkout
endstation
startstation
16-10
6.66667
20-10
"paradise"
38);
t)
getaveragetime(string
endstation.
undergroundsystem.checkin(2,
5.50000,
getaveragetime
["undergroundsystem","checkin","checkin","checkin","checkout","checkout","checkout","getaveragetime","getaveragetime","checkin","getaveragetime","checkout","getaveragetime"]
stationname
5.5
22-8
undergroundsystem.getaveragetime("leyton",
"leyton"
22);
[[],[10,"leyton",3],[10,"paradise",8],["leyton","paradise"],[5,"leyton",10],[5,"paradise",16],["leyton","paradise"],[2,"leyton",21],[2,"paradise",30],["leyton","paradise"]]
6.66667,
"cambridge");
11.00000
21);
"leyton",
undergroundsystem.getaveragetime("paradise",
undergroundsystem.checkin(27,
undergroundsystem.checkout(5,
14.00000.
"cambridge",
checkin,
24);
8-3
undergroundsystem.checkin(10,
stationname.length,
startstation.
undergroundsystem.checkout(27,
(14)
38-24
12.00000.
undergroundsystem.checkin(45,
checkout,
railway
11.00000.
startstation,
endstation)
undergroundsystem.checkout(10,
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
"paradise",
15-3
5.00000,
"waterloo");
"cambridge"
startstation.length,
checkin
word[0,...,i]
[1,1,0,0,0,1,1,0,0]
"998244",
"9",
div
div[i]
"9982443".
"998244353",
[[1,2],[3,10],[12,16]]
[[1,5],[6,9]]
newinterval.length
[[1,2],[3,5],[6,7],[8,10],[12,16]],
end]
(merge
[[1,3],[6,9]],
newinterval
[3,5],[6,7],[8,10].
starti.
"cdba",
previously.
"cbad"
outputs.
"dcba",
"cbda"
permuted
"cbafg",
property.
index[i]
[1,2,3,4,0],
index.length
[0,4,1,3,2]
[0,1,2,2,1]
index[i],
"f00l"
mappings.
[["o","0"]]
[oldi,
mappings[i].length
"l3e7"
mappings.length
oldi
"f00l",
[["e","3"],["t","7"],["t","8"]]
newi]
"fool33tbar",
[["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]]
"fooleetbar",
mappings[i]
"fool3e7bar",
"leetd",
newi
mappings
"l33tb"
newi.
sub.length
sub.
ancestor-node
|a.val
13|
[8,3,10,1,6,null,14,null,null,4,7,13]
7|
b.val|
[1,null,2,null,0,3]
array?
[6,1,3]
encounters.
generator.next().value;
arr.flat()[i]
generator.next().done;
encounters
inordertraversal(arr);
[[[6]],[1,3],[]]
arr.flat().length
pipes?
frequency:
sake,
assume:
following,
one-line
sunny
words.txt
words.txt.
ties,
[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
enclosed
(4-directionally)
0s,
sea
"aabaaaacaabc",
-55
-132},
n's
"-13",
-255.
"999"
-123,
-123.
"-123"
{-213,
mentors[j].length
mentor.
mentor's
mentor
[[1,1],[1,1],[1,1]]
students[i][k]
[[1,1,0],[1,0,1],[0,0,1]],
student-mentor
[[1,0,0],[0,0,1],[1,1,0]]
mentors
question's
(no)
student's
[[0,0],[0,0],[0,0]],
mentors,
mentors[j]
survey
mentors[j][k]
mentor,
students[i].length
(yes).
mentors.length
1123:
https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/
"leaf":
p_id
+----+------+
attributes.
"inner":
"root":
grandparent,
even-value
grandparents.
grandparent.
0-height
city's
building).
gridnew
prism.
[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
contour
increased.
affecting
skylines
blocks,
changing.
116
"eet",
403.
403
"dee"
100+101+101+101
"delete",
"delete"
417,
"lee"
(115)
101[e]
100[d]
433
startpos.
harvest.
[[0,3],[6,4],[8,5]],
disappear
positioni.
positioni-1
harvest
reach,
fruits.
fruits.length
fruits[i].length
amounti]
startpos,
[[2,8],[6,3],[8,6]],
[[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]],
fruits[i]
y0)
distance:
y1|.
|x0
[[1,0,0],[0,0,0],[0,0,0]]
|y0
maximized,
x1|
land,
(x0,
bms
maxrow
ticketing
bms.gather(4,
"scatter",
(respectively)
allocated,
bookmyshow(2,
"gather",
bookmyshow(int
scatter.
allocates
scatter(int
hence:
"scatter"]
hall
gather(int
spectators
maxrow)
["bookmyshow",
hall.
bookmyshow
bms.gather(2,
maxrow,
bms.scatter(5,
vary
maxrow.
gather
[1,3,9]
[[1,3],[3,0,1],[2],[0]]
unlocks
[[1],[2],[3],[]]
rooms[i][j]
rooms[i].length
unlocks,
sum(rooms[i].length)
matrix[0][1],
matrix[1][1]
matrix[row][col].
matrix[0][1]
matrix[0][0]
[[7,7],[7,7]]
rank(p)
matrix[row][col]
answer[row][col]
matrix[1][0]
[[4,2,3],[1,3,4],[5,1,6],[1,3,4]]
matrix[1][0],
rank(q)
[[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
steps).
nummoves
nummoves)
step).
nummoves),
[[2,3,1],[4,5,1],[1,5,2]]
continuous)
tasks[i].length
durationi]
[[1,3,2],[2,5,3],[5,6,2]]
nums1[3],
[4,6].
[[1,3],[4,6]]
[[3],[]]
[1,1,2,2]
self-dividing
47,
[1,2,3,4,5,6,7,8,9,11,12,15,22]
[48,55,66,77]
128
2i
[1,1,3,4],
reward2.length
reward1.length
reward2
reward2,
reward1[i],
reward1[i]
[4,4,1,1],
reward1,
reward2[i]
reward1
cheese,
returned:
["aaaaa",
["aaaaa"]
(idkey,
concatentating
"ddddd"),
os.insert(2,
"bbbbb");
"ddddd");
"bbbbb",
"eeeee"].
"bbbbb"],
os.insert(5,
"ccccc",
"ddddd",
"eeeee"]]
os.insert(4,
["ddddd",
idkey
"eeeee"],
orderedstream(5);
"ccccc"],
idkey,
"eeeee");
stream,
os
os.insert(1,
"ccccc"]
"aaaaa"),
orderedstream
["orderedstream",
"aaaaa");
["bbbbb",
insert(int
"ddddd"]]
"ccccc"),
"ccccc"].
["aaaaa"],
"eeeee"),
"insert"]
"ccccc");
"aaaaa"],
os.insert(3,
orderedstream(int
"bbbbb"),
insert.
["aaaaa"].
"eeeee"]
[1,2,3,4,5,null,6,7,null,null,null,null,8]
(row2i,
col1i,
col1i)
[[1,1,2,2],[0,0,1,1]]
mat[x][y]
row2i,
col2i
col2i],
row2i
(row1i,
[[0,0,1,1]]
col1i
[row1i,
col2i).
query[i]
[[1,1,0],[1,2,1],[0,1,1]]
col2i.
row1i
-10^4
coordinates[i].length
coordinates[i][1]
coordinates[i][0],
[[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
coordinates[i]
[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
null]
seatmanager(int
[5]]
unreserve
seatmanager
unreserves
reserve()
manage
[2,3,4,5].
reserve,
seatmanager.reserve();
smallest-numbered
seatmanager.unreserve(2);
["seatmanager",
seatnumber)
seatnumber.
fetches
unreserve,
[4,5],
seatmanager(5);
"reserve",
reserve
reserves
"unreserve",
unreserved
unreserve(int
seatmanager.unreserve(5);
unreserve.
seatnumber
"unreserve"]
ty,
(tx,
sy)
ty)
(sx,
sx
tx
sy
[[40,10],[30,20]],
figures
[[10,20],[40,30]]
layer:
[[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],
cyclic
[[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].
ccenter
ccenter)
[0,1,1,2]
(r2,
ccenter.
(rcenter,
[0,1,1,2,2,3]
r2|
[[0,1],[1,1],[0,0],[1,0]]
ccenter).
[[0,1],[0,0],[1,1],[1,0]]
c2|.
|r1
(r1,
rcenter,
correct,
|c1
[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
rcenter
1248
[5,7,5,4].
freqstack
frequent.
freqstack.pop();
[5,7].
[5,7,4].
pop.
freqstack.push(5);
stack's
freqstack.push(7);
frequent,
[5,7,5,7,4].
[5,7,5,7]
[5,7,5,7,4]
freqstack.push(4);
stack-like
[5,7,5,7,4,5]
freqstack()
["freqstack",
freqstack();
"(1+(2*3)+((8)/4))+1"
")".
depth(c)
"(1)+((2))+(((3)))"
[2,1,1,2],
[2,1,1,1,3,4,1],
array:
[1,3,2,2,5,2,3,7]
[3,2,2,2,3].
27,
characters'
y[i],
"aay"
"abe"
"aaszz"
alphabetic
time-consuming
optimize?
[["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]
"directory_path/file_name.txt"
directory.
(gb
fn.txt)
4.txt(efgh)"]
fn.txt(fn_content)"
"root/d1/d2/.../dm".
dfs
level),
info,
["root/a
4.txt(efgh)","root
positive?
1.txt(abcd)
(f1_content,
memory-consuming
3.txt(abcd)","root/c/d
f2.txt
2.txt(efgh)","root/c
f1.txt(f1_content)
1kb
[["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]
bfs?
"root/d1/d2/.../dm
files?
info.
separates
fn_content)
(f1.txt,
f2.txt(f2_content)
f2_content
3*4
j=2
(nums[i]-1)*(nums[j]-1).
(nums[1]-1)*(nums[2]-1)
[1,5,4,5]
(5-1)*(5-1)
(4-1)*(5-1)
j=3
[3,4,5,2]
[3,7]
"1(2(4)())(3()())",
originally,
"1(2()(4))(3)"
almost
"1(2(4))(3)"
omit
one-to-one
found),
myhashmap.get(2);
myhashmap.put(1,
[2,1]]
myhashmap.put(2,
myhashmap.remove(2);
myhashmap.get(3);
[2,2]]
mapped,
myhashmap.get(1);
myhashmap()
key)
["myhashmap",
"put",
myhashmap();
put(int
hashmap.
[[1,1],
myhashmap
(key,
"aaabbb"),
"bbaaaaabb"
("aababbab"
s[j]=
"aabbbb").
(i,j)
"aababbab"
arr[y]
arr[x]
-=1
date(),
superclass.
animal);
animal
class's
subclass
methods.
checkifinstanceof(5,
date)
undefined.
accesses
"tofixed()".
checkifinstance(new
animal.
checkifinstanceof(date,
definition,
checkifinstanceof(new
extends
"instanceof"
dog(),
deque.
insertfront()
"deletelast",
insertfront,
mycirculardeque.insertlast(1);
"insertlast",
getrear()
getfront,
rear
mycirculardeque.getfront();
["mycirculardeque",
mycirculardeque.insertfront(4);
getrear,
mycirculardeque(3);
deletelast,
double-ended
mycirculardeque.isfull();
mycirculardeque.insertlast(2);
mycirculardeque.getrear();
"insertfront",
deletefront,
insertlast()
mycirculardeque.deletelast();
deletelast()
"getrear",
deletefront()
successful,
"getfront"]
insertlast,
mycirculardeque.insertfront(3);
(deque).
mycirculardeque
mycirculardeque(int
getfront()
buys
sold,
[6,5,7,9,2,2]
candy,
revisit
[[1,2,3],[0],[0],[0]]
graph[a]
graph[b]
undirected,
[[1],[0,2,4],[1,3,4],[2],[1,2]]
[1,0,2,0,3]
[0,1,4,2,3]
notice:
"cdabcdab"
"abcabc".
"abcdabcdabcd",
[2,1,3,5,4,6,7]
[2,3,5,4,6,7,1]
arr[1]).
[2,1,3,5,4,6,7],
[3,5,4,6,7,1,2]
win_count
[5,4,6,7,1,2,3]
covered.
colscount)
[19,17,16,15],
snail(rowscount,
[3,2,12,20],
[10,1,14,4],
colscount
[9,8,6,13]
iterating
rowscount
organised
[19,
[7,5,18,11],
continues,
"qwer"
"qq"
"er".
"qqwe"
'q',
"qqqw"
"rqwe"
"qrwe")
[2,3,4,1].
[2,5,1,3,3,1,1].
permuting
choosing.
[1,3,5,2,1,3,1]
[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
4.77778
5%
[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
positives
shuffling.
"codeleet",
"codeleet"
shuffling,
[4,5,6,7,0,2,1,3]
"(*))"
"(*)"
[4,7,20].
[1,0,0,10,14].
[4,7,7].
[1,0,0,0,1].
[5,3,3,4].
[5,3,3,3].
[1,0,0,0,14].
[1,5,0,10,14]
[3,3,3,3].
[5,3,2,4]
[3,100,20]
[7,7,7].
[4,3,1,1,3,3,2],
3s.
[5,5,4],
["000","111","000"]
--
devices,
bank[2][3]
beam.
["011001","000000","010100","001000"]
beam
bank[2][1]
r2,
r2.
bank,
bank[i].length
bank[i]
beams:
bank[0][2]
bank[0][1]
r1
bank.length
while'1'
device
bank[0][5]
bank[3][2]
bank[i][j]
activated
independent,
devices
ghosts[i]
ghosts,
xtarget,
independently
still.
ytarget
ghost.
escape.
ytarget]
ghosts[i].length
ghost
ghosts.length
[xtarget,
pac-man
[[1,0],[0,3]],
ghost,
[[2,0]],
[2,1,4,3,5]
[3,2,1,4,5]
left-out
alter
[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]],
quiet
[3,2,5,4,6,1,7,0]
(has
reasoning.
richer.length
richer[i]
quiet[i]
quiet[x])
richer
quieter
situation
quiet[y])
[5,5,2,5,4,5,6,7]
quietness.
answer[7]
quiet.length
quietest
observations
quietness
'j'),
"aabb"
"ccjjc"
'j'.
"he"
wonderful,
[3,5,1,6,2,9,8,null,null,7,4],
leaf-similar.
[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
(1*1=1
(3*3=9
(2*2=4
[1,3,2,2,2,3,4,3,1]
---->
points)
bbab
["cat","bat","rat"],
absbs
successors
cattle
"another".
successor.
"other",
"aadsfasf
c"
replacement.
bat"
cadsfafs"
battery"
1000]
english,
"an"
rat
rattled
colorings
580986
"pa",
"lp",
"pl",
10101
"la",
"ap",
"al",
"pp",
award:
183236316
apart
[1,0,0,0,1,0,0,1],
mynumbers
+-----+
capitalized
capitalization
title.
title.length
word"
title"
"of"
"capitalize
uppercase,
"lee(t(co)de)"
"))(("
"lee(t(c)ode)"
either'('
"ab(c)d"
"a)b(c)d"
"lee(t(c)o)de)"
"lee(t(c)o)de"
[[1,2,0,1],[1,3,0,1],[0,2,5,1]],
(highest
[[0,1],[1,1],[2,1]]
[[1,1,1],[0,0,1],[2,3,4]],
(shorter
[[1,2,0,1],[1,3,3,1],[0,2,5,1]],
(lower
pricing.length
[row,
(2,0).
[[2,1],[2,0]]
range).
highest-ranked
rank).
(2,2).
(2,0)
col]
pricing
[[2,1],[1,2]]
(smaller
truncating
"solution"].
"chopper
"how",
contestant",
"how"
"you",
"problem"].
"you"].
solution".
tanuki",
punctuation).
"contestant"].
tanuki"
you".
"this",
"are",
["what",
"solution",
"to",
s].
111.
namely,
bits:
extended
"10100",
["11111"]
"111"]
["111",
["1",
"10101",
"1"]
["1"]
1-indexed)
"10111",
[3,1,5,4,2],
"00101",
(assuming
[3,5,1,2,4],
[12,24,8,32],
[24,32,8,12]
[2,11,7,15]
[13,25,32,11]
[1,10,4,11]
["abc","aabc","bc"]
words[2],
["ab","a"]
wage[i]
worker,
wage.length
expectation.
105.00000
quality.length
[10,20,5],
30.66667
[70,50,30],
quality[i],
quality[i]
[4,8,2,2,7],
expectation
[3,1,10,10,1],
wage
workers,
13.33333
index2,
numbers.length.
numbers[index1]
numbers.length
[index1,
numbers[i]
numbers[index2]
index2]
[1,6,4]
[6,7,4,1].
[2,1,4]
removal.
[6,1,4,1].
[2,6,4]
[2,1,6]
fair.
[2,1,6,4]
[6,1,7,4,1]:
[6,1,7,4].
removal,
2,3],
[1,3
[b]
sum(balls)
equally:
hard
3,1],
2/2
[2,1
1,3],
random,
[3,2
2,1],
[3,1
(please
1,1]
balls.length
(),
3,2],
(b)
[1,2
1,2],
shuffles
carefully).
[a]
1,1],
8/12
[1,1
[2,3
1/12):
balls[i]
consecutively,
rollmax.length
simulator
rollmax[i]
die,
rollmax
36-2
introduced
roll.
[1,1,1,1,1,1]
pen
utensil.
cost2
cost1,
pen,
pens,
cost1
pencils.
utensils.
[-1,2,3].
[-1,2,3]
[1,-10,7,13,6,8],
[1,0,2,13,6,8]
mex
[1,0,7,13,6,8]
[1,-10,0,13,6,8]
excluded)
[1,0,2,3,6,8]
[3,5,2,4]
nums[1].
[9,2,5,4]
unmarked.
right[i]
right.length
ant(s)
4.0000000001,
above:
-the
[0,1,2,3,4,5,6,7],
[0,1,2,3,4,5,6,7]
left.length
plank,
plank.
left[i]
plank).
"zbax"
"(26)(2)(1)(24)"
➝
"(9)(9)(9)(9)"
convert:
"9999"
"iiii"
#2:
#1:
12552031545
26).
"12552031545"
"262124"
"(12)(5)(5)(20)(3)(15)(4)(5)"
262124
"iiii",
"zbax",
"babb".
"aaba",
"aababbb"
"ababbb",
"aababb",
"abbb",
variances
"ababb",
"babbb".
"aababbb",
"aabab",
similiar
[10,12,4].
[10,14,2].
[2,14,10]
[8,12,6],
[1,4,3].
[4,1,3]
given)
nums2[1]=2.
lines:
nums1[2]=2
[1,9,2,5,1]
(non-horizontal)
[2,5,1,2,5],
[1,3,7,1,7,5],
line).
nums2[j],
[10,5,2,1,5,2]
[4,5,2,2,7,10],
[[2,3],[0,2],[0,5],[3,5]]
a[j]
[4,5,2]
a[j]|,
[3,5]:
|1-3|
a[j].
|4-8|
[1,3,4,8]
[4,5,2,2,7,10]
[2,1,4,1]
[0,3]:
[2,7,10]
|7-10|
0-based
nums[li...ri]
[-1,1,1,3]
[[0,1],[1,2],[2,3],[0,3]]
|3-4|
[5,2,3,7,2]
[0,1]:
|a[i]
(2,10,4,5)
(10,2,4,5)
(4,5,2,10)
(4,3,2,6)
(3,4,6,2)
(4,5,10,2)
(6,2,3,4)
(1,10,2,5)
(2,5,10,1)
[2,3,4,6]
(3,4,2,6)
(5,4,2,10)
(10,1,2,5)
(2,10,5,4)
(4,3,6,2)
(10,2,5,4)
tuples:
(5,4,10,2)
(5,2,1,10)
(1,10,5,2)
(10,1,5,2)
[1,2,4,5,10]
(6,2,4,3)
(2,6,4,3)
(2,6,3,4)
(5,2,10,1)
(2,5,1,10)
[[1,5],[7,3],[3,5]]
[[1,2,3],[3,2,1]]
[[2,8,7],[7,1,3],[1,9,5]]
wealth.
"pwwkew"
"wke",
"bbbbb"
"abcabcbb"
"pwke"
[11,7,2,15]
[-3,3,3,90]
[[1,2],[3,4],[5,6]],
covered:
[[1,10],[10,20]],
"a#c",
"c#d#"
"ab#c",
"ad#c"
editors.
"ab##",
backspacing
[0,2,1,-6,6,-7,9,1,2,0,1]
(arr[0]
[0,2,1,-6,6,7,9,-1,2,0,1]
[3,3,6,5,-2,2,5,1,-9,4]
found.
[1,3,5,6],
not,
[1,3,3],
[4,-2,-3,4,1]
copied
notepad
all:
screen
screen.
notepad.
'aaa'.
paste
paste:
'aa'.
["rleiterator",
encoded)
[3,8,2,5].
[8,8,8,5,5]
"next"]
exhausted
next(int
encoding[i]
rleiterator.next(1);
encoding.length
exhaust,
encoded.
rleiterator([3,
rleiterator.next(2);
[[[3,
exhausts
encoding[i
rle)
rleiterator
[3,8,0,9,2,5]
[2,8,1,8,2,5]
[8,8,8,5,5].
rleiterator(int[]
6;
[[1],[2],[3]]
csum(1,2)(3),
curry(fn);
csum(1)(2)(3),
curriedsum(1,
fn.length
[[1,2],[3]]
sum(1,2,3),
practical
curriedsum
csum(1,2,3).
curriedsum(1)(2)(3)
effectively
2)(3)
explicitly
curriedlife()
curriedsum()()(1,
[[],[],[1,2,3]]
curried
csum(1)(2,3),
sum(a,
sum(1,
life()
currying
findelements([-1,null,-1,-1,null,-1]);
treenode.left
[[[-1,null,-1]],[1],[2]]
findelements
[null,true,false,false,true]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
findelements.find(3);
findelements.find(5);
[null,false,true]
findelements.find(4);
findelements([-1,-1,-1,-1,-1]);
findelements(treenode*
contaminated,
treenode.right
recovers
[null,true,true,false]
treenode.right.val
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
["findelements","find","find","find","find"]
recovered
104]
["findelements","find","find","find"]
find()
findelements.find(1);
findelements([-1,null,-1]);
treenode.left.val
["findelements","find","find"]
findelements.find(2);
subrectanglequeries.updatesubrectangle(0,
subrectanglequeries([[1,1,1],[2,2,2],[3,3,3]]);
newvalue)
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue"]
[null,1,null,100,100,null,20]
["subrectanglequeries","getvalue","updatesubrectangle","getvalue","getvalue","updatesubrectangle","getvalue","getvalue"]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
subrectanglequeries.updatesubrectangle(1,
rectangle[i][j]
newvalue,
subrectanglequeries.getvalue(3,
subrectanglequeries.getvalue(2,
updatesubrectangle
subrectanglequeries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);
col2,
(row2,col2).
[null,1,null,5,5,null,10,5]
(row,col)
subrectanglequeries
updatesubrectangle(int
newvalue
(row1,col1)
getvalue.
subrectanglequeries.getvalue(0,
subrectanglequeries.updatesubrectangle(3,
rectangle.length
getvalue(int
(4x3)
rectangle[i].length
"1011"
[1,5,1,1,6,4]
[1,6,1,5,1,4]
[2,3,1,3,1,2]
[1,4,1,5,1,6]
[1,3,2,2,3,1]
nums[3]....
[[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
[[0,1,1],[1,1,0],[1,1,0]]
address,
defanged
(ipv4)
"[.]".
"255.100.50.0"
"1[.]1[.]1[.]1"
ipv4
"1.1.1.1"
"255[.]100[.]50[.]0"
[[2],[2,4],[2,4,6],[4],[4,6],[6]]
[2,6,12,4,10,6].
[[1],[1,3],[1,3,5],[3],[3,5],[5]]
[1,4,9,3,8,5].
[1,9,3,5]
[11],
[1,6,5],
banned[i],
perfect"
"practice
practice
forts.
[0,0,1,-1]
min(i,j)
forts[k]
captured,
fort
forts[i]
forts.length
[1,0,0,-1,0,0,0,0,1]
captured.
max(i,j),
army,
forts,
[1,5,1]
[1,3,2].
arr:
wisely.
balloons,
1*3*8
3*1*5
1*8*1
balloons.
3*5*8
[3,5,8]
167
[3,1,5,8]
bursting
balloon,
[5,1,2,3,4]
expected:
[1,1,1,2,3,4]
annual
[1,1,4,2,1,3]
expected[i].
heights:
expected[i]
[2,4,5,10]
trees:
[1,1,1,0,0,0,1,1,1,1,0],
[1,1,1,0,0,1,1,1,1,1,1]
[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1],
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
[1,2,3,3,4,4,5]
[1,1,1,2,3]
[[1,4],[3,2]]
log(n))
[i,j].
[[10,20,15],[21,30,14],[7,16,32]]
log(m))
"aabaa",
neededtime.length
colorful.
neededtime
rope.
neededtime[i]
"abaac",
ballons
ballon
[1,2,3,4,1]
balloon.
help.
matrix:
[[1,2,3],[0,0,4],[7,6,5]]
forest[i][j]
forest[i].length
tallest.
[[2,3,4],[0,0,5],[8,7,6]]
forest.length
[[1,2,3],[0,0,0],[7,6,5]]
accessed
[1,2,2,2,5,0]
[2,5,0]
[2,2,5,0]
[5,0]
1.,
explanation.]
0.1(6),
0.5,
123.00(1212).
"0.9(9)"
"0.166(66)"
<integerpart><.><nonrepeatingpart><(><repeatingpart><)>
<repeatingpart>.length
"0.9(9)",
portion
"1."
[see
correctly:
forever,
0.1(6)
<nonrepeatingpart>.length
0.999999999...
<repeatingpart>.
(nonrepeatingpart)
0.166(66).
0.52525252525.....
conventionally
<integerpart>,
2.12,
"0.1666(6)",
<integerpart>.length
link
"0.(52)",
1.(9),
<nonrepeatingpart>,
"0.(52)"
<integerpart><.><nonrepeatingpart>
"0.5(25)"
<integerpart>
(integerpart)
0.52525252...,
123.0001.
0.1666(6)
0.16666666...
"arrazfif"
uppercase.
"abcdefghijk"
grid[row][col]th
configuration,
configuration.
8th
[[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]
[[0,3,6],[5,8,1],[2,7,4]]
querycharacters
querycharacters.length
"bbbbcc".
"babacc",
queryindices.length
"bbbacc".
"abyzz",
queryindices[i]
"abazz".
[3,3,4]
queryindices
lengths[i]
[3,3,4].
"aaazz".
"bbbccc".
querycharacters[i].
boomerang.
[[1,1],[2,2],[3,3]]
[[1,1],[2,3],[3,2]]
northwest
(rstart,
[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
[[0,0],[0,1],[0,2],[0,3]]
rstart
eventually,
southeast
cstart)
grid's
cstart
boundary,
later.).
whenever
underlined:
"yo|uar|e**|b|e***au|tifu|l"
excluded
"iamprogrammer"
forth.
"l|*e*et|c**o|*de|".
"yo|uar|e**|b|e***au|tifu|l".
"l|*e*et|c**o|*de|"
lower-case),
hello"
(upper-case
"blue
example"
sky
blue"
"world
a"
the"
allowed[i].length
pleasing,
three-letter
beneath
(level
["bcc","cde","cea","fff"]
(left)
(right)
["aab","aac","bcd","bbe","def"]
patterns
"bcc",
bottom.length
possibilites,
"cea".
block.
pyramid.
aesthetically
"ce"
stone's
bobvalues[i]
alicevalues
plays,
alice.
alicevalues[i],
bobvalues
bobvalues.
alicevalues[i]
bobvalues.length
alicevalues.length
differently.
[1,6,7]
draw.
other's
(2,5)
[1,2,3,1,1,3]
doctor
doctor.
candytype.length
noticed
candytype[i].
even).
candytype
candytype[i]
advice.
doctor's
much,
advised
[6,6,6,6]
[1,10,4,3,null,7,9,12,8,6,null,null,2]
[10,4]
[5,9,1,3,5,7]
even-odd,
[12,8,6,2]
[5,4,2,3,3,7]
even-odd
[3,7,9]
even-odd.
eliminated.
thrid
[x,2,3].
monster
[x,0,2],
[1,1,2,3],
[x,0,1,2],
loss,
lose,
monster.
defending
charged
monsters.
[x,x,2].
dist[i],
charged,
weapon.
[1,1,2,3].
[1,3,4],
charge.the
weapon
(8,6,10).
(a,b,c)
(4,3,5).
(6,8,10),
(3,4,5),
c2.
(4,3,5),
orders[i]=[customernamei,tablenumberi,fooditemi]
"water"
burrito","beef
“table”,
restaurant's
waffles".
burrito"],["melissa","2","soda"]]
"ceviche"
,0
specifically
chicken"],["ratesh","12","fried
header
table”
,1
[["james","12","fried
corina
brianna
[["david","3","ceviche"],["corina","10","beef
chicken",
james,
[["table","canadian
tablenumberi
"fried
waffles","fried
[["laura","2","bean
fooditemi.length
table,beef
chicken","water"],["3","0","2","1","0"],["5","0","1","0","1"],["10","1","0","0","0"]]
chicken"],["1","2","0"],["12","0","3"]]
table”.
burrito"],["jhon","2","beef
rous
waffles"]]
,2
"ceviche".
carla
amadeus
at,
customernamei
ratesh
chicken"],["amadeus","12","fried
fooditemi
burrito"],["david","3","fried
chicken"],["carla","5","water"],["carla","5","ceviche"],["rous","3","ceviche"]]
adam
chicken"],["adam","1","canadian
customernamei.length,
displaying
chicken".
“display
waffles"],["brianna","1","canadian
burrito","soda"],["2","1","1","1"]]
"beef
burrito","ceviche","fried
chicken,water
numerically
[["table","beef
burrito,ceviche,fried
[["table","bean
burrito".
"canadian
1's)
"1100",
occur.
0's:
"00110011"
oranges.
6/2
oranges,
2*(9/3)
kitchen
2*(3/3)
dst
src,
flights.length
cheaper
flights[i]
flights[i].length
[[0,1,100],[1,2,100],[0,2,500]],
flights.
src
700
[[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]],
route,
dst,
4x.
four,
child's
[5,1,4,null,null,3,6]
splits,
o(s2.length)
s3.length
"aabcc",
t3
tm
interleave
|n
"dbbca",
"aadbbcbcac"
s3,
"aadbbcbcac".
"dbbc"
"aadbbbaccc"
o(log(arr.length))
[0,10,5,2]
[0,2,1,0]
nextcoursei
taking.
prevcoursei,
relations[i]
(n-1)
[[2,1],[3,1],[4,1],[1,5]],
prevcoursei
courses.
[[2,1],[3,1],[1,4]],
nextcoursei.
course.
relations[i].length
semester,
nextcoursei],
semester.
nextcoursei]
relations.length
nextcoursei:
[prevcoursei,
semesters
["zzyx"].
"xzzy"
"zzyx".
"xyzz".
group).
"zzxy"
["xyzz",
["abcd","cdab","cbad","xyzz","zzxy","zzyx"]
"zzxy"]
"xyzz"
["abc","acb","bac","bca","cab","cba"]
equivalent,
these.
"cbad"],
"cdab",
[[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]
[3,0,2,6,8,1,7,9,4,2,5,5,0]
[[0,1,2,-1]]
(clockwise),
presented
[4,2,3,0,3,1,2],
[3,0,2,1,2],
stand,
$10,
bill.
$5.
bills[i]
bills.
$20
[5,5,5,10,20]
$5,
pays,
[5,5,10,10,20]
bills).
bills
bills.length
[2,6,7,5,4,0,1,3]
p[i]
(0,1,2.....,2^n
(010,110,111,101,100,000,001,011).
p[2^n
p[i+1]
[3,1,0,2]
(11,10,00,01).
-1)
p[0]
signfunc(product).
signfunc(-1)
[-1,1,-1,1,-1]
[-1,-2,-3,-4,3,2,1]
144,
[1,5,0,2,-3]
signfunc(0)
signfunc(x)
signfunc(144)
grid[i][n
[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
[[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]],
1][0].
grid[0][0].
[[9,1,2],[3,4,5],[6,7,8]]
subtrees,
[2,2,2,3,null,3,null]
[1,2,3,4,null,2,4,null,null,4]
5000]
[[2,4],[4]]
[[2,3],[3]]
"ba".
s1.
s2:
1-similar
2-similar
"bca".
k-similar.
went
cherry.
collected.
cherry,
(cells
grid[n
[[0,1,-1],[1,0,-1],[1,1,1]]
[[0,1,-1],[0,0,-1],[0,0,0]].
thorn
[[1,1,-1],[1,-1,1],[-1,1,1]]
"thequickbrownfoxjumpsoverthelazydog"
pangram,
"j"
mapping.
"10#11#12"
'9')
('j'
"11#"
"1326#"
"10#"
"jkab"
'26#')
'i')
"acz"
('10#'
1500
+----+------+-----+--------+
tables.
statement,
5500
('m',
a)
temporary
versa)
sex
(8-5)
(5-5)
size-8
supply).
[[12],[11,9],[10,5,14]]
package.
size-4
[[1,4],[2,3],[3,4]]
size-10
sum(boxes[j].length)
suppliers
boxes[j]
(14-11)
(10-10)
size-5
(5-3)
[4,8],
packages,
size-14
size-8.
boxes[j][k]
supplier
[[4,8],[2,8]]
(4-3)
(10-8)
boxes[j].length
supplier,
(14-12)
size-3
size-2
packages.length
packages[i]
(4-2)
produces.
[3,5,8,10,11,12],
y2)2).
sqrt(10),
sqrt(10).
sqrt(8).
sqrt(8)
(y1
âˆš(x1
[[1,3],[-2,2]],
(-2,
[[-2,4],[3,3]]
[[3,3],[-2,4]]
x2)2
[[-2,2]]
[[-2,2]].
[[3,3],[5,-1],[-2,4]],
in).
homes,
nums[2])
homes.
houses:
robbed.
refuses
steals
capability
stashed
nums[4])
max(nums[1],
nums[3])
robber,
[2,7,9,3,1],
[2,3,5,9],
houses.
1)/2
steal
(nums.length
max(nums[0],
getinputs();
...b});
({...a,
memoize(fn);
(const
memoized(...arr);
fn().
[[{},{}],[{},{}],[{},{}]]
accepts.
getinputs
cache-hit.
inputs)
[{"val":4,"calls":1},{"val":4,"calls":1},{"val":3,"calls":2}]
[{"val":{},"calls":1},{"val":{},"calls":1},{"val":{},"calls":1}]
fn()
cache-hits,
nan
[{"val":{},"calls":1},{"val":{},"calls":2},{"val":{},"calls":3}]
[[o,o],[o,o],[o,o]];
[[2,2],[2,2],[1,2]]
[2,6,4,1]
[5,7,23]
odds.
[1,2,34,3,4,5,7,23,12]
date[4]
31th,
date[7]
date[i]'s
"2019-01-09"
1900
gregorian
"2019-02-10"
date.length
serialize
"9,3,4,#,#,1,#,#,2,#,6,#,#",
encounter
"9,#,#,1"
commas
"1,#"
"9,3,4,#,#,1,#,#,2,#,6,#,#"
"1,,3".
sentinel
[[-1,-1,2],[-1,0,1]]
[-1,0,1,2,-1,-4]
nums[k]]
[-1,-1,2].
[2,4,6].
[2,2,2,2,2,2].
[1,13,10,12,31]
31).
[1,13,10,12,31,1,31,1,21,13].
[73,74,75,71,69,72,76,73]
[30,60,90]
[1,1,4,2,1,1,0,0]
temperatures,
temperatures.length
temperature.
temperatures[i]
[30,40,50,60]
warmer
mycalendarthree.book(5,
mycalendarthree.book(50,
events.)
mycalendarthree();
mycalendarthree
endtime),
k-booking
mycalendarthree()
mycalendarthree.book(10,
["mycalendarthree",
mycalendarthree.book(25,
quantity.length
quantities,
quantity[i]
["bar","foo","the"]
["bar","foo"]
"efabcd",
"barthefoo".
"acdbef"
["foo","bar","the"]
["bar","the","foo"]
"efcdab"
["foo","bar"]
["ab","cd","ef"],
["the","foo","bar"]
"foobar".
"wordgoodgoodgoodbestword",
"foobarthe".
concatenated.
"thefoobar".
fine
[0,9]
"abcdef",
[6,9,12]
"cdabef",
"barfoothefoobarman",
"barfoofoobarthefoobarman",
"abefcd",
"barfoo".
"cdefab",
[9,0]
["word","good","best","word"]
re-ordering
"abccbaabccba"
"art"
"rat"
"aabbcc"
"aaaabbbbcccc"
"abccbaabc"
[2,1,2,6]
[-2,-4,2,4]
[3,1,3,6]
[-2,-4]
[2,4,-2,-4].
len(arr)
arr[2
[4,-2,2,-4]
(2nd,
(odd-numbered),
arr[2].
[arr[2],
[10,13,12,14,15]
6th,
arr[4]]
(1st,
[arr[1],
manner,
arr[2],
[5,1,3,4,2]
(even-numbered),
jumps,
arr[1].
numbered,
...),
arr[0]),
already.
arr[3],
deduce
[arr[3],
even-numbered
(customer_id)
2019-01-09
80)/7
142.86
840
analyze
jaze
visited_on
2019-01-08
before).
+--------------+--------------+----------------+
2019-01-05
122.86
(100
jade
visited_on)
(130
860
(customer_id,
jhon
2019-01-10
2019-01-06
(110
110)/7
2019-01-03
(120
average_amount
2019-01-02
2019-01-04
150)/7
anna
2019-08-09
2019-08-12
+-----------------------------+---------+
immediate_percentage
scheduled.
delivery_id
2019-08-22
immediate;
2019-08-21
2019-08-11
+----------------------+
2019-08-24
precisely
(on
2019-08-13
customer_pref_delivery_date
immediate.
it).
50.00
+-------------+-------------+------------+-----------------------------+
stickers.length
sticker
"example"
stickers,
stickers[i].length
["notice","possible"],
"thehat"
stickers[i]
"with"
stickers.
"thehat".
["with","example","science"],
"basicbasic"
sticker.
ryan
grammar:
{x}.
"{{a,z},a{b,c},{ab,z}}"
(notice
r("{a,b}{c,d}")
...})
"abefg",
e2)
"abdfh",
r(expr)
ek
r("{a,b,c}")
examples:
["a","ab","ac","z"]
represents.
r(e2)},
{"a"}
"{a,b}{c,{d,e}}"
r(e1)
r("{{a,b},{b,c}}")
understood
{"a","b","c"}
"acdfh",
comma-delimited
{"w"}
"acdfg",
r(e1
cartesian
"abefh",
r("w")
singleton
"acefg",
r({e1,
concatenation,
["ac","ad","ae","bc","bd","be"]
r("a{b,c}{d,e}f{g,h}")
r(e2)
once)
{"ac","ad","bc","bd"}
"acefh"}
r("a")
','or
∪
grammar,
{"abdfg",
r(x)
squaring,
[-7,-3,2,3,11]
[-4,-1,0,3,10]
[16,1,0,9,100].
approach?
[0,1,9,16,100]
[4,9,9,49,121]
squaring
[0,1,9,16,100].
sorting,
stone),
4;
array].
algorithm's
[1,1,1,2,2,3],
[1,4,7,3,2]
mountain.
[2,1,4,7,3,2,5]
weirdly
wants.
109)
min(sum(inventory[i]),
[3,5],
inventory[i]
inventory.
balls,
inventory,
inventory
customer).
inventory.length
own.
"ea".
"etco"
forbidden,
forbidden
forbidden.
forbidden[i]
[8,3,16,6,12,20],
forbidden[i],
[1,6,2,14,5,17,4],
bug
home.
forbidden.length
bug's
[14,4,18,1,15],
(cannot
person_name
kilograms.
+-----------+-------------+--------+------+
turn=1
(last
350
folowing
simplicity.
175
cena
turn=n
board)
kilograms,
person_id
marie
___
+------+----+-----------+--------+--------------+
[4,2,5,5,3],
[4,1,5,20,3]
[1,2,3,2].
[2,2,3,2],
[2,10,8]
[2,2,3,4].
17)
tracking
true,(every
partially
14);
removerange(int
despite
queryrange(int
rangemodule.queryrange(13,
rangemodule.removerange(14,
addrange,
rangemodule.queryrange(10,
["rangemodule",
"queryrange"]
"removerange",
17]]
rangemodule.queryrange(16,
rangemodule.addrange(10,
"addrange",
operation)
14],
tracked,
removerange.
tracked
addrange(int
rangemodule();
queryrange,
[14,
false,(numbers
rangemodule
14.03,
"queryrange",
tracked)
tracked.
rangemodule()
14.17
17);
[10,1,1,6]
[4,2,4,2,3]
price[0]=8
prices[3]=2,
prices[1]=4,
prices[j]
price[1]=4
[9,0,1,6]
[8,4,6,2,3]
price[2]=6
[[1,3],[2,0],[5,10],[6,-10]],
points.length.
[[0,0],[3,0],[9,2]],
x-values,
[0,4,3,0,4]
york","lima"],["lima","sao
[["a","z"]]
york"
york"],["new
"sao
citybi.length
citybi]
paulo".
cityai
loop,
citybi.
"london"
"lima"
paulo"
"new
citybi
paulo"]]
[["london","new
cityai.length,
[cityai,
clearly
[["b","c"],["d","b"],["c","a"]]
lon)
2015
lon
investment
policyholders,
fail,
tiv_2016
lat
who:
tiv_2016,
+-----+----------+----------+-----+-----+
longitude
records,
policyholder
criteria.
unique).
latitude
policyholder's
pid
tiv_2015
insurance
policyholders
policy
(lat,
holder's
45.00
2016.
min(26,
minsize
(between
maxletters.
s.length)
maxsize).
maxletters
"aababcaab",
[2,1,5,0,4,6]
nums[k].
"adobecodebanc",
"banc"
duplicates)
window.
grid1[i].length
[[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]],
grid1.length
grid1
water)
grid2.
[[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
sub-island.
vertical).
grid2[i][j]
grid2
[[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
sub-island
grid1[i][j]
land).
grid2[i].length
sub-islands.
grid2.length
[[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]],
[1,null,2,2]
recursion
mode(s)
mode,
count).
(assume
maxdepth
unflattened
flattening
array.flat
sub-array.
15]]
n=0
n=0.
flattened.
barcodes[i].
barcodes[i]
barcodes,
[2,1,2,1,2,1]
barcode
[1,1,1,1,2,2,3,3]
barcodes.length
[1,3,1,3,1,2,1,2]
[1,1,1,2,2,2]
[4,2,7,1,3,5]
[40,20,60,10,30,50,70,null,null,25]
[40,20,60,10,30,50,70],
[4,2,7,1,3,null,null,null,null,null,null],
shelf.
shelfwidth.
books.length
[[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]],
shelf,
bookshelf
books,
books.
[[1,3],[2,4],[3,2]],
shelf
[thicknessi,
thicknessi
thickness
books[i]
shelfwidth,
shelfwidth
extracandies
extracandies,
[2,3,5,1,3],
[12,1,12],
kids.
has,
kids,
[true,true,true,false,true]
[true,false,false,false,false]
kid
[4,2,1,1,2],
t=300,
300ms,
t=400,
pending
promisepool
[[300,400,200],400]
[[300,700,900],900]
t=900,
resolves.
500ms
900ms.
900ms
functions[i
200ms
[[300,400,500],500]
promisepool.
t=500,
700ms,
resolve.
resolves,
series.
functions[i]
available),
300)),
500ms.
reject.
400)),
400ms,
t=700,
[1,2,2,1,1,3]
occurrences,
[-3,0,1,-3,1,1,1,-3,10,0]
[3,2,2,4,3],
[4,3,2,6,2,3,4],
[3]).
([3]
[7]),
sub-arrays,
[7,3,4,7],
([7],
multiplications.
"real+imaginaryi"
[-100,
"1+1i"
i2
"1+1i",
0+2i.
"1+-1i",
-2i,
"0+2i"
2i,
"1+-1i"
"0+-2i"
0+-2i.
imaginary
time[j])
[60,60,60]
40):
time[3]
60:
150):
(time[i]
time[2]
100):
time[4]
[30,20,150,100,40]
(time[1]
(time[0]
[-1,0,3,5,9,12],
[1,2,3,4,4]
[3,6,5,1,8]
(maximum
[1000000,1000000,1000000],
999999
[l,r]
[9,12,3,7,15,8,0,3,7,0,0,3,0,0,0].
target|.
target|
[1,2,4,8,16],
func.
999999.
[9,12,3,7,15],
[[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]],
|func(arr,
1000000,
"!?',;.".
["hit"]
"a.",
banned[i].length
flew
case-insensitive
paragraph
"bob
non-banned
punctuation
does),
"ball"
hit.",
"ball,"),
paragraph.length
ball,
paragraph.
"hit"
personid.
personid
allen
firstname
lastname
wang
addressid
+-----------+----------+---------------+------------+
california
+-----------+----------+---------------+----------+
+----------+----------+-----------+
[3,4,5,6,7,8]
[2,5,6]
480.
[5,6]
480
[5,1,6]
-42"
reader
(leading
"0032"
non-digit)
caret
atoi
-42
"4193
clamp
4193
in;
whitespace)
(similar
c/c++'s
ignored)
('-'
in)
read,
32).
-42.
negative)
clamped
("42"
("4193"
myatoi(string
4193.
whitespace.
'+')
"000111",
"01000111"
"heeellooo".
feeling.
"hellooo",
stretchy.
"heeellooo"
"hi",
stretchy
"heeellooo",
extend
"helo"]
"zzzzzyyyyy",
"helllllooo"
"hiiii"
"helllllooo",
"hellooo"
applications
extension
"helo"
"hi"
"ooo".
"helloo"
"helllllooo".
"lllll"
["zzyy","zy","zyy"]
{9,15}
[[1,4,5],[1,7,7]]
[[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
[1,7)
simplicity,
endi)
{1,11}
mixed
[1,4)
segments[i].length
segment.
painted).
[8,10)
mix,
[7,8)
24)
[[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
thin
mixj]
[[1,7,9],[6,8,15],[8,10,7]]
{7}
segments,
colori
[leftj,
{5,7}
{5,9}
rightj,
[[1,4,12],[4,7,12]]
mixed,
[6,7)
rather
[[1,4,5],[4,7,7],[1,7,9]]
mixj.
segments[i]
segments.length
[4,7)
rightj)
[1,6)
painting[j]
sake
{2,4,6}.
[[1,4,12],[4,7,7]]
{7,9}
[[1,4,14],[4,7,16]]
colori]
"abcdefghi",
into,
"ghi",
["abc","def","ghi"]
"abcdefghij",
"ghi"
["abc","def","ghi","jxx"]
"jxx".
"def",
"ghi".
[1,2,4,8].
powers.length
powers[j]
[[0,1],[2,2],[0,3]]
powers[0]
powers[1]
powers,
[2,4,64]
powers[3]
powers[2]
"1/2"
["1/2","1/3","1/4","2/3","3/4"]
"2/4"
["1/2","1/3","2/3"]
(exclusive)
"1/2".
["1/2"]
less-than-or-equal-to
emerson
doris
abbot
student.
jeames
[1,3,4,5,8].
[7,4,5,1,8,12,4,7],
[1,3,4,5,8,15]
[4,5,8,12].
[4,2,1,4,3,4,5,8,15],
mht.
(mhts).
mhts'
[[3,0],[3,1],[3,2],[3,4],[5,4]]
min(h))
[[1,0],[1,2],[1,3]]
labels.
"aabbc",
[2,4,9,24,2,1,10]
[2,5,1,3,4]
[2,3,1,5,4]
1]|
2-9
telephone
(just
['2',
buttons)
'9'].
["ad","ae","af","bd","be","bf","cd","ce","cf"]
rxxlrxrxl
xrlxxrrxl
"xl"
xrlxxrrlx
"xrlxxrrlx"
xrxlrxrxl
xrlxrxrxl
"xr".
end.length
"lx",
"rxxlrxrxl",
"rx"
queries[4]:
"abcba"
[[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
queries[3]:
palidrome
replacement,
queries[1]:
"lyb",
ki].
palidrome.
[[0,1,0],[2,2,1]]
queries[0]:
[true,false,false,true,true]
righti,
queries[2]:
s[lefti...righti]
"abcda",
trees)
empid
+-------+--------+------------+--------+
+-------+-------+
+------+-------+
thomas
supervisor
brad
converting,
(base
timepoints.length
["23:59","00:00"]
timepoints
format,
timepoints[i]
["00:00","23:59","00:00"]
time-points
[[-15,1,3],[15,7,12],[5,6,-2]]
[[1],[22],[333]]
[12]],
non-negative,
[[-10],
-15
["xox","o
["o
tic-tac-toe:
o","xox"]
"x".
["xox","
itself),
"121"
"23451"
"12345",
"34852"
"23415"
"84532"
"12435"
"84352"
"84532",
"34521",
"14234"
"12344".
"34521"
[[1,2,3,4]]
wanted
were.
handy
[[1,2],[3,4]],
legal,
matrix;
reshaped
matlab,
data.
row-traversing
border,
[[1,1,0,0]]
customer_number
order_number
+--------------+-----------------+
+-----------------+----------+
("6"
"226"
26),
(12).
"vf"
"06").
zero(s).
"bz"
"bbf"
(22
columnnumber
sheet.
columnnumber,
"lovely"
"here"
perm2
perm1
squareful.
perm2[i].
[1,8,17]
perm1[i]
[17,8,1]
[1,17,8]
"eidboaoo"
("ba").
"eidbaooo"
s1's
131,
backwards
[1111,1331,1551]
queries[i]th
[1,2,3,4,5,90],
1441,
151,
1331,
[101,111,121,131,141,999]
intlength
intlength,
181,
90th
171,
1221,
191,
141,
1001,
1111,
161,
forwards.
"bcfd"
["aabb","ab","ba"]
["nba","cba","dba"]
["aba","aabb","abcd","bac","aabc"]
"abacba"
words[4]
words[3]
[9,19,5,3,21]:
38
mass:
asteroid.
destroys
[3,9,19,5,21]
planet
67
planet.
destroyed.
[4,9,23,4]
asteroids,
destroy
destroyed
[3,5,1,6,2,0,8,null,null,7,4],
[7,4,1]
888
555
".-",
"msg"
[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
transformations:
standard
"-...".
"gin"
"gig"
"-.-.",
"--...--.".
"--...-."
transformations
"-.-..--...",
dashes,
"zen"
"-...",
["gin","zen","gig","msg"]
"--...--."
jumped
azylmaaaaaaaaa
hetmaaaaaaaa
"applema".
atinlmaaaaa"
"hetmaa
ogdmaaaaaaaaaa"
pig
umpedjmaaaaaa
latin.)
speak
oatgmaaaa
latin.
vowel),
"ma".
oxfmaaaaa
"oatgma".
"goat
"imaa
'u'),
"goat"
latin"
uickqmaaa
peaksmaaa
dog"
overmaaaaaaa
"ma"
rownbmaaaa
made-up
consonant
bulb.
(turning
bulbs,
toggle
on].
off].
basket1
basket2
[2,4,1,2].
basket2.
baskets.
[1,4,1,2]
[2,3,4,1],
[4,2,2,2],
min(basket1[i],basket2[j]).
[3,2,5,1]
basket1.length
basket2,
basket1[i],basket2[i]
bakste2.length
[4,1,2,2]
(0,2,2),
(2,4,4)
[2,3,1,6,7]
(2,3,4)
high].
descendant).
[1,0,2],
[3,2,null,1]
bounds.
[3,0,4,null,2,null,null,1],
depending
mat[1][2]
(rows
[[1,0,0],[0,0,1],[1,0,0]]
[3,3,3,3,3],
[7,6,5,4,3,2,1],
[6,4,14,6,8,13,9,7,10,6,12],
j)).
min(i,
jumping.
max(i,
indicies.
[6,0,8,2,1,5]
[9,8,1,0,1,9,4,0,4,1]
nums[9]
5):
9):
subordinates'
leader
information,
[[1,2,[5]],[5,-3,[]]],
employees[i].importance
employees[i].id
employees.length
indirect
subordinates:
employees[i].subordinates
[[1,5,[2,3]],[2,3,[]],[3,3,[]]],
https://leetcode.com/problems/minimum-distance-between-bst-nodes/
783:
dominoes[i][j]
d),
dominoes[j].
[[1,2],[2,1],[3,4],[5,6]]
[[1,2],[1,2],[1,1],[1,2],[2,2]]
dominoes[i].length
dominoes[j]
dominoes.length,
dollars,
costs[1]
[1,4,6,7,8,20],
$17
[1,2,3,4,5,6,7,8,9,10,30,31],
30-day
costs[0]
1-day
365
365.
costs[2]
plan:
$7,
7-day
[2,7,15]
planned
[5,-1,4,4,-6,-6,1,1,1]
[-1,1,-6,4,5,-6,1,4,1]
[2,3,1,3,2]
frequency,
[1,3,3,2,2]
[3,1,1,2,2,2]
"babad"
a@b.com
c@d.com
"5323"
post
"24".
"2454"
cycled
"0190"
"6345".
"2151"
"2353"
"0158"
"5222"
"47"
"74",
add:
"3951".
rotate:
"5525"
"2555"
"0011"
"2050".
"5121"
start:
"0011".
"74"
"2050"
"3456"
"5525",
"9534330"
[10,2]
[3,30,34,5,9]
y2],
[0,0,1,1],
rec2,
touch
rec2[i]
[0,0,2,2],
rec1.length
[2,2,3,3]
rec2
rec2.length
rec1
rec1[i],
0111
0111.
10111,
010.
000
shown)
011
000.
010
f(n)
f(0)
f(2)
f(4)
f(n).
f(n
f(1)
commonly
(s
removable[i]
"abcbddddd"
"abcacb"
removable.length
removable,
s[removable[i]]
"accb".
"abcbddddd",
"abcddddd".
"abcacb",
[3,2,1,4,5,6]
"ccb",
removable.length)
1st:
3rd:
"rrddlu".
up),
[1,5,4,3,1,0]
"lurd".
"rd".
2nd:
4th:
"rddlu".
"d".
startcol).
(startrow,
"ddlu".
[4,1,0,0]
"dlu".
"urd".
"lu".
5th:
startcol]
0th:
instruction:
"rrddlu"
"lrud"
"lurd"
robot:
startcol
(move
startpos.length
cost[i].
[2,3,1,14]
[4,2,8,1,3]
[1,3,5,2],
[6,2,3],
stonevalue
[6,2,3,4,5,5]
[4,5,5].
["00",
"9080701"
["0",
"089"]
"3"]
"1"].
"004",
"050043"
["05",
[0,0,1]
[90,89].
"1234"
["0090",
"01"],
"1"],
"0090089"
043
[181,292,707,818,929]
02
[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]
070
executives
department:
earners
second-highest
69000
randy
85000
seeing
earner
third-highest
janet
[3,2,1,6,0,5]
[3,null,2,null,1]
[0,5].
[6,3,5,null,2,0,null,null,1]
together:
[1,1,0,0,0,0,1]
[0,1,0,1,1,0,0]
[0,1,1,1,0,0,1,1,0]
[0,0,1,1,1,0,0]
[1,1,1,0,0,0,0,1,1]
[1,1,1,1,1,0,0,0,0]
[1,1,0,0,1]
[0,1,1,1,0,0,0]
[1,2,2,6,6,6,6,7,10]
wiki.
[[0,0],[1,1],[1,1],[1,1],[1,0]]
isleaf
bottomleft;
[[0,1],[1,1],[1,1],[1,0],[1,0]]
2x
recurse
1*1.
val;
illustration,
quadtree2
isleaf;
matrixes
besides,
quadtree2.
quad-tree,
input/output
topleft;
quad-tree.
quad-tree
terminator
[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
sub-grids
1*1
quadtree1
isleaf:
sub-grid.
[isleaf,
topright;
val].
bottomright;
val:
0's)
[[0,1],[1,2],[2,3],[2,4]]
vals[2]
[1,3,2,1,3],
4.)
[[0,1],[0,2],[2,3],[2,4]]
vals[0].
b2,
'bcb'
"bccb"
'bccb'.
"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
a1,
'bcb',
'bb',
104860361
3104860382
b1,
'cc',
"5489355142",
"5489355421"
"00132"
"00123",
"5489355142"
8:
"11211"
"11112",
"5489355412".
"00123"
"5489355412"
"11121"
"21111".
"5489355142":
"5489355241".
"12111"
smallest-valued
"21111"
"5489355214".
"00132".
"11112"
"5489355421".
"getkthancestor",
["treeancestor",
treeancestor.getkthancestor(6,
treeancestor.getkthancestor(3,
parent)
treeancestor(int
treeancestor(7,
getkthancestor(int
ancestor,
treeancestor
treeancestor.getkthancestor(5,
"getkthancestor"]
[1,3,6,10,15]
[[-14,-10],[19,23],[23,27]]
order(with
[3,8,-10,23,19,-4,-14,27]
pairs),
mat[i]
[[1,10,10],[1,4,5],[2,3,6]],
mat.length[i]
[1,5,3].
nm)
[3,4],
[[1,3,11],[2,4,6]],
[1,1,3],
[1,1,2],
[1,5,2],
[1,3,2,4]
[1,6,3,3]
arr2[j].
[4,3,1]
[1,5,3,6,7],
13...
12...
109].
10...
[1,2,3,4,5,6].
min(0,
[1,2,3,5,6].
[1,2,3,3,3,4].
[1,2,3,6,5,4]
[1,3,3,3,2,4,2,1,2]
[1,1,2,2,3,3,3,4].
[1,5,6,2]
[1,3,3,3].
instructions[i].
[1,2,3,3,5].
[1,5,6].
[1,2,2,3,3,3,4].
[1,2,3,6].
(elements
[1,2,5,6].
[1,1,2,2,2,3,3,3,4].
terminates:
matches[i]
[4,5,7,8].
loseri]
defeated
[1,2,5,6]
winneri
[[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
matches[i].length
[[1,2,5,6],[]]
[[2,3],[1,3],[5,4],[6,4]]
matches.length
[1,2,10]
winneri,
outcome.
[winneri,
[[1,2,10],[4,5,7,8]]
loseri
[100,100,100]
[37,12,28,9,100,56,80,5,12]
[5,3,4,2,8,6,7,1,3]
[40,10,20,30]
"shall
to",
maxwidth
symbols.
maxwidth,
"do
text",
"text",
"enough
maxwidth.
["what","must","be","acknowledgment","shall","be"],
justified.
pad
"justification."],
"example",
is",
left-justified
we",
well",
["this",
"acknowledgment
"an",
"justification.
fully-justified.
explain
art
be",
["science","is","what","we","understand","well","enough","to","explain","to","a","computer.","art","is","everything","else","we","do"],
"science
left-justified,
"everything
greedy
an",
approach;
pack
"understand
degree:
50,000.
[2,2,3,1,4,2]
49,999.
[1,2,2,3,1]
[1,2,2,3,1,4,2]
meet.
meet,
[5,10,-5]
[8,-8]
collisions.
-5
exploding
(positive
[10,2,-5]
explode.
-5.
numarray([1,
numarray.update(1,
update(int
"update",
("s","s","s","s","s","s").
"ssssss"
("a","ba","cab","a")
("ab","a","ca","ba").
s[x..y],
["d","bb","cc"]
["d","abba","cc"]
we'd
"ef"
"ef",
"abbaccd"
["e","f","ccc"]
s[i..j]
"adefaddaccc"
"adefadda",
direction)
sidelengthi
[100,
drop,
brushing
(negative
landed
landing
[100,100]
brushes
moved.
[2,5,5]
freezes
sidelengthi]
left/right
[[100,100],[200,100]]
dropped,
lands,
[[1,2],[2,3],[6,1]]
nums2[1].
[2,5,1,6].
[8,0,7,2,11,3,4,1,9,1,6,3].
[10,2,5,0]
nums3.
nums2[0],
nums3,
xors
nums2[1],
nums3
delete,
edges[i][0],
component.
[6,2,2,2,6],
edges[i][1]
[[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
[1,4,2,7,5,3,8,6,9]
[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
"10110".
"10110"
"1000".
distances,
"101".
[[1,1,1],[1,1,1],[1,1,1]],
[[1,3,3],[2,3,3]]
[[3,3],[3,2]]
component,
col,
[[1,1],[1,2]],
[[1,2,2],[2,3,2]],
"(()())(())"
concatenation.
"(()())(())(()(()))",
nonempty,
"(()())(())(()(()))"
"(())()",
nonempty
"(()())(())",
pk,
"()()()()(())".
"()()()"
decomposition:
"(())".
"()()()".
"()()()()(())"
"()(())"
"(()(()))".
"(()(()))"
1800
81,
retained.
12300
526,
reversed2
625,
reversed1,
2021
526
reversed2.
reversed1
625
81
enqueuetimei
{0}.
enqueuetimei,
started,
instantly.
{1}.
{0,1}.
[[7,10],[7,12],[7,5],[7,4],[7,2]]
{0,1,2,3}.
{}.
[[1,2],[2,4],[3,2],[4,1]]
{0,1,2,3,4}.
processingtimei]
{0,1,2}.
[enqueuetimei,
act
[4,3,2,0,1]
processing.
processingtimei
stopping.
processing
a[l],a[l+1],...,a[r]
[5,2,1]
[1,2,5].
[5,2,1,2,5,2,1,2,5]
[4,2,4,5,6]
[2,4,5,6].
(l,r).
children)
|0-0|
|(3+5+2)-(9+7)|
[4,2,9,3,5,null,7]
tilt.
|10-16|
|0-7|
[21,7,14,1,1,2,2,3,3]
3;
"dd",
"bcbddxy"
"abcbdd"
"loonbalxballpoon"
"nlaebolko"
"balloon"
bstiterator([7,
20]],
initializing
(bst):
bstiterator.next();
bstiterator.hasnext();
bstiterator(treenode
20]);
[[[7,
o(h)
tree?
pointer,
["bstiterator",
non-existent
hasnext,
bstiterator
dungeon[i].length
power-ups,
laid
valiant
imprisoned
dungeon.
orbs
rightward
princess.
demons
upon
decides
princess
integers).
health
rescue
integers),
rooms;
fight
quickly
[[-2,-3,3],[-5,-10,1],[10,30,-5]]
imprisoned.
right->
dungeon.length
dungeon[i][j]
threats
pseudocode:
nestediterator
nestedlist
[1,4,6]
[[1,1],2,[1,1]]
nestedlist.length
[-106,
nestedlist.
[1,1,2,1,1].
106].
[1,[4,[6]]]
iterator.hasnext()
[1,4,6].
iterator.next()
hasnext
nestediterator(list<nestedinteger>
tested
nestedlist)
[1,1,2,1,1]
candidates,
[[2,2,2,2],[2,3,3],[3,5]]
[[2,2,3],[7]]
candidate,
x|
|a
|b
x|,
https://leetcode.com/problems/minimum-absolute-difference-in-bst/
530:
[1,0],[1,1],[2,1],[2,0],
rectangle,
[1,2],[2,1],[1,0],[0,1],
[[0,3],[1,2],[3,1],[1,3],[2,1]]
[[0,1],[2,1],[1,1],[1,0],[2,0]]
[[1,2],[2,1],[1,0],[0,1]]
[5,2,2,4,0,6],
[2,2,4,0,6].
[4,0,6].
[2,4,0,6].
[5,4,0,6].
(1,0).
xcenter
(radius,
y2),
ycenter)
xcenter,
ycenter
[-1,-2,-3],
[10,2,-10,5,20],
[10,-2,-10,-5,20],
20].
cookies.length
[8,15,8]
[8,15,10,20,8],
unfairness
[6,1,3,2,2,4,1,2],
max(31,30)
[6,1],
max(7,7,7)
[6,1]
cookies[i]
cookies,
cookies.
distribution.
[50,10,40,70]
you're
[3,5,10,6,9],
[1,2,3,4,6],
endtime[i],
profit[i].
[20,20,100,70,60]
[3,4,5,6],
[1-3]+[3-6]
(0,1,1)].
(3,0,1),
arr[k])
(arr[i],
arr[j]|
[(3,0,1),
arr[j],
(3,1,1),
[3,0,1,1,9,7],
arr[k]|
triplets:
[8,9].
clips.length
[6,9].
[1,9];
time].
[4,7],
[8,10],
lasted
clips
[2,8]
freely.
[1,9]
clips[i]
clips.
clip
sporting
[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]],
[8,10]
[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]],
[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
probably
idea.
straightforward
improvement
o(mn)
thon"
"icodeinpython".
"leetcodehelpsmelearn",
"spacing",
helps
"enjoyyourcoffee"
[1,5,7,9]
learn"
spaces[i]
py
spaces.length
g"
"enjoy
"leetcodehelpsmelearn".
coffee".
"icodeinpython",
[8,13,15]
[0,1,2,3,4,5,6]
"flag"
usage
"usa"
capitals
capitals,
"google".
holds:
"usa".
grid:
[1,0,0,0]]
apply.
[0,1,1,0]]
disappear.
hits[i]
coli).
next,
does,
hits.length
[0,0,0,0]]
stable.
falls,
[[1,0,0,0],[1,1,0,0]],
drop.
bricks).
[1,1,1,0]]
erased
stable
hits,
erasures
[1,1,0,0]]
[[1,0,0,0],[1,1,1,0]],
stable,
(rowi,
hits[i].length
favorite,
favorite[i]
favorite.length
invite
[2,2,1,2]
capable
organizing
seating
[3,0,1,4,1]
invited.
beside
98
widths[0]
widths[i]
[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
bbbcccdddaa
klmnopqrst
abcdefghij
widths.length
[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],
uvwxyz
"bbbcccdddaaa"
widths[1]
[3,60]
wide.
pixels.
20000
[[0,0],[4,4]],
grid[1][0]
lamps
square).
lamps.length
grid[rowj][colj].
[[0,0],[0,4]],
lamp
colj].
ans,
grid[4][4].
grid[rowi][coli]
illuminates
lamps,
lamps[i]
lamps[i].length
grid[rowj][colj]
rowj,
illuminated,
[[0,4],[0,1],[1,4]]
illuminated
[1.00000,4.00000,2.18182,2.00000,1.00000]
count[i]
minimum:
[1,1,1,1,2,2,2,3,3,4,4].
2.18181818...
statistics:
mode:
mode].
(1+1+1+1+2+2+2+3+3+4+4)
255].
maximum:
median:
maximum,
count.length
(1+2+2+2+3+3+3+3)
sample.
sample,
median,
count[k]
2.375.
[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
[minimum,
2.18182).
mean,
sum(count)
[0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
mean:
[1,2,2,2,3,3,3,3].
purposes,
[1.00000,3.00000,2.37500,2.50000,3.00000]
[1,2,3,5,2],
[3,0,0,0,0,2]
[3,0,0,0,0,2],
grew
apples.length
[3,2,1,4,2]
fouth
away).
apples,
apples:
rot
eaten.
apples[i]
apples[i],
doctors
rot.
self-loops).
[[4,3,1],[3,2,4],[3],[4],[]]
[[0,1,3],[0,2,3]]
[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
[[1,2],[3],[3],[]]
graph[i][j]).
dag.
(dag)
land)
[[0,0,0,0,0,0,0,0]]
vertical.)
[[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
('timeout').
00:00:00
14:00:00
2020-07-29
10:39:37
'timeout')
10:16:13
confirming
confirmed.
2021-06-14
2021-07-14
2021-06-12
03:30:46
23:59:59
2021-02-28
('confirmed')
signups
'confirmed'
13:57:59
timed
0.50
signup
0.5.
('confirmed',
2021-01-22
23:09:44
confirmation_rate
0.00
12:58:28
timeout
confirmed
13:59:27
out.
2020-01-04
11:57:29
+---------+-------------------+
1.00
2021-06-13
expired
2020-03-21
confirmations
+---------+---------------------+-----------+
version2's
version2.length
version2.
version2
version1.length,
version1
"1.01",
2.5.33
0.1
1.1
revisions
version2,
"1.0.0"
1.0
revision
001
"1.1"
"0.1",
version1's
"1.001"
[5,7,10],
[[0,5,0],
colsum[0]
sum(colsum)
[3,5]]
column:
colsum[1]
rowsum[0]
[6,1,0],
rowsum.length,
fulfills
[[1,2],
rowsum[i],
rowsum[1]
rowsum
rowsum[i]
[2,0,8]]
rowsum.length
[3,8],
[1,7]]
sum(rowsum)
[[3,0],
colsum[j]
[8,6,8]
[1,2,4,7,8],
(working
jobs.length
11)
assignment.
jobs[i]
[3,2,3],
"draw"
[[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
[[0,0],[2,0],[1,1],[2,1],[2,2]]
"draw".
moves[i].length
[[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
b).
toe.
"pending".
tic-tac-toe),
grid[rowi][coli].
"amy"
"artro"
"mu"
"ooo"
["are","amy","u"],
"are"
"aeo"
["hey","aeo","mu","ooo","artro"],
"u"
"l",
"t",
countuniquechars(t)
countuniquechars(s)
"a","b","c","ab","bc"
countuniquechars("aba")
carpets,
carpetlen.
floor[i]
"10110101",
numcarpets
floor.length
[0,1,1,2,1,3,2,3],
rules,
max(0,1,1,2)
max(0,1,1)
nums[(1
nums[(3
max(0,1,1,2,1,3,2,3)
[0,1,1,2].
nums[(2
[2,4,8,16,32,64]
conver
[2,3,7,5,10]
conver[i]
32]
max(arr[0..i])
56
[1,1,2,4,8,16]
16]
[4,10,24,36,56]
nums[0..i].
addtext(string
"deletetext",
"etpractice"
text)
texteditor
["practice"],
"leetpractice|".
texteditor.addtext("leetcode");
cursor.position
cursorright(int
cursorright.
"leetcode|".
"addtext",
(simulating
texteditor.addtext("practice");
"cursorright",
"cursorright"]
"leet|practice".
texteditor.deletetext(10);
texteditor.deletetext(4);
cursorleft
["texteditor",
cursor.
cursor)
texteditor.cursorleft(2);
texteditor.cursorright(3);
texteditor()
"practi"
"practi"]
cursor
o(k)
texteditor();
cursorleft(int
"|".
deletetext(int
call?
cursor,
texteditor.cursorleft(8);
"|practice".
"practi|ce".
"leet|".
"etpractice",
[6]]
addtext,
texteditor.cursorright(6);
currenttext.length
key).
text.length,
len)
"cursorleft",
deletetext,
min(10,
3.85
ranks.
3.65
floating
4.00
+-------+------+
holes
3.50
accounts,
'john00@mail.com',
[["ethan","ethan0@m.co","ethan4@m.co","ethan5@m.co"],["gabe","gabe0@m.co","gabe1@m.co","gabe3@m.co"],["hanzo","hanzo0@m.co","hanzo1@m.co","hanzo3@m.co"],["kevin","kevin0@m.co","kevin3@m.co","kevin5@m.co"],["fern","fern0@m.co","fern1@m.co","fern5@m.co"]]
[["gabe","gabe0@m.co","gabe3@m.co","gabe1@m.co"],["kevin","kevin3@m.co","kevin5@m.co","kevin0@m.co"],["ethan","ethan5@m.co","ethan4@m.co","ethan0@m.co"],["hanzo","hanzo3@m.co","hanzo1@m.co","hanzo0@m.co"],["fern","fern5@m.co","fern1@m.co","fern0@m.co"]]
['john',
accounts[i]
john's
'mary@mail.com'],
"johnsmith@mail.com".
'john_newyork@mail.com',
'johnsmith@mail.com']]
[['mary',
accounts[i][0]
'johnnybravo@mail.com'],
[["john","johnsmith@mail.com","john_newyork@mail.com"],["john","johnsmith@mail.com","john00@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
accounts[i][j].length
[["john","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]
recorddate
2015-01-03
2015-01-02
(yesterday).
(20
+----+------------+-------------+
2015-01-01
2015-01-04
weather
30).
2015-01-04,
2015-01-02,
+----+
dates'
(substrings)
studying
["aaaaaaaaaa"]
dna.
nucleotides
identify
"aaaaacccccaaaaaccccccaaaaagggttt"
10-letter-long
["aaaaaccccc","cccccaaaaa"]
dna,
"acgaattccg"
"aaaaaaaaaaaaa"
couple
row[i]
hands.
(2n
(row[1])
seated
row.length
(row[2])
switch
"baabb"
contiguous.
entirety
negatives.
[4,3,null,1,2]
[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
[-4,-2,-5]
"leetcodeleetcode".
"leetcodeleetcode"
"cabcab".
"bcabca"
shipped
[3,2,2,4,1,4],
(9),
(8),
belt
weights).
conveyor
[1,2,3,1,1],
weights[i].
cargo
"551",
"551".
"51"
"1231",
"12".
"231".
"51".
dailycapi
dailycapi].
candiescount[i]
[[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
favoritedayi
favoritedayi,
[7,4,5,3,8],
[5,2,6,4,1],
favoritetypei
candiescount.length
candiescount
[favoritetypei,
[[0,2,2],[4,2,4],[2,13,1000000000]]
[false,true,true,false,false]
array):
[1,1,1,2,2],
maxvalue
arrays):
[3,3,3,3,3]
[1,3,3,3,3]
[1,2,2,2,2]
[1,1,2,2,2],
[1,1,3,3,3],
[1,1,1,1,3],
[1,1,1,3,3],
maxvalue,
[1,1,1,1,2],
[[1,3],[3,3],[5,3],[2,2]],
rj]
yj,
purple.
yj)
rj
o(n)?
[[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
[[1,1],[2,2],[3,3],[4,4],[5,5]],
rj.
queries[j],
xj,
[[2,3,1],[4,3,1],[1,1,2]]
[2,3,2,4]
(7,
floors.
designated
relaxation
floors,
relaxation.
231-1
2-2
1/4
1024.00000
9.26100
1/22
raised
2.00000,
xn).
2.10000,
-100.0
[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
inverting
[[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
images[i][j]
[[1,0,0],[0,1,0],[1,1,1]]
[[0,1,1],[1,0,1],[0,0,0]].
[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
image:
[[1,1,0],[1,0,1],[0,0,0]]
invert
2019-08-15
+------------+-------+
change_date
new_price
2019-08-16.
2019-08-16
2019-08-17
+------------+-----------+-------------+
change_date)
2019-08-14
2019-08-18
[1,1,3,4,4,4,1,_,_,_].
loc.free(1);
allocator(10);
["allocator",
[1,_,
"free",
loc.allocate(1,
allocator(int
loc.allocate(3,
mid)
block's
3,_,_,_,_,_,_,_].
"allocate",
loc.free(7);
[1,_,3,4,4,4,_,_,_,_].
[1,2,3,_,_,_,_,_,_,_].
free(int
[_,_,3,4,4,4,_,_,_,_].
loc
functionalities:
freed.
loc.free(2);
[1,1,3,4,4,4,_,_,_,_].
loc.allocate(10,
allocate(int
"free"]
[1,_,_,_,_,_,_,_,_,_].
[1,2,_,_,_,_,_,_,_,_].
mid.
jump.
[7,6,9,6,9,6,9,7]
[100,-23,-23,404,100,23,23,23,3,404]
arrlen
differents
stay,
arrlen.
arrlen,
[2,9]
fn-2
f2
fn-1
f1
7/3
division's
[1,2,5,9],
(1+1+2+3)
10/2
[44,22,33,11,1],
(1+2+5+9)
(1+1+1+2).
substring).
"1111"
"011101"
"101",
"0111"
"01110"
"abcc",
"fghij"
word2[j].
numzeros
contains:
numzeros,
numones
numnegones
0}.
-1s
numones,
numzeroes
numnegones,
00000010100101000001111010011100
4294967293,
(10111111111111111111111111111111)
00111001011110000010100101000000.
(00111001011110000010100101000000)
-1073741825.
3221225471
43261596,
964176192
10111111111111111111111111111111.
[3,1,4,3,2,2,4],
[4,3,2,2,4]
[3,1,4,3,2,2]
[3,1,4,3,2,2,4]
[1,4,3,2,2,4]
"money"
solvable
'r'->8,
9567
"twenty"
["leet","code"],
'y'->'2'
["six","seven","seven"],
'n'->2,
'v'->7,
's'->
'o'->0,
"seven"
"six"
't'->1,
(words)
'w'->'3',
'e'->5,
10652
138214
"more"
68782
(result).
'x'->0,
'e'->8,
650
'd'->7,
["send","more"],
"point"
'n'->6,
'm'->1,
"send"
1085
'i'->5,
'y'->4
solvable,
result.length
seats[3]),
[1,0,0,0,1,0,1]
seats[2]),
sitting.
seats[i]
[1,0,0,0]
66
odd-length
[1,4,2,5,3]
[2,5,3]
299
332
["hello
messages[i].length
senders.length
messages.length
userthree
senders[i].length
"charlie"
["how
everyone","leetcode
usertwo
senders[i].
userthree"],
practice"],
alice","nice
senders
usertwooo","hi
userthree","wonderful
["bob","charlie"]
chat
["alice","usertwo","userthree","alice"]
messages[i]
charlie.
senders[i]
count,
sender.
"alice".
10001.
[even,
odd].
non-equal
hill
valley.
hill.
valley
valley,
[6,6,5,5,4,1]
[2,4,1,1,6,5]
"sumregion"]
rectangle)
["nummatrix",
nummatrix.sumregion(2,
(row1,
col2).
sumregion(int
sumregion
nummatrix.sumregion(1,
nummatrix
nummatrix(int[][]
nummatrix([[3,
sumregion.
col2)
(row2,
"sumregion",
col1)
[[[[3,
horizontal/vertical
(n-1,
[0,1,1,0,0,0]]
[0,0,0,0,1,1],
down].
n-2)
snake
[right,
[1,1,1,0,0,0]]
(r+1,
counterclockwise
n*n
c).
[0,0,1,0,1,0],
c+1).
[0,1,1,0,0,0],
[[0,0,1,1,1,1],
[1,1,0,0,1,0],
c+1)
[1,1,0,0,0,1],
n-1).
[[0,0,0,0,0,1],
h(x)]
g(x),
fn],
f3,
f(g(h(x))).
identity
f2,
[f(x),
[f1,
(64)
x],
[x
fn(x)
(8)
[18,6,6,6,1,-1]
(18).
(6).
[17,18,5,4,6,1]
[400]
case).
[0,0,0,2,0].
denominations:
"withdraw",
banknotescount.length
[600],
$20,
atm.withdraw(550);
$500
banknotes,
$600
withdrawing,
withdraw
[0,1,0,3,1].
deposits
deposit(int[]
prioritizes
withdraw(int
banknote,
[550]]
$100,
[[0,0,1,2,1]],
handed
$300
$50
atm();
$200,
banknotescount)
[0,1,0,0,1]]
banknote
$500.
["atm",
rejected,
atm.deposit([0,1,0,1,1]);
"deposit",
rejected.
[0,0,1,0,1],
[0,0,1,0,1].
$200
$50,
(do
banknotes.
[0,1,0,0,1].
banknotes
banknote.
modified.
atm()
deposit
"withdraw"]
atm.withdraw(600);
$100
banknotescount[i]
deposit.
[[0,1,0,1,1]],
atm.deposit([0,0,1,2,1]);
withdrawing.
$500,
unit)
obviously
wall[i].length
crossed
crossed.
widths.
sum(wall[i].length)
[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
wall.length
wall[i][j]
[[1],[1],[1]]
sum(wall[i])
[1,2,3,0].
[1,0,0,0].
[1,2,0].
num_people
gift).
ans[3]
candies)
[1,2,0,0].
[5,2,3].
[1,2,3,1].
ans[2]
that'll
[1,-2,-3,4]
[-2,-3].
[-1,-2]
[-1,-2,-3,0,1]
[0,1,-2,-3,-4]
[-1,2,1,-4],
(-1
dashes.
"1-23-45
firstly,
"123-456"
digits:
"78".
formatting.
"123-456".
"123-45-67"
"123-45-67".
"123456".
"123-456-78".
"123
4-5678"
joining
"45"
reformatting
"123-456-78"
4-567"
"12345678".
"1234567".
"456".
"67".
6"
swim.
[[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
everywhere
[[0,2],[1,3]]
brokenletters.length
spaces)
"leet
properly.
malfunctioning
brokenletters
keyboard.
"ad"
code",
broken.
"lt"
[1,2,3,3,2,2]
[9,9,6].
hours.length
tiring
hours[i]
(strictly)
[9,9,6,0,6,6,9]
[6,6,6]
non-tiring
node2)
addedge(int[]
edgecosti.
"shortestpath"]
graph(4,
addedge.
g.shortestpath(0,
self-loops
["graph",
g.addedge([1,
edge.length
edgecosti]
g.shortestpath(3,
node2.
3]]);
"shortestpath",
"addedge",
[from,
node1,
3]]],
edgecosti,
shortestpath.
shortestpath(int
edgecost].
graph(int
node1
edgecost
edge)
node2
edges)
sale_date
2019-01-21
unit_price
1400
2800
spring
+-----------+------------+----------+------------+----------+-------+
2019-05-13
2019-06-02
g4
s8
iphone
800
+------------+--------------+------------+
hats.length
hats:
hats[i].length
(1,5)
[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
(1,2,3,4)
hat
hats,
[[3,4],[4,5],[5]]
hats[i][j]
[[3,5,1],[3,5]]
hats[i]
mountainarr,
[1,2,3,4,5,3,1],
mountainarray
circumvent
problem.)
mountainarray.get(k)
submissions
disqualification.
mountain_arr.get(index)
interactive
[0,1,2,4,2,1],
mountainarr.get(index)
mountainarray.get
mountain_arr.length()
index=5.
mountainarray.length()
wrong
arr2.length.
[0,1,2,0,2,1].
and)
[12
u)
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
o,
["a","e","i","o","u"].
66045
deathi]
birthi
[[1950,1961],[1960,1971],[1970,1981]]
1960.
die.
alive
1970.
[[1993,1999],[2000,2010]]
deathi
2050
1960
[birthi,
1950
population.
bar().
print("bar");
foo()
print("foo");
foo(),
"foobarfoobar"
bar()
[2,1,3,4]
[1,5,4,2,3],
[1,3,2,4],
allowedswaps.length
[2,1,4,5],
allowedswaps
positions:
[5,1,2,4,3],
[[0,4],[4,2],[1,3],[1,4]]
allowedswaps[i]
source.
source[i],
[[0,1],[2,3]]
allowedswaps[i].length
[2,-6,7]
[2,1,-2,5],
[-1,-1],
[1,5,3]
[3,-2],
[3,0,-6]
(ie,
[2,-2]
(2*3
[3,-6]
(3*7)
(-2)*(-6))
[[1,3],[0,-4]]
[[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]
[[1,-2,1],[1,-2,1],[3,-4,1]]
"yx",
s2[1],
"yy",
s1[0]
"yy"
"xy",
s1[1]
"xx",
'y'.
s2[j].
"yx"
"yx".
s2[0],
means:
maxjump
minjump
"011010",
"01101110",
fulfilled:
maxjump.
min(i
maxjump,
magicdictionary.builddict(["hello",
search(string
magicdictionary.search("hello");
builddict(string[]
["leetcoded"]]
magicdictionary()
["hello"],
magicdictionary();
"leetcode"]);
magicdictionary
magicdictionary.search("hhllo");
structure,
"leetcode"]],
["magicdictionary",
magicdictionary.search("leetcoded");
["hhllo"],
["hell"],
magicdictionary.search("hell");
"builddict",
searchword)
builddict
[["hello",
[starttime[i],
endtime[i].
lays
endtime[i]]
[3,2,7],
wasn't
querytime.
querytime
min(2)
[13,5,21].
[7,7,7,7],
sells
|13
5|,
min(|1
min(|13
21|,
min(8,
3|)
21|)
[13,5,1,8,21,2],
sub-tree.
labels[i]).
[[0,1],[1,2],[0,3]],
bi],
1,4
[2,1,1,1,1,1,1]
[4,2,1,1]
[3,2,1,1,1]
[[0,1],[0,2],[1,3],[0,4]],
"aabab"
well,
"abaedcd"
both.
correctly.
method).
["acckzz","ccbazz","eiowzz","abcczz"],
master.guess
get:
master.guess(word).
(value
["hamada","khaled"],
master.guess,
(other
reasonable
position)
"you
"ccbazz"
"eiowzz"
master.guess(word)
"abcczz"
master.guess("eiowzz")
six-letter-long
master.guess("ccbazz")
allowedguesses.
"hamada",
"either
"acckzz"
helper
master.guess("aaaaaa")
bruteforce
"acckzz",
word."
master.guess("acckzz")
master.guess("abcczz")
correctly."
allowedguesses
master.
frequency).
"abacbc"
"aaabb"
2/1/2014
paid.
1/1/2014
2/3/2007
related
1/1/2005
salesperson,
25000
4/1/2014
alongside
+-----------------+---------+
commission
com_id
12/25/2008
3/1/2014
rate,
pam
tell
"red".
+----------+------+--------+-----------------+------------+
salesperson.
sales_id
boston
+--------+--------+----------+
company,
austin
salesperson
hire_date
65000
commission_rate
salespersons
located.
12000
5/1/2010
4/1/2006
+----------+------------+--------+----------+--------+
+----+-------+--------+-----------+
managers.
skiplist,
"erase",
performance,
o(n).
skiplist.erase(1);
[cc
skiplist.search(0);
layers
wikimedia
idea
skiplist.add(2);
artyom
skiplist:
treap
skiplist.
erase(int
fine.
skiplists
["skiplist",
skiplist.erase(0);
skiplist();
commons
situation.
skiplist.add(1);
3.0],
skiplist.add(3);
by-sa
skiplist()
erase.
comparatively
red-black
skiplist.add(4);
[30,40,50,60,70,90]
kalinin
skiplist.search(1);
https://en.wikipedia.org/wiki/skip_list
[1,0,2,3,4]
[4,3,2,1,0]
"aabdcdbc"
"abdacdbc".
pattern[1]
"abdcdbcc",
"aabb",
"abdcadbc",
"aaabb",
obtainable,
suboptimal.
"abadcdbc".
"aabbb".
"abdccdbc",
pattern[0]
"abdcdbc",
text[1]
text[2],
"steps"
"abccdef",
pst",
"1s3
["step","steps","stripe","stepple"]
"pest"
"pest",
insensitive.
12c",
(uppercase
"stew",
"stripe"
456",
licenseplate
"cbca".
licenseplate.length
"caaacab",
["looks","pest","stew","show"]
"stepple"
"step"
licenseplate.
"show"
licenseplate,
[1,1,5],
|nums1[i]
|7-4|
[1,7,5]
(|1-3|
[9,3,5,1,7,4]
[1,7,5],
nums2[i]|
|1-2|
[10,10,4,4,2,7].
[1,5,5].
|5-3|)
|4-1|
[1,10,4,4,2,7]
[2,4,6,8,10]
|10-3|
[1,10,4,4,2,7],
[[0,3],[2,4],[1,3]]
connects.
(2,4)
[4,3,2,5,1].
[2,4,5,3,1].
$120.
gondola,
wheel,
$37
boardingcost,
$14.
-$357.
gondolas
wait,
$37.
boardingcost
ground
$122.
-$269.
boards,
-$177.
gondolas,
[10,9,6],
waiting),
$20.
gondola
$80.
runningcost
rotates.
$122
arrive,
-$89.
safely.
$28.
$40.
gondola.
$60.
$92
profit.
[8,3],
waits,
-$447.
[3,4,0,5,1],
waiting,
3999
numeral.
(4),
[3,5,3,4],
boat
carry
[3,2,2,1],
(3),
edge,
[[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
[[0,1],[0,2]]
"bcdea"
shift.
"cdeab"
"abced"
[0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]
[2,1,3,4,7,11,29,18],
[7,13,11]
[2,3,5,8,13,21,34]
[18,29,11,7,4,3,1,2].
214].
[7,11,13]
[0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]
reversal.
[2,5,3,8,13,21,34]
["timemap",
set(string
timestamps
get(string
retrieve
timestamp_prev
timemap.set("foo",
timemap.get("foo",
timemap()
"foo"
"bar2"
previously,
"bar",
"bar2",
timestamp)
"bar"
timestamp_prev.
"bar2"]
["foo",
"bar".
time-based
timemap();
timemap
[2,1,3,4,4]
[[1,1,1],[1,0,0],[1,1,1]]
[2,2,2,2,5,5,5,8],
[11,13,17,23,29,31,7,5,2,3],
threshold).
[5,5,8]
[2,5,5],[5,5,5]
nums[z])
nums[x])
(nums[y],
w,
d).
(c,
(nums[w],
[5,6,2,7,4]
[4,2,5,9,7,4,8]
(c
(9,
[16,17,18]
age[x]
[20,30,100,110,120]
age[y]
&&
[16,16]
[1,2,3,4,6,5,7]
top-to-bottom
[[9],[3,15],[20],[7]]
[[4],[2],[1,5,6],[3],[7]]
[1,2,4,3],
changed).
[2,2,2,2].
complementary.
[1,2,1,2],
nums[n-1-i]
[1,4,1,2],
target.length,
target[i],
[5,9,4,1,2,3,4],
[1,4,3,1,2].
[6,4,8,1,3,2],
[9,4,2,3,4]
[4,7,6,2,3,8,6,1]
[5,3,3,6,3,3],
(8-6)
particular
incompatibilities
[6,8],
[1,2,1,4],
subset's
(3-2)
[6,3,8,1,3,1,2,2],
(2-1)
0.3333333333333333
0.16666666666666666.
[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]],
unvisited
1/2
0.16666666666666666
abs(nums[i]
[1,2,2,1]
[4,5,1,2,3]
[0,1,2],
scores.length,
[8,9,10,1]
teams.
age.
younger
ages,
player,
[4,5,6,5],
[1,3,5,10,15],
conflicts.
&(f,t)
"f".
subexprn)'
"!(f)".
'&(subexpr1,
(false
'|(subexpr1,
subexprn
'!(subexpr)'
"!(&(f,t))"
"|(f,f,f,t)"
subexpr1,
shapes:
!(f)
subexpr.
&(f)
subexpr2,
"&(|(f))"
|(f)
'&',
"&(f)".
printnumber(7)
even(),
zero(printnumber)
zero(),
even(printnumber)
2n.
"010203040506..."
odd()
zeroevenodd(int
odd(printnumber)
"0102030405"
odd().
zero()
even()
zeroevenodd
"iu",
"ea",
"oi",
"ia",
"ie",
"ae",
"io",
"ou"
'i'.
"ua".
slash:
"and
&amp;
"&amp;
&apos;
&quot;...&quot;"
not."
&quot;
\"...\""
parser,
<.
sign:
&ambassador;
&.
ampersand:
parser.
mark:
/.
&lt;
".
"&
quote:
entities
&frasl;
&gt;
[2,3,-2,4]
[-2,-1]
[-2,0,-1]
|4-1|=3
|8-1|=7
|4-8|=4
|8-10|=2
|5-8|=3
arr1[1]=5
d=2
have:
|arr1[i]-arr2[j]|
|5-9|=4
|4-10|=6
[-4,-3,6,10,20,30],
|5-1|=4
|8-8|=0
arr1[2]=8
[2,1,100,3],
|4-9|=5
arr1[0]=4
[10,9,1,8],
[-5,-2,10,-3,7],
|5-10|=5
[4,5,8],
|8-9|=1
productofnumbers.getproduct(3);
productofnumbers.add(5);
productofnumbers
productofnumbers.add(0);
productofnumbers.getproduct(2);
[3,0,2]
getproduct.
productofnumbers.getproduct(4);
productofnumbers.add(8);
getproduct(int
[3,0,2,5,4]
["productofnumbers","add","add","add","add","add","getproduct","getproduct","getproduct","add","getproduct"]
[null,null,null,null,null,null,20,40,0,null,32]
overflowing.
productofnumbers()
[3,0,2,5]
productofnumbers();
[3,0,2,5,4,8]
productofnumbers.add(3);
productofnumbers.add(4);
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
productofnumbers.add(2);
[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
trees),
["abcde",
"uvwxy",
"z"],
"klmno",
board;
"ddr!uurrr!!ddd!"
"rr!ddrr!uul!r!"
them.)
board[r][c]
board[0][0].
"fghij",
'!'
"pqrst",
[3,8,48].
nice.
[1,3,8,48,10]
obtained,
[3,1,5,11,13]
efficiency.length
efficiency[i]
engineers'
speeds
performance.
engineers.
efficiency=7).
min(4,
72
speed=5
[2,10,3,1,5,8],
engineers
[5,4,3,9,7,2],
speed=10
efficiency=4)
unitssold
start_date
start_date,
2019-02-01
(30
+------------+---------------+
+------------+---------------+-------+
2019-02-25
average_price
end_date.
2019-03-22
20))
purchase_date
2019-03-01
30))
16.96
+------------+------------+------------+--------+
2019-02-28
(15
6.96
product_id.
((200
end_date
2019-02-21
end_date)
2019-02-20
2019-02-10
58,
37,
[19,39].
[9,49],
"zaz".
"xyz",
"zza",
"xyz".
"aababcabc"
counted.
"yzz",
"xyzzaz"
t[i]|
"bcd".
characters).
maxcost
|s[i]
maxcost.
"bcdf",
"cdef",
"acde",
[1,2,2,2,1].
[100,1,1000]
[2,2,1,2,1]
[1,100,1000].
abs(arr[i]
271
reverse,
041
reversed,
172
443
mapsum()
["apple",
pairs'
insert(string
(apple
mapsum.sum("ap");
["app",
mapsum.insert("apple",
overridden
mapsum();
mapsum
prefix)
prefix.length
["ap"]]
["mapsum",
["ap"],
existed,
"sum"]
mapsum.insert("app",
sum(string
"sum",
key-val
trust[i]
[[1,3],[2,3]]
[[1,3],[2,3],[3,1]]
trust.length
trust
judge.
rumor
nobody.
trusts
secretly
trust[i].length
town,
judge)
identified,
[1,1,2,3,4,4]
splicing
50].
snapshotarr.get(0,0);
[null,null,0,null,5]
[[3],[0,5],[],[0,6],[0,0]]
set(index,
snapshotarray(3);
snap())
snap,
snapshotarr
snapshotarr.set(0,6);
snapshotarray
["snapshotarray","set","snap","set","get"]
snapshotarray(int
snapshotarr.snap();
snap_id
snapshot,
snap()
snap_id)
snap_id:
array-like
get(index,
snapshotarr.set(0,5);
array[0]
mixed.
yell
"croakcrook"
croak
frogs,
yelling
"crcoakroak".
"croak"
"croakcroak"
croaks
printing
croakoffrogs.length
'k'.
"crcoakroak"
croakoffrogs,
frogs.
croakoffrogs
croak.
[-1,-100,3,99],
[99,-1,-100,3]
[3,99,-1,-100]
[5,6,7,1,2,3,4]
[6,7,1,2,3,4,5]
[7,1,2,3,4,5,6]
"12-31"
"mm-dd",
16th,
arrivealice
arrivealice,
"10-31",
"mm-dd".
leavebob
"08-15",
arrivebob,
business
(inclusive),
"08-18",
leavealice
"08-16",
august
18th,
rome
leavebob.
"08-19"
5-character
"10-01",
arrivebob
[31,
leavealice,
"11-01",
non-leap
17th,
leap
31].
"fizzbuzz"
fizzbuzz(int
"buzz",
fizzbuzz(printfizzbuzz)
printfizzbuzz
printfizz
number()
token
fizz()
"buzz"
"fizz",
[1,2,"fizz",4,"buzz","fizz",7,8,"fizz","buzz",11,"fizz",13,14,"fizzbuzz"]
fizzbuzz()
"fizz".
buzz()
d:
"fizzbuzz".
fizz(printfizz)
...]
fizz,
console,
fizzbuzz
printbuzz
buzz,
number(printnumber)
"fizz"
buzz(printbuzz)
[1,2,"fizz",4,"buzz"]
"buzz".
rev(11)
rev(x)
79
[42,11,1,97]
rev(nums[i])
rev(1)
[13,10,35,24,76]
121.
rev(42)
rev(120)
97
rev(97)
321,
rev(nums[j])
rev(123)
(1),
participate
crime,
schemes:
(0),
commit
(0,1,2).
crimes
participates
crime.
scheme
(2),
[6,7,8]
schemes.
members,
crime
crimes,
commit.
minprofit
[7,11,13],
[11,2,3,14,15].
80)
max(31,
220.
max(210,
220)
[10,60,10].
[10,90,10]
[50,20,50,40,20]
[1,12,13,4,5]
[50,20,50,70,30].
max(sum(nums1),
nums2[left...right].
max(140,
sum(nums2),
[20,40,20,70,30],
[20,40,20,40,20]
nums1[left...right]
sum(nums2))
sum(nums1)
sum(arr)
[60,90,60]
[11,12,13,14,15]
[60,60,60],
biden
again!
app.
america
tweets.
+----------+----------------------------------+
tweet_id
tweet.
([1,2,3],
[2,4]),
[2,3]),
[6]).
([6],
[6,6],
[1,2,3]).
([1,3],
[4]),
([2,4],
[3,3,3],
[6])
[1,4]),
[1,3])
([1,4],
([4],
([2,3],
[8,5,1,7,10,12]
node.left,
node.val.
[8,5,10,1,7,null,12]
node.right
node.left
node.right.
tree),
traverses
isconnected.length
isconnected
isconnected[i][j]
isconnected[i][i]
isconnected[i].length
isconnected[j][i]
provinces.
[[1,1,0],[1,1,0],[0,0,1]]
province
bound,
bound.
[2,3,4,5,7,9,10]
[2,4,6,8,10,14]
randomly.
seat).
(when
ticket
"az",
"azbazbzaz"
sn).
s9
"babab"
"azbzaz",
"ca",
"azbazbzaz",
si,
"azb"
"az"
s6
si.
prepending
s5
"babab",
[[3,7,8],[9,11,13],[15,16,17]]
[[7,8],[1,2]]
[[1,10,4,2],[9,3,8,7],[15,16,17,12]]
105.
[12]
2/3.
1/2,
1/3,
3/5,
2/5.
[1,7]
(arr.length
1/5,
2/5,
orders[i]
executed,
[[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
order's
[pricei,
ordertypei]
(999999995-1)
backlog,
1999999991,
orders[i+1]
ordertypei
[[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
amounti,
backlog.
999999984
999999995
(1000000000-3)
happens:
exclusively
[[4,3,2],[7,6,1],[8,8,8]]
[[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
one),
18000
rededges
blueedges
[0,1,-1]
blueedges[j]
rededges[i]
[[2,1]]
blueedges.length
rededges.length,
rededges[i].length
blueedges[j].length
worse.
20.50000
20.00000
10-6
[9,1,2,3,9],
floor(nums[i]
floor(5
floor(9
floor(2
floor()
[2,5,9]
divisors[i]
[10,16]
divisors[2]
divisors[i].
divisors[0]
[20,14,21,10],
divisors[1],
divisors[0]).
[4,7,9,3,9],
divisors[0],
divisors[1]
divisors.length
divisors[2]).
[[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
1+4+7
2+7+3
sums:
6+3+3
5+4+3
5+5+2
[[5,1,3,1],[9,3,3,1],[1,3,3,8]]
6+4+2
5+1+6
p=[1,2,3,4,5].
queries[i]=3,
queries[i]=1,
[2,1,2,1].
p=[3,1,2,4,5].
p=[1,2,3,...,m].
[6,5,0,7,5]
i=0:
queries[i]=2,
[7,5,5,8,3],
i=1:
p=[1,3,2,4,5].
p=[2,1,3,4,5],
(indexing
i=queries.length-1)
[3,1,2,1],
i=2:
i=3:
p=[3,1,2,4,5],
[4,1,2,2],
p=[2,1,3,4,5].
p=[1,2,3,4,5],
p=[1,3,2,4,5],
labelling
fifth,...),
(ie.,
fourth,
[1,3,4,14]
label.
[1,2,6,10,26]
(second,
sixth,...),
tiles[i].length
[[1,5],[10,11],[12,18],[20,25],[30,32]],
[[10,11],[1,1]],
carpet.
carpetlen,
otherwise:
"cde"
"aec"
"abacaba",
"bzaa"
[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]],
[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],
stampheight,
image)
stampwidth.
stampheight
(occupied).
stampwidth
[-1,-2,-3]
moves).
toggling
0b1111
0b1001
[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
[5,3,6,2,4,null,7],
"aabaab".
("a")
"aab".
"abcabcdabc"
"abcdabc".
"aaabaab"
("abc")
("aab")
gift
[25,64,9,4,100],
gifts.length
[5,8,9,4,3],
any.
choose,
gifts.
gifts[i]
behind.
gifts,
pref[2]
pref[4]
[13]
[5,2,0,3,1]
satisfies:
pref[1]
[5,7,2,3,2]
pref[3]
pref[i]
pref.length
pref[0]
spots,
spot.
[8,1,5,2,6]
values[j]
spots.
3412
87655
parities.
3412.
3214.
85675.
65875
87655.
1050734917
[[2,6],[5,1],[73,660]]
[5,1]:
[1,6],
[2,6]:
[1,2,3,10,5]
[ni,
ni
ni,
ki.
ki],
50734910.
[4,1,50734910]
[73,660]:
[6,1].
["d1/","d2/","../","d21/","./"]
"x/"
exist).
["d1/","../","../","../"]
folder).
"../"
["d1/","d2/","./","d3/","../","d31/"]
"./"
["bella","label","roller"]
["e","l","l"]
["c","o"]
["cool","lock","cook"]
duplicates).
modulo.
216.
[6,3,3,2],
hot
warm,
cup.
[5,0,0]
[5,4,4]
amount[2]
warm
cold,
cup,
dispense
amount[0],
cups.
amount[i]
dispenser
cold
amount[1],
neg.
[5,20,66,1314]
neg,
[-3,-2,-1,0,0,1,2]
pos
[-2,-1,-1,1,2,3]
-2000
pawn
bishops
f5.
attacking
bishop.
[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","b","p","p",".","."],[".","p","b","r","b","p",".","."],[".","p","p","b","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
attacking.
b5,
blocking
pawns
west),
pawns.
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","r",".","p","b","."],[".",".",".",".",".",".",".","."],[".",".",".","b",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
rook.
[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","r",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
capture
stop,
rook's
pawn,
d6,
["numbercontainers",
nc
"find",
[10]]
numbercontainers
nc.change(2,
numbercontainers();
"find"]
nc.change(1,
nc.change(3,
nc.change(5,
fills
numbercontainers()
nc.find(10);
"change",
find.
change(int
"acti"
["abc","abcd"]
targetwords[0]
targetwords.
"act".
"tack",
"bacd",
["tack","act","acti"]
targetwords[2]
targetwords,
startwords
"act",
"act"
["ant","act","tack"],
startwords[0]
"tack".
startwords,
targetwords.length
targetwords[1]
"actk"
targetwords
["ab","a"],
startwords.length,
"acti",
targetwords[j].length
startwords.
startwords[i].length,
startwords[1]
[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
[5,1,7]
[5,3,6,2,4,null,8,1,null,null,null,7,9]
[1,null,5,null,7]
date1
"2020-01-15",
date2
yyyy-mm-dd
examples.
"2019-12-31"
"2019-06-29",
"2019-06-30"
["countintervals",
countintervals.count();
countintervals();
countintervals()
countintervals
countintervals.add(2,
countintervals.add(5,
countintervals.add(7,
"bcabc",
"aacb"
"cabc"
"bcab",
"abca",
"aaacb",
"aaacb"
(again).
"abbxxxxzzy"
"xxxx",
identified
"yy".
"abbxxxxzyy"
"eeee",
[[3,5],[6,9],[12,14]]
[[3,6]]
[3,6].
end],
"abcdddeeeeaabbbcd"
"hhhvv"
destination.length
destination:
["hhhvv",
1-indexed.
"vhhvh",
"vvhhh"].
providing
"hhvvh",
(go
ncr(a,
"vhhhv",
"hhvvh"
"hvhvh",
"hvhhv",
"hhvhv",
'h',
"vhvhh",
"hvvhh",
ncr(row
"hvhvh"
"hhvhv"
group:
"23".
"000",
"00000000",
"346"
"00".
completed.
"11111222223",
"5".
"13"
"3465"
"112",
"222",
"135"
+---------+-------+
(15*6)
6.their
(11*10)
[1,null,2,3,4,null,null,5,6]
'/']
"-1
24,
['+',
(7-1)
restricted
[4,1,8,7]
12"
(8-4)
1"
"12
[2,7,1,8,1]
[31,26,33,21,40]
"aaabaaa"
swap,
'a'),
(s[i]
s[j])
(s[0]
"0110".
s[j]).
"1110".
"0010".
"0110"
[[1,3],[3,7],[8,9]]
sets.
[2,3,4,8,9]
[[1,2],[2,3],[2,4],[4,5]]
[[1,3],
[[1,3],[1,4],[2,5],[3,5]]
[3,7],
[1,2,4,7,8,9]
[8,9]],
freq,
tweetname
tweetcounts()
gettweetcountsperfrequency(string
[130,189],
[3610,7209],
seconds).
[null,null,null,null,[2],[2,1],null,[4]]
[10,3609],
chunks):
[9970,10000]
tweets,
site
frequencies:
[60,60]
tweetcounts();
"tweet3",
["tweetcounts","recordtweet","recordtweet","recordtweet","gettweetcountsperfrequency","gettweetcountsperfrequency","recordtweet","gettweetcountsperfrequency"]
10000]
freq.
[70,129],
recorded
"minute",
gettweetcountsperfrequency.
tweetcounts.recordtweet("tweet3",
analyzing
[[],["tweet3",0],["tweet3",60],["tweet3",10],["minute","tweet3",0,59],["minute","tweet3",0,60],["tweet3",120],["hour","tweet3",0,210]]
tweetname,
[7210,10000]
[4];
[0,210]
tweetcounts
recordtweet(string
[0,59]
frequency's
"hour",
(3600-second
(60-second
[2,1];
[10,69],
[10,10000]
"tweet3"
analysis.
tweetcounts.gettweetcountsperfrequency("hour",
endtime]
59);
time)
recordtweet
[2];
tweetcounts.gettweetcountsperfrequency("minute",
210);
120);
(86400-second
https://leetcode.com/problems/find-the-middle-index-in-array/
[2,1,-1]
1991:
[1,7,3,6,5,6]
index's
t);
console.log(date.now()
});
millis,
millis
sleep(100).then(()
sleeps
{"x":null,"l":["1","2","3"]}
exactly.
o1
json.stringify(o2).length
json.stringify(o1).length
o2,
_.isequal()
json.
{"y":2,"x":1},
check.
{"x":1,"y":2}
{"x":1,"y":2},
o2
json.parse.
{"x":null,"l":[1,2,3]},
[4,5,0,-2,-3,1],
-3],
min([3,1])
[5,4]
min([3])
min([2])
min([5,4])
strength.length
sum([1])
min([6])
min([1,3])
sum([3,1])
sum([1,2])
sum([1,3,1,2])
strength),
wizard.
wizards.
min([4,6])
sum([3,1,2])
sum([4,6])
sum([5])
sum([5,4])
strength,
min([1,3,1])
sum([5,4,6])
[5,4,6]
min([3,1,2])
ruler
sum([1,3,1])
sum([6])
sum([3])
min([5])
strength[i]
213
min([1])
min([1,2])
wizard
min([5,4,6])
sum([2])
min([4])
sum([4])
213.
kingdom,
wizards:
wizards'
sum([1,3])
min([1,3,1,2])
roll,
184
6-sided
[4,5,6,6,7,0,1,2,4,4].
[2,5,6,0,0,1,2],
[0,1,2,4,4,4,5,6,6,7]
pivot.
[1,15,7,9,2,5,10],
[1,4,1,5,7,3,6,1,9,9,3],
[15,15,15,9,10,10,10]
partitioning.
84
partitioning,
s="aaaab".
s="abc".
s="acb".
i=2,
s="bac".
j=2.
s="cab".
s="aaaba".
i=4,
s="abc",
j=1.
j=4.
s="aaaab",
i=3,
s="bac",
s="cab",
i=1,
s="bca".
parkingsystem.addcar(3);
parkingsystem.addcar(2);
medium
parkingsystem.addcar(1);
"addcar",
addcar(int
cartype
parkingsystem(int
park
cartype)
parkingsystem(1,
small)
big,
addcar
"addcar"]
cartype.
kinds:
["parkingsystem",
parkingsystem
medium,
slot
small,
lot.
spaces:
"111111"
"0110111"
{2,7}
[3,3,3,3,5,5,5]
{3,7}
[5,5,5,2,2]
[3,3,3,3,5,5,5,2,2,7]
{7}.
[7,7,7,7,7,7]
{3,5},{3,2},{5,2}.
startrow
startcolumn].
maxmove,
maxmove
startcolumn
boundary).
startcolumn,
results.
1081:
https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/
one-lane
position).
catches
(speed
driving
hour).
fleets
[10,8,0,5,3],
[2,4,1,1,3]
slow
fleet,
[0,2,4],
bumper
slower
fleet.
[9,3,1,2,6,3]
subarray's
[9,3,1,2,6,3],
obeys
requirement:
a3,
|a2
|a3
integer:
an],
[|a1
a2|,
[a1,
|an-1
an|]
a3|,
a4|,
["the","is","sunny","day"]
["i","love"]
words[i]]
"sunny"
["i","love","leetcode","i","love","coding"],
["the","day","is","sunny","the","the","the","sunny","is","is"],
log(k))
grid[row][col].
(1,3).
[[0,2,4],[3,2,1],[1,0,4]]
[[0,1,3,2],[5,1,2,5],[4,3,8,6]]
grid[0][1]
grid[2][3]
grid[1][3]
grid[1][2]
["abc","car","ada","racecar","cool"]
palindromic,
["def","ghi"]
"ada".
"racecar".
"racecar"
["notapalindrome","racecar"]
"ada"
[1,1,6,8].
[5,5,5,8].
[5,5,5,5].
[20]
[5,1,6,8].
[14,10]
[2,9,6,3],
[3,1,6,8],
[1,1,1,8].
[5,5,6,8].
triples.
(i=1,
(i=0,
triples:
bitwise-and
k=2)
(i=2,
k=0)
k=1)
j=2,
heights[row][col]
heights[i][j]
heights,
[[1,2,3],[3,8,4],[5,3,5]]
heights[i].length
hiker
[[1,2,2],[3,8,2],[5,3,5]]
[1,2,2,2,5],
[1,3,5,3,5].
route.
effort.
route's
col).
[1,3,5,3,5]
[[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
hope
hike.
(rows-1,
columns-1)
["#","."],
["#",".",".",".","#"]]
[["#",".",".",".","#"],
[".",".","#",".","."],
[[".","#"],
[["#",".","#","#",".","#"],
[".","#",".","#","."],
[".","#","#","#","#","."],
cheating
possible..
and'#'.
cheat
seats[i].length
[".","#"]]
him.
classroom.
["#",".","#","#",".","#"]]
voyage.
pre-order
flipped.
voyage.length
voyage[i]
effect:
voyage
voyage,
[0,1,1,2,1,2]
__builtin_popcount
c++)?
numsl+1
abs(2+3)
[2,-5,1,-4,3,-2]
abs(5)
numsr]
-x.
abs(-5+1-4)
numsr-1,
[-5,1,-4]
[numsl,
numsl+1,
numsr-1
numsr).
[1,-3,2,3,-4]
abs(numsl
abs(-8)
[1,3,7,5,10,3],
prices[5]
like,
((9
prices[0]
by:
[1,3,2,8,4,9],
((8
prices[3]
prices[4]
allowed?
[8,null,6,null,5,null,4,null,3,null,2,null,1],
cloned
[7,4,3,null,null,6,19],
mechanism
third()
mainly
imply
second(),
third().
third(),
print("third");
first()
comprehensiveness.
second()
print("second");
print("first");
tests'
"firstsecondthird"
second().
first(),
reverses.
target:
[3,7,9],
[2,4,1,3]
[1,2,4,3]
[1,4,2,3]
[2,4,1],
[1,2,0,0,2,1]
lake.
rains
rains.length
lake
flood-free.
[-1,-1,2,1,-1,-1]
flood.
[1,2,0,1,2]
lakes.
dry
lakes
[-1,-1,1,2,-1,-1]
lake,
floods
rains[i]
changes.
ans.length
(3/4
1/4)
(3/2
[7,3,5,5],
(7/2
(5/2)
skipping
(1/4
rest.
meeting,
km/h)
3/4)
hoursbefore,
1/2)
rests,
rests.
1.4
letting
2.5
mark,
((1/4
marks.
((7/2
((5/2
(2/4)
kilometers.
hoursbefore
shortened
(5/2))
wait.
11.5
(5/2
'end'
'start'
3.140))
1.456
4.512
processes.
0.995
process_id
4.100
((4.512
1.550
machine_id
5.000
processing_time,
((1.550
(machine_id,
machine_id.
2.500
('start',
4.120
run.
+------------+-----------------+
process_id)
machine.
activity_type)
0.712
'end').
(4.120
0.894
0.712)
2.500))
1.520
(1.420
((1.520
+------------+------------+---------------+-----------+
0.430
process_id,
0.550)
0.430))
0.550
1.420
processing_time
4.100)
(5.000
3.140
all)
[3,5].
[3,4,4,5]
"cdc".
"cdc"
[[0,1],[0,3],[1,2],[1,3]]
[[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
[[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
roads,
infrastructure.
infrastructure
7236
9973
2736
[[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
(typei,
[[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
[typei,
typei
edges:
likewise,
[[3,2,3],[1,1,2],[2,3,4]]
traversable.
traversed
hour)
commute
kilometers)
mark.
2/3
depart
trains
2.66667
1.9
0.33333
1/1
depart.
3/3
2/1
2.7
subject_name.
student_name
physics
attended_exams
subjects.
subject_name
+------------+--------------+--------------+----------------+
subjects
school.
subject
marked.
left-most
[2,1,3,4,5,2]
[2,3,5,1,3,2].
[2,3,5,1,3,2]
[2,1,3,4,5,2].
(-2)2
(-2)1
(-2)0
12.75
12.75000
[1,12,-5,-6,50,3],
calculator.
{2
startvalue,
{3
display.
10}.
8}.
double,
{5
["datastream",
"consec"]
parsed,
consec.
parsed.
datastream.consec(3);
datastream
datastream.consec(4);
consec(int
datastream(4,
"consec",
//value
[3]]
[4,4,3].
datastream(int
"app",
size.)
info).
words[1],
["word","world","row"],
"app"
unsorted.
'∅'
'∅',
["hello","leetcode"],
"hlabcdefgijkmnopqrstuvwxyz"
"worldabcefghijkmnpqstuvxyz"
surprisingly,
["apple","app"],
#1
moment.
cherries.
#2,
[[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
#2
robots
you:
[[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
cherries:
#1,
exempted
[8,6]
â‰
period:
[8,6,7,7]
periods:
what.
[3,2,1,0,4]
"fl"
["flower","flow","flight"]
["dog","racecar","car"]
monday,
monday.
tuesday
20th
putting
sunday,
$2.
startdayi
attend.
starttimei
events.length
enddayi].
[[1,2],[2,3],[3,4],[1,2]]
events[i].length
events[i]
[startdayi,
events=
enddayi.
enddayi
endtimei.
list1[i]
list2[j]
["piatti","the
express","burger
grill
list2[i].length
["sad","happy"]
pines","hungry
king"]
list1[i].length,
list2,
["kfc","shogun","burger
["happy","sad","good"],
steakhouse","shogun"]
list1.length,
"shogun".
hunter
["sad","happy","good"]
"shogun"
king","kfc"],
["shogun"]
torrey
list2[i]
"happy".
["shogun","tapioca
[28,6,22,8,44,17],
arr1.
[22,28,8,6]
[22,28,8,6,17,44]
[2,1,4,3,9,6]
[2,2,2,1,4,3,3,9,6,7,19]
[2,3,1,3,2,4,6,7,9,2,19],
stockprices
[[3,4],[1,2],[7,8],[2,3]]
stockprices[i].length
(8,1)
stockprices.length
(2,6),
chart.
(7,2),
chart:
green)
(5,4),
stockprices[i]
[dayi,
dayi,
(6,3),
[[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]
plotting
dayi
(5,4).
(8,1).
cubes,
cubes.
glue
irregular
[widthi,
widthj
cuboids.
cuboid's
11x7
cuboids.length
lengthj
lengthi,
45x20
cuboid.
cuboid
[[50,45,20],[95,37,53],[45,23,12]]
95
23x12
heightj.
lengthi
102.
[[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
widthi,
[[38,25,45],[76,35,3]]
53x37
cuboids[i]
widthi
76
dimension.
cuboids,
35x3
190
commands[i]
commands:
+y
82
[6,-1,-1,6],
xy-plane
-y
[4,-1,3],
+x
[[2,4]]
0):
commands.length
[4,-1,4,-2,4],
degrees.
(subsequence
"adc"
"aca"
"aabca")
"bbcbaba"
backwards.
"adc".
"aabca"
forwards
"bbcbaba")
(student,
class)
+---------+----------+
biology
enrolled.
students,
[5,8,1]
[[5,2,1],[1,1,2]],
[5,6,2]
[[1,2,3],[2,5,7],[3,5,1]],
[-2,5,-1],
s(i,
[[1,1,2]]
[[2,4,3],[6,5,2]]
upper-left
streets.
[[1,2,1],[1,2,1]]
[false,true,false,false,true,true]
l.length
r[i]].
[0,0,2],
arithmetic:
[l[i],
r[i]
[4,6,5].
[5,9,3,7].
l[i]
sequences:
[-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10],
[4,6,5,9,3,7],
[0,1,6,4,8,7],
nums[l[i]],
[3,5,7,9],
[4,6,5,9].
[4,4,9,7,9,10]
r.length
nums[l[i]+1],
nums[r[i]]
[6,5,4],
[8,8]
[16,17,71,62,12,24,14]
candidates.
[62,12,24,14]
[16,17,62,24]
chars,
vals[i].
[-1000]
[-1,-1,-1]
"adaa",
(l
[nums[l],
nums[r
subarray).
nums[r]]
nums[l
executing.
["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]
"start"
ended,
call)
logs,
stack:
"end"
"0:start:3"
log.
popped
(initial
"end"}:{timestamp}".
starts,
spends
cpu,
"{function_id}:{"start"
resumes
executing,
"1:end:2"
["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]
(recursive
["0:start:0","1:start:2","1:end:5","0:end:6"]
continent
25000000).
population,
afghanistan
twenty-five
1246700
12960000000
28748
3712000000
gdp
100990000000
angola
3000000
78115
2831741
countries.
188681000000
468
652230
bigint
andorra
europe
2381741
+-------------+-----------+---------+------------+--------------+
albania
belongs,
asia
algeria
africa
37100000
25500100
20343000000
+-------------+------------+---------+
20609294
km2),
'm').
('i',
v=
3999].
distance[0]
distance[2]
[1,1,1,2,1]
meters
distance[1]
counter-clockwise.
distance[3]
"aaaaa",
"ecod"
copies
"abcba",
"ilovecodingonleetcode",
"code".
"abbaccaddaeea",
"code",
7*(-2)
10*(-1)
[29,6,10]
[12,5,7,23]
29*1
multiplicand.
6*(-3)
[the
[0,2,0,0,0]
[[0,5],[1,2],[0,2],[0,5],[1,3]],
users'
leetcode,
[[1,1],[2,2],[2,3]],
id=2
uam
timei.
(minute
k),
leetcode.
(uam)
id=0
id=1
[1,1,0,0]
user_name
66.67%
register
209
((1/3)
contests
((2/3)
209,
208,
decimals.
+---------+-----------+
(contest_id,
contest_id
208
+------------+---------+
33.33%
registered
207
66.67
(60
+-------------+-----------------------+------------------+
kit
(50
2020-03-04
2020-01-18
+--------------------+---------+
product_category
2020-02-10
2020-02-24
laptop
2020-02-27
70)
+--------------+--------------+----------+
2020-02-05
order_date.
stringology
swapped
mistake.
pretty
straight-forward.
[3,1,null,null,2]
[2,1,4,null,null,3]
[3,1,4,null,null,2]
placement.
[0,0,null,0,null,0,null,null,0]
configurations
[0,0,null,0,0]
camera
satisfaction[i].
cook
satisfaction[i]
satisfaction.length
satisfaction
14).
[-1,-4,-5]
dishes.
discard
[4,3,2]
(2*1
prepared
0*2
dish
(-1*1
like-time
[-1,-8,0,5,-9]
4*3
preparation.
dish,
prepared.
3*2
8-directionally
[[0,0,0],[1,1,0],[1,1,0]]
[[1,0,0],[1,1,0],[1,1,0]]
corner).
[1,2,3,4,8,12,11,10,9,5,6,7]
[1,2,3,6,9,8,7,4,5]
[[1,2,3,4],[5,6,7,8],[9,10,11,12]]
[4,2,null,1,1,3,null,null,1]
cur
cur's
[4,2,null,3,1],
[4,2,6,3,1,5],
[4,1,1,2,null,null,6,3,1,5]
root's
depth,
maxheighti
restrictions.
restrictions[i]
[[2,1],[4,1]]
restrictions.length
[[5,3],[2,5],[7,4],[10,3]]
[0,1,2,3,3,4,4,5,4,3],
building.
maxheighti]
[0,1,2,1,2],
restrictions,
maxheighti.
buildings:
"t#"
"bell"]
"time#bell#"
indices[0]
indices[1]
"time",
["time",
indices[2]
"me",
["t"]
"bell",
[2,2,1]
[1,2,2,2]
[2,3,7,11]
[[1,6],[3,7],[9,12],[4,13]],
arrival.
[[1,10],[3,3]],
poeple
poeple[i]
[3,3,2]
flowers[i].length
(3,1),
nums2[index]
findsumpairs.add(0,
(5,0)
(5,5)
(4,1),
(2,1),
findsumpairs.add(1,
(5,2),
8;
11;
(5,1),
findsumpairs([1,
["findsumpairs",
tot.
(4,2),
[2,5,5,4,5,4]
tot
findsumpairs.add(3,
tot)
findsumpairs.count(4);
nums2.length).
findsumpairs(int[]
[2,4,5,4,5,4]
findsumpairs.count(7);
findsumpairs
[1,4,5,4,5,4]
count(int
nums2[index],
findsumpairs.count(8);
(3,2),
"hero"
["as","hero"]
["mass","as","hero","superhero"]
["et","code"]
["blue","green","bu"]
["leetcode","et","code"]
["hero","as"]
"mass"
"superhero".
"as"
"et",
"101010".
type-1:
type-2
"100011".
type-2:
[3,4,1,2,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,1,2,4,5]
bst:
[3,4,1,5,2]
[[1,2],[2,3],[5],[0],[5],[],[]]
graph[i].
node).
terminal
[2,4,5,6]
[[1,2,3,4],[1,2],[3,4],[0,4],[]]
[3,2,3,2,2].
formed,
[2,2,2].
[1,3,2,1,3,2,2]
[0,1,5,6]
[2,3,2,1,3]
i|.
constraints,
[0,1,9,0]
[3,1,2,3,2]
|j
a[j],
[5,3,1,4,3,5,2,4,2]
cables
computers,
cable.
cable
[[0,1],[0,2],[0,3],[1,2],[1,3]]
ethernet
[[0,1],[0,2],[0,3],[1,2]]
cables.
[[3,2,10],[1,4,2],[4,1,3]]
wi,
shape,
(hi,
prices[i].length
[hi,
wood.
[[1,4,2],[2,2,7],[2,1,3]]
grain
wood,
wi)
obtains
versa).
[[0,0,0],[0,0,1],[1,1,0]]
[2,3,0,1,4]
[[1,2,1],[0,1,0]].
[[1,3,1],[1,3,1]],
ci.
[[0,0,0],[0,0,0]].
[[2,2],[2,2]].
ri.
odd-valued
[[1,1],[0,0]]
indices.length)
11].
[3.00000,14.50000,11.00000]
14.5,
[3,9,20,15,7]
[0,3].
[[0,1],[2,1],[3,1],[1,4],[2,4]]
[0,2,3]
min(10^5,
[3,4,2,5].
[[0,1],[0,2],[2,5],[3,4],[4,2]]
[0,1,2,5].
[[1,4,7],[2,5,8],[3,6,9]]
switching
diagonal,
[1,2,1,1].
[2,2,2,1,2,2,1,2,2,2],
[1,1,2,1]
[1,1,2,1,1],
[-2,4,1,-3]
adjacentpairs.
forgotten
adjacentpairs,
adjacentpairs
adjacentpairs[i].length
nums[i+1]]
[nums[i+1],
[[4,-2],[1,4],[-3,1]]
nums[i]].
adjacentpairs.length
adjacentpairs[i]
[[2,1],[3,4],[3,2]]
[100000,-100000]
[-3,1,4,-2],
[[100000,-100000]]
"a1b01c001"
space:
"34".
"34",
"leet1234code234"
34".
"a123bc34d8ef34"
"34"
months).
revenue
feb_revenue
apr
jan_revenue
mar
feb
["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"].
+------+---------+-------+
+------+-------------+-------------+-------------+-----+-------------+
dec_revenue
month)
mar_revenue
https://leetcode.com/problems/convert-bst-to-greater-tree/
538:
dots.
"0.1.2.201"
["255.255.11.135","255.255.111.35"]
addresses.
"25525511135"
"0.011.255.245",
"192.168.1.312"
"192.168.1.1"
"101023"
"192.168@1.1"
["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
addresses,
["0.0.0.0"]
[[1,3,1],[1,5,1],[4,2,1]]
["ale","apple","monkey","plea"]
"abpcplea",
3001
deci-binary,
"27346209830709182346"
112
"82734"
"32"
node;
(right
[1,1,1,null,1,null,null,1,1,null,1]
[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]
"52"
"52".
largest-valued
"35427"
"4206"
"4206".
potential
[[1,0],[1,0]]
[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
planes.
("shadows")
[[2]]
shadow,
zx
xy,
3-dimensional
projections.
yz,
projections
[[1,0],[0,2]]
"shadow"
[1,2,3,4,5,6,null,null,null,7,8],
99].
[1,3,2,null,6,4,5,null,null,null,null,8,7]
fronts[i]
[1,2,4,4,7],
fronts
backs
backs[i]
[1,3,4,4,7]
[1,2,4,1,3].
backs.length
obtainable
[1,3,4,1,3]
fronts[i],
zero).
fronts.length
9996
9669
9969
9969.
9699.
6669.
9666.
[3,5,1]
progression.
[2,1,4],
[1,1,8,8]
[1,null,8],
[0,1,1,2,3,4]
[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
[[7,4,1],[8,5,2],[9,6,3]]
in-place,
(clockwise).
[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
constituent
src1,
src1
[[0,1,1],[2,1,1]],
[[1,0,3],[0,5,6]]
weight[i]
weighti.
subgraph.
subgraphs
src2,
dest
lastly,
src2
[[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]],
[17,19].
nums2].
[11,13]
[nums1,
"aaa".
0%,
33%
percent.
"jjjj",
"foobar",
[3,6,1,0]
7400
kannon
6100
+-------------+---------+--------+
juan
addilyn
michael
7700
3800
xcnti,
[xcnti,
(cnti
x1],
cnti]
[[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]],
yellow.
xcnti],
104)
cnti
[xcnti-1,
graph")
x2],
subdivide
[[0,1,10],[0,2,1],[1,2,2]],
[[0,1,4],[1,2,6],[0,2,8],[1,3,1]],
vi].
maxmoves,
maxmoves
vi],
subdivisions
[x2,
"original
x3],
none,
[[4,2]]
relevant
arms
mines.length
mines[i]
grid[xi][yi]
[4,1,1,1,0]
min(heights[i],
heights[j])
max(heights[i+1],
[3,1,2,1,1,0]
[5,1,2,3,10]
[10,6,8,5,11,9]
heights[j-1]).
heights[i+2],
[[1],[2]]
[[1,1],[3,4]]
[3
...}
["abc","deq","mee","aqq","dkd","ccc"],
letters:
p(x),
"mee"
bijection
pattern.
["mee","aqq"]
...}.
[2,3,7]
nodei
[nodei,
[[0,2],[3,2],[2,5]]
[1,15]:
[6,14,7]
parents.length
[3,7,-1,2,0,7,0,2],
pi.
[3,2]:
[-1,0,1,1],
[4,6]:
parents[root]
parents[x]
parents,
parents[i]
pi,
vali].
[[4,6],[1,15],[0,5]]
root).
"1?:22"
"2?:?0"
"0?:3?"
"23:50"
"19:22"
hh:mm,
"09:39"
?).
inclusively
[1,100,1,1,1,100,1,1,100,1]
[10,15,20]
"ubvaw"
modification
"ubv?w"
"ubvvw"
"w"
"azs"
"?zs"
"yzs",
conversions
"zzs".
"ubvww".
01101
(111)
32-bits
(110)
root-to-leaf
[1,0,1,0,1,0,1]
|arr1[i]
[1,-2,-5,0,10],
40000
arr2[j]|
[0,-2,-1,-7,-4]
[-1,4,5,6]
arr1.length.
arr1[j]|
|arr2[i]
john@example.com
compile
script,
bob@example.com
emails,
driver
+----+------------------+
("acca")
("acca"),
("abba"),
["abba","baab"],
unusuable
("baab"),
["acca","bbbb","caca"],
("abba")
words[j][k].
("baab")
("caca")
("bbbb"),
("caca"),
bj.
bj
x3
xk
bj]
[aj,
edges[j]
image).
aj
aj,
[[0,1],[0,2],[2,3],[3,4]]
[2,2,_,_]
[0,1,4,0,3,_,_,_]
val);
[3,2,2,3],
in-place.
removeelement(nums,
equaling
k);
...;
sort(nums,
[0,1,2,2,3,0,4,2],
actuallength;
score[0],
["dog","cat","dad","good"],
repeating)
["xxxz","ax","bx","cx"],
(might
c=9,
g=3,
[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
(3+2+2+5)
["l","e","t","c","o","d"],
"dad"
"cx"
"dog"
z=10
o=2
a=4,
letters[i].length
,'z'
["z","a","b","c","x","x","x"],
(words[i]
"xxxz"
(5+1+5)
["a","a","c","d","d","d","g","o","o"],
(4+5),
score[25]
a=1,
(4+5)
"ax"
[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
b=4,
d=5,
"bx"
score[1],
c=4,
hourglass.
entirely
[[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
1001
1110
prime)
binary.
bits,
10101,
1101
word2[i].length
word1[i].length,
word2[i]
sum(word2[i].length)
"bc"]
["ab",
["abcddefg"]
"cb"],
"c"],
sum(word1[i].length),
"defg"],
element):
operations).
[4,2,5](nums).
(second
[4,2,4]
(initial)[0,0,0]
calls.
function:
rods.length
steel
installation.
sum(rods[i])
supported,
{4,6},
{2,3,5}
billboard,
rods[i]
supports,
{1,2,3}
welded
{6},
weld
["approved",
2018-12-19
trans_count
approved_count
trans_date
2018-12
+----------+---------+-------------+----------------+--------------------+-----------------------+
incoming
124
2019-01
declined
2018-12-18
"declined"].
approved
+------+---------+----------+--------+------------+
trans_total_amount
approved_total_amount
de
"leet2code3",
"ha22",
tape
8301530446056247680
"leetleetcodeleetleetcodeleetleetcode".
taken:
tape,
"o".
"a2345678999999999999999",
263
"hahahaha".
tape.
"h".
2*10^4
[0.5],
succprob[i].
[0.5,0.5,0.3],
0.2
0.30000
succprob
[0.5,0.5,0.2],
[[0,1],[1,2],[0,2]],
1e-5.
succprob.length
succprob[i]
deliciousness
foods
deliciousness.length
(7,9).
meal.
[1,3,5,7,9]
deliciousness[i]
food,
and,
[1,1,1,3,3,3,7]
meal
(3,5)
hidden[i].
[1,-3,4],
differences[i]
[4,-7,2],
hidden[i
differences.length
sequences,
[3,-4,5,1,-2],
are.
contain.
sz
sz.
rabbit
inconsistent.
[10,10,10]
rabbits.
answers.length
didn't
rabbit.
you?"
didn't.
[2,0,3,1,4].
[1,0,0,0],
soldiers)
strongest.
[1,0,0,0,0],
[0,2,3,1].
[1,1,0,0,0],
[[1,1,0,0,0],
weaker
civilians).
[1,1,1,1,0],
[2,0,3]
civilians.
[1,1,1,1,1]],
[1,0,0,0]],
"pcxbcf"].
[word1,
predecessor
["a","b","ba","bca","bda","bdca"]
"bcad".
["xbc","pcxbcf","xb","cxbc","pcxbc"]
wordb
"cxbc",
wordb.
"pcxbc",
["abcd","dbqca"]
wordk]
word3,
["xb",
worda
"xbc",
chains.
chains
["a","ba","bda","bdca"].
trivial
comes,
attending.
[[1,4],[2,3],[4,6]],
[[3,10],[1,5],[2,6]],
leavingi],
targetfriend
targetfriend.
sat
leavingi
chair.
chairs
[[0,0]]),
vertical)
[[0,1,1,0],[0,1,1,0],[0,0,0,0]]
([[1,1]]
grid[0][2]
active_users
2019-07-20
2019-06-25
'end_session',
end_session
'send_message').
2019-07-27
scroll_down
activity_date
('open_session',
open_session
users.
session_id
send_message
'scroll_down',
+---------+------------+---------------+---------------+
session
lefttorightj
(new
39:
lefttorighti,
warehouses
righttolefti,
bridge,
49:
regulate
river.
[[1,1,2,1],[1,1,3,1],[1,1,4,1]]
20:
putnewi
[lefttorighti,
river,
pickoldi,
[[1,9,1,8],[10,10,10,10]]
righttoleftj
river
time[i].length
warehouse.
putnewi].
(old
lefttorighti
pickoldi
30:
righttolefti
31:
50:
efficient
40:
58:
bridge.
warehouse)
side,
11:
etc).
["call","call","call"]
["call","call","call","call","call"]
call.
sebsequent
[-2,-1,0,1,2]
counter()
"()[]{}"
'['
'()[]{}'.
"(]"
strs[2]).
["xc","yb","za"]
strs[n
"c"].
["zyx","wvu","tsr"]
["ca","bb","ac"]
strs[2]
[4,5,6]
people[i][j]
req_skills
req_skills.
["java","nodejs","reactjs"],
skill
req_skills[i]
skills
people[3].
req_skills[i].length
people[1],
[["algorithms","math","java"],["algorithms","math","reactjs"],["java","csharp","aws"],["reactjs","csharp"],["csharp","math"],["aws","java"]]
[["java"],["nodejs"],["nodejs","reactjs"]]
["algorithms","math","java","reactjs","csharp","aws"],
skill.
people[0],
team:
req_skills,
req_skills.length
people[i].length
people[i][j].length
[1,2,2,3,3,3]
frequency[2]
[5,4,4,7,6,11,11]
[5,7,11,11]
[5,3,4,4,7,3,6,11,8,5,11]
[4,5,7,7,13]
performed:
[5,4,7,11,11]
[[1,2,4]]
trees).
to_delete.length
[1,2,4,null,3],
[[1,2,null,4],[6],[7]]
to_delete
to_delete,
"on
"cool"
"on"
"calm"
space-separated
calm
"keep"
"keep
code"
cool"
not"
"is
cool
"and"
on"
hot",
"too
"adc
def",
dfe"
"oto
"oot
oht".
toh",
"acb
cab"
bef"
hot"
"def
"cb",
sequence).
"?a"
(p),
(s)
[100,20,10,10,5]
(3,3),
nums2.length,
(3,4).
non-increasing.
arr[i-1]
[30,29,19,5],
[25,25,25,25,25]
(2,4).
[55,30,5,4,2],
[10,10,1]
nums2[j].
[1,3,5,2,4,8,2,2]
i],
min(nums[2
max(nums[2
[1,5,4,2]
repeatedly.
variety,
"001101",
"001101"
"11100"
inspection.
[0,3,4]
official,
["a","b","c","ab","ac","bc","abc"]
["cc","acd","b","ba","bac","bad","ac","d"]
["ad","bd","aaab","baa","badab"]
[2,4,5,8,9],
[4,5,8,9],
[3,5,100]
[4,6,8,9]
[1,3,5,7,9],
[2,4,6,8,10].
[4,6,8,10]
index-0).
[1,3,5,100].
[4,5,8,10],
uniques
[4,6,8,9],
[6,7,8,9,10].
nums1)
(only
[2,4,6,8,9],
[2,4,5,8,10],
[-1,10,6,7,-7,1]
[-1,2,-3,3]
-k
[-10,8,6,7,-2,-3]
[[1,1,0],[1,0,1]]
reordering
bold,
[[1,0,1,0,1]]
[[0,0,1],[1,1,1],[1,0,1]]
rides
"distance".
222
450
miles,
lee.
rides,
donald
alex,
+------+-----------+
+------+----------+----------+
lee
317
312
traveler
+----------+--------------------+
jonathan,
travelled_distance
one-pass
library's
[2,0,2,1,1,0]
[0,0,1,1,2,2]
bloomday
bouquet.
bloomday.length
_,
bloomed.
bouquets.
x]
[7,7,7,7,12,7,7],
_]
bloomday[i]
[1,10,3,10,2],
flower.
bloomday,
_
bouquet
obvious
bouquet,
corridor,
corridor[i]
corridor.
sections,
"ppspsp"
corridor.length
dividers.
decorative
divider
"ssppsps"
dividers
installed.
requirement.
password,
password.length
"ilovele3tcode!"
"me+you--ismydream"
violates
"!@#$%^&*()-+".
"1ab!"
target[i][j]
target[i].length
[[0,1],[1,1]],
[[0,0,0],[0,1,0],[1,1,1]],
increments,
[[1,1,1],[0,1,0],[0,0,0]]
90-degree
s"
"t
str2.
"ababab",
[6,6,7,8,5].
[1,4,7,8,5]
browserhistory("leetcode.com");
visit,
"youtube.com",
url,
back(int
browserhistory.back(7);
[["leetcode.com"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]
browserhistory.back(2);
tab
"google.com",
visit(string
"facebook.com"
browserhistory.forward(1);
browserhistory
history.
browserhistory.forward(2);
url)
homepage
browserhistory.visit("facebook.com");
browserhistory(string
browserhistory.back(1);
back,
browser.
"leetcode.com".
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","leetcode.com"]
browserhistory.visit("linkedin.com");
"linkedin.com"
"linkedin.com",
homepage.length
browserhistory.visit("youtube.com");
forward(int
steps)
"facebook.com".
"youtube.com"
["browserhistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
"google.com".
"google.com"
browserhistory.visit("google.com");
homepage)
"facebook.com",
page.
forwarding
clears
groupsize,
1296:
hand.length
https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/
hand[i]
[1,2,3],[2,3,4],[6,7,8]
groupsize
[1,2,3,6,2,3,4,7,8],
brackets.length
$0.25
percent0.
bracket,
upper2
10%
taxes.
tax
percent1.
percenti]
tax,
income,
taxed
10%,
[[2,50]],
50%,
upper1
25%,
[[3,50],[7,10],[12,25]],
2.65000
$2.65
percenti.
upperi
upperi-1
$0
upper0
brackets.length).
[[1,0],[4,25],[5,50]],
brackets[i]
percent2.
bracket.
0%
[upperi,
income.
percenti
(consecutive
repetitions.
[1,2,1,2,1,1,1,3],
sub-sequence)
[1,2,1,2,1,3],
[1,2,4,4,4,4],
capacity[i]
capacity.length
[10,2,2],
additionalrocks
[10,2,2].
additionalrocks,
[2,3,4,4].
rocks.length
rocks[i]
rocks.
[2,2,0],
[1,2,4,4],
13:
[4,13],
[3,12],
[1,10],
[2,11],
((1
((nums[i]
nums[k]).
xoring
(1,0,1)
(0,0,1)
beauties
(0,0,0)
(0,1,0)
(0,1,1)
(1,1,1)
[15,45,20,2,34,35,5,44,32,30]
(1,0,0)
(1,1,0)
[entrancerow,
exit,
entrance.length
entrancecol
maze.
maze.length
maze,
'.')
maze[i].length
maze[i][j]
'+').
[[".","+"]],
entrancecol]
[["+","+","+"],[".",".","."],["+","+","+"]],
entrancerow
exit.
entrance.
[["+","+",".","+"],[".",".",".","+"],["+","+","+","."]],
[2,6,4,8,10,9,15]
[[],[1],[1,2],[1,2,2],[2],[2,2]]
[1,2,2]
rounds[1]
rounds[0]
marathon
rounds[i
sectors
sectors.
(end
circulate
rounds[i].
track,
[2,1,2,1,2,1,2,1,2]
marathon)
rounds.length
rounds[i]
refuel,
mile
[[10,100]]
drives.
arrived.
[[10,60],[20,30],[30,30],[60,40]]
refueling.
fueli]
startfuel
positioni+1
gas
fueli
(expending
station,
refuel
expending
transferring
station).
liters
liter
fuel),
tank
gas.
gas,
[1,3,1,5,4],
[3,1,4,1,5],
(nums[i],
1-diff
0-diff
nums[j]),
2-diff
8500].
"adz"
[25,1,3,1,3,0,2]
[0,1,2,3,4,3,4]
"dba"
[2,2,1,null,1,0,null,0]
25]
"aba".
[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
yi.
[[1,2],[2,3],[3,1]]
"tcode"
"bab"].
consecutivenums
autoincrement
overflow
"199100199"
integers?
03
02,
"112358"
board?
neighboring.
"abcb"
"abcced"
[["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]],
"see"
95ms,
6]}]
35ms,
[2]}]
calls[i].t
450ms.
cancelled
recieve
debounce(log,
75);
60ms,
])
30ms,
dlog
2]},
calls[i].inputs.length
[2]}
settimeout(()
{"t":
6]}
[{"t":
100ms
150ms.
ran
120ms.
125ms.
50ms,
parameters.
75,
_.debounce()
[1,2]},
[1]},
console.log([date.now()
125,
calls.length
70,
log(...inputs)
debounced
450,
dlog(2),
4]},
50ms
dlog(1),
135ms.
150ms
300,
70ms.
-121
string?
121-.
-121.
[20,50,9,63]
[2,3,6,7,4,12,21,39]
[4,6,15,35]
graph:
[1,6,1],
["a","ab","abc","d","cd","bcd","abcd"]
length(word[j])
["abcw","baz","foo","bar","xtfn","abcdef"]
"cd".
"xtfn".
length(word[i])
"abcw",
(0,4)
darts[i].length
threw
[[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]],
darts.length
dart
[[-2,0],[2,0],[0,2],[0,-2]],
throwing
darts[i]
(7,8).
dartboard.
[[1,0],[3,4],[2,1],[3,2]],
vj.
[[0,1],[1,2],[1,3],[4,2]],
[u,
[[1,3],[0,1],[1,0],[2,4]],
guesses
guesses.length
reply
guesses[j]
says
guess,
v]
guess.
lazy,
[[0,1],[1,2],[2,3],[3,4]],
morty
rick
[5,4,3,2,1,1000000000],
999999999
[1,2,3,4,7],
force.
c-137,
universe
baskets,
position[i],
stated
discovered
invented
earth
1000000000.
moves].
[taking
parent.
[3,0,0]
minstack.pop();
["minstack","push","push","push","getmin","pop","top","getmin"]
[[],[-2],[0],[-3],[],[],[],[]]
getmin
minstack.push(-3);
[null,null,null,null,-3,null,0,-2]
minstack();
getmin.
getmin()
minstack.getmin();
top()
minstack.top();
minstack
minstack.push(0);
minstack.push(-2);
retrieving
minstack()
where,
"gta(2)"
"fifa"
"pes(2019)"
names:
["gta","gta(1)","gta(2)","avalon"]
"gta"
"onepiece(4)".
"gta(1)"
["pes","fifa","gta","pes(2019)"]
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece(4)"]
"pes"
creates
["onepiece","onepiece(1)","onepiece(2)","onepiece(3)","onepiece"]
names[i].
"avalon"
["gta","gta(1)","gta","avalon"]
(k),
f("cc").
f("zaaaz").
["bbb","cc"],
f("aaa")
["cbd"],
f(queries[i])
f("bbb")
queries[i][j],
f("zaaaz")
words[i][j]
f("aaaa").
f(s)
f(w)
["zaaaz"]
f("aaaa")
f("cbd")
"dcce"
queries[i].length,
(5,10).
[1,2,3,4,5,10,6,7,8,9],
(1,6),(2,5)
and(3,4).
(1,9),(2,8),(3,7),(4,6)
["b==a","a==b"]
["a==b","b!=a"]
equations[i][0]
equations[i]
equations,
"xi==yi"
"xi!=yi".here,
'!'.
one-letter
equations[i][1]
forms:
different)
equations[i][2]
equations[i].length
equations.length
'='
equations[i][3]
equations.
1105.
1248.
1361.
1461.
2285.
622.
197.
967.
1206.
2259.
mismatch
1893.
1160.
1608.
corporate
1042.
2527.
2552.
colony
throne
1286.
2273.
reduction
843.
985.
1124.
974.
2295.
2239.
1340.
1337.
764.
719.
834.
1390.
1584.
1833.
1898.
1284.
1920.
1323.
556.
178.
edit
2418.
883.
1415.
day?
prototype
1604.
2245.
losses
2560.
1400.
151.
2249.
1378.
1710.
658.
1678.
773.
1324.
1702.
2605.
1006.
2546.
verify
2517.
514.
constrained
1109.
1814.
1937.
1117.
1801.
1930.
690.
1704.
1209.
852.
2608.
1090.
2541.
2514.
766.
bipartition
3-same-digit
k-subarray
1915.
2512.
798.
554.
1625.
2616.
1675.
671.
1557.
1138.
1899.
1438.
980.
564.
1733.
2145.
2547.
1486.
761.
963.
1911.
709.
2596.
1221.
862.
1402.
2579.
2139.
regions
1381.
513.
1844.
875.
2423.
57.
565.
1442.
1331.
540.
1487.
1444.
769.
1422.
1654.
1145.
1462.
1859.
1456.
794.
678.
2310.
2315.
2342.
1690.
1344.
reorganize
2509.
1823.
637.
1163.
748.
2502.
2536.
1078.
1670.
2117.
multithreaded
2306.
1873.
1688.
1617.
1946.
1947.
enclaves
2278.
dinner
echo
1282.
720.
960.
1477.
601.
1907.
1389.
752.
650.
1689.
2149.
98.
1217.
2650.
1003.
1411.
1488.
1546.
335.
1921.
1110.
532.
n-repeated
503.
570.
2622.
1658.
1925.
1301.
2574.
incremental
1519.
38.
2562.
675.
674.
519.
1577.
referee
1816.
1193.
1242.
1320.
1895.
1728.
301.
517.
partitioning
1667.
1563.
657.
1280.
633.
univalued
1846.
2583.
1813.
restore
887.
191.
2270.
2211.
1302.
1582.
2645.
existence
173.
thousand
1560.
2130.
978.
2284.
1864.
1723.
1567.
justification
1890.
332.
1352.
315.
1222.
665.
2404.
172.
2349.
803.
2621.
795.
78.
1681.
1673.
2215.
1886.
1566.
2244.
1068.
808.
824.
896.
609.
867.
1674.
1671.
n-th
2116.
1451.
1432.
714.
976.
87.
2556.
1417.
1328.
defanging
2553.
equalize
1407.
1329.
1525.
2632.
2240.
leak
643.
1553.
bbb
1669.
871.
791.
1207.
1744.
1503.
2439.
153.
coloring
analysis
1840.
89.
1396.
splitted
1074.
962.
2425.
537.
1004.
1040.
1365.
k-sum
1646.
2416.
2594.
1356.
1572.
899.
2331.
1203.
1189.
1606.
1638.
1084.
1104.
312.
2243.
2531.
2212.
192.
501.
804.
1-bordered
516.
1002.
sheet
1449.
1164.
886.
1541.
303.
869.
2220.
722.
1600.
193.
trapping
1518.
729.
1313.
1420.
1701.
1464.
349.
535.
1636.
1696.
508.
885.
1154.
2640.
1652.
1269.
1850.
1359.
1540.
818.
1424.
1046.
322.
2335.
2338.
1748.
1694.
584.
1061.
165.
1162.
1573.
718.
592.
1170.
budget
2334.
1909.
2571.
1550.
194.
812.
1020.
transition
sideway
1247.
2262.
328.
1507.
2518.
189.
2411.
1277.
1208.
813.
543.
715.
1632.
1847.
741.
1263.
1281.
1685.
2312.
1523.
585.
2271.
1741.
2413.
997.
334.
1425.
2133.
2241.
789.
1017.
1021.
954.
1948.
2264.
529.
1108.
1545.
92.
860.
2233.
1727.
1887.
981.
1009.
1299.
538.
1492.
2101.
k-group
2141.
1639.
distant
1408.
739.
992.
987.
2592.
1880.
590.
522.
1849.
1039.
2631.
2405.
1122.
1906.
1363.
979.
reward
basic
1391.
1913.
2144.
2414.
travellers
602.
odds
952.
583.
buzz
1387.
1687.
1450.
2575.
1416.
162.
2341.
630.
2121.
1854.
expressive
simplify
1240.
2336.
506.
652.
2595.
559.
connectivity
2232.
1116.
1434.
1562.
1304.
suggestions
623.
655.
2515.
2412.
2401.
actors
1128.
1238.
93.
2321.
757.
851.
1822.
1406.
756.
1616.
1720.
1605.
1542.
645.
2347.
662.
2569.
185.
504.
1835.
durations
aware
343.
preimage
770.
1409.
2429.
1659.
2559.
1642.
2550.
2633.
806.
2642.
2440.
2634.
2210.
2206.
1928.
2283.
1436.
1914.
822.
2563.
1845.
668.
countries
1114.
1232.
summing
2532.
1749.
2272.
1330.
1649.
989.
2127.
1663.
1137.
1131.
2537.
1575.
2406.
1716.
187.
561.
2555.
1672.
1179.
972.
1367.
1156.
327.
557.
518.
1327.
983.
2448.
894.
supersequence
buddy
1731.
1587.
2538.
2320.
1493.
2587.
erect
179.
patching
882.
2586.
1250.
1267.
599.
876.
85.
1015.
877.
1590.
653.
rich
310.
1502.
2635.
cracking
1942.
1588.
1877.
1038.
2549.
174.
1719.
994.
2343.
1307.
3sum
550.
identifier
2131.
1317.
898.
1283.
2217.
1539.
1802.
802.
2627.
832.
switcher
1237.
792.
2316.
848.
1129.
1648.
1075.
991.
1627.
2421.
94.
524.
1095.
1561.
2600.
2150.
2305.
satisfiability
1052.
1735.
verbal
1358.
1115.
511.
intersections
577.
scheduler
844.
1414.
1883.
1093.
864.
2410.
1446.
recurring
powered
2146.
724.
1707.
1385.
1185.
2523.
2511.
1855.
2202.
636.
704.
1157.
plate
2526.
1529.
870.
1174.
1943.
873.
texts
581.
649.
1703.
765.
1865.
reducing
immutable
2337.
1130.
2643.
1443.
human
881.
1498.
319.
2606.
805.
819.
1504.
965.
1376.
scheduling
1738.
2124.
k-th
1278.
837.
2322.
1578.
680.
2427.
1370.
814.
1889.
53.
1377.
1218.
1680.
past
2265.
2120.
995.
1932.
2281.
2126.
1016.
1838.
2573.
1339.
comparisons
1155.
973.
160.
2119.
897.
2333.
721.
1315.
828.
1252.
793.
1661.
878.
1310.
doubled
1341.
1404.
682.
2542.
floored
784.
1362.
313.
82.
820.
2325.
52.
1508.
1028.
2231.
1693.
842.
1234.
bipartite?
971.
1070.
1073.
892.
591.
extracted
176.
2591.
1139.
reinitialize
998.
1467.
1615.
1739.
lisp
2106.
additions
memoize
838.
1512.
2221.
735.
1614.
toe
619.
1292.
850.
1227.
1382.
1293.
1705.
2435.
646.
1048.
754.
2629.
summary
1815.
1622.
951.
2104.
1834.
1190.
777.
ii:
1732.
1848.
1609.
chunked
953.
779.
1393.
1589.
2441.
1447.
2545.
1857.
1936.
illumination
39.
198.
865.
817.
1297.
888.
1371.
1640.
ambiguous
787.
1513.
curry
1081.
2269.
628.
62.
pooling
brace
83.
2-row
705.
1091.
701.
996.
63.
slowest
2432.
1309.
309.
1713.
304.
970.
1722.
1123.
2551.
1026.
1186.
593.
1192.
1916.
746.
2201.
1431.
706.
rising
1901.
879.
1254.
164.
1494.
2109.
2132.
mk
1360.
1517.
1524.
782.
1044.
2567.
1610.
2302.
2516.
1819.
2614.
1191.
86.
811.
1455.
1235.
2304.
781.
traffic
1023.
743.
2566.
1521.
2426.
872.
338.
1903.
croaking
2513.
61.
1591.
taxes
2213.
788.
tour
1941.
964.
647.
2619.
1047.
856.
1934.
2602.
605.
mirror
712.
1354.
servings
1200.
610.
2267.
1025.
2114.
1298.
1413.
154.
2208.
547.
966.
1266.
69
738.
2420.
1576.
1923.
859.
1475.
1383.
65.
521.
2293.
1453.
1172.
transformable
600.
1433.
2250.
889.
2223.
641.
2624.
2415.
2309.
1094.
1368.
1348.
687.
1737.
1904.
2129.
1736.
2256.
2544.
1012.
1856.
1641.
1326.
viii
1629.
brainpower
1379.
2300.
2610.
conflicts
1526.
2319.
698.
2326.
2434.
342.
2565.
1049.
1839.
2134.
1233.
1808.
2428.
2507.
dining
1300.
747.
1905.
1290.
180.
1465.
?'s
318.
1894.
states
558.
1711.
negabinary
2554.
2639.
861.
1837.
1643.
846.
1457.
2648.
677.
1536.
71.
2558.
1805.
1072.
177.
1888.
1595.
2437.
880.
2409.
627.
1535.
1534.
1043.
1825.
2286.
958.
2148.
validate
2301.
2226.
638.
810.
771.
611.
329.
155.
1552.
1830.
wiggle
785.
spliced
2612.
1480.
1013.
substitutions
1321.
2581.
732.
1106.
2446.
1579.
2636.
324.
696.
eventual
1631.
1175.
colorful
1725.
2535.
2203.
1314.
168.
1343.
1938.
2246.
2290.
1568.
ordinal
1305.
977.
762.
1679.
1177.
1466.
options
reflection
726.
797.
tiling
vii
868.
2649.
2438.
2135.
1598.
1803.
2572.
sqrt(x)
1275.
negations
1419.
1750.
2294.
tables
1092.
1861.
736.
753.
decompress
1514.
1686.
1593.
659.
1585.
1655.
1223.
847.
2103.
607.
1211.
1342.
bounded
699.
race
2564.
740.
990.
appearing
783.
815.
1482.
1394.
1812.
525.
1366.
1045.
directors
inequality
k-concatenation
2623.
528.
1053.
341.
670.
2102.
appropriate
2637.
2140.
1818.
grids
1220.
2577.
1931.
2521.
2433.
categorize
1828.
1806.
1473.
1879.
1353.
1-bit
849.
1559.
1832.
853.
72.
730.
1386.
1027.
841.
728.
598.
2276.
1388.
length-3
2209.
1922.
542.
830.
2520.
530.
2447.
2646.
zero-filled
2235.
183.
1745.
1201.
1656.
2444.
1295.
2287.
982.
509.
347.
88.
1306.
661.
investments
1019.
completeness
152.
2419.
1224.
541.
subdivided
893.
984.
2266.
749.
693.
733.
1032.
2-bit
1491.
1311.
826.
321.
mutated
1018.
1335.
1171.
2216.
1734.
1870.
1528.
1743.
1717.
2296.
1144.
1472.
1817.
1158.
1583.
freedom
1316.
1665.
web
968.
1509.
731.
1071.
745.
1637.
1448.
2138.
567.
188.
713.
626.
provinces
1603.
1544.
2261.
2641.
1869.
845.
2344.
h2o
2601.
2105.
2251.
2275.
deep
1569.
1876.
2218.
196.
833.
earning
2630.
955.
1630.
667.
2424.
1530.
167.
181.
1089.
563.
1226.
182.
1829.
595.
1683.
1289.
2242.
91.
1141.
836.
1051.
589.
2615.
679.
307.
2279.
854.
685.
2255.
2503.
1405.
2327.
1210.
2257.
523.
2628.
2430.
packaging
2561.
2115.
aaa
2402.
1619.
617.
1684.
1851.
515.
1103.
stamping
camelcase
69.
1499.
551.
1276.
1647.
1935.
2501.
1346.
2529.
816.
1863.
676.
1147.
2443.
1471.
866.
2603.
975.
507.
2508.
839.
1496.
1319.
1146.
959.
46.
destroying
1029.
1721.
81.
1001.
710.
straights
2350.
parsing
4sum
1439.
1050.
1484.
1626.
reversal
1827.
1334.
306.
2317.
1161.
2626.
abbreviating
1470.
703.
1008.
829.
1871.
1140.
587.
874.
2125.
2122.
835.
1014.
2528.
1657.
654.
1712.
1169.
1531.
169.
2311.
1204.
697.
1351.
1410.
2576.
988.
2506.
97.
316.
957.
891.
884.
1478.
1031.
1037.
594.
1423.
66.
1080.
2207.
atoms
2540.
judgement
2568.
831.
337.
344.
loud
1592.
solver
centre
2227.
809.
vegan-friendly,
586.
1929.
1332.
1007.
858.
2274.
2303.
725.
1024.
1807.
502.
51.
821.
331.
1653.
1594.
1262.
552.
1347.
560.
2644.
1452.
1325.
744.
767.
790.
566.
786.
1476.
1601.
1287.
1373.
775.
1187.
2597.
1460.
780.
695.
filesystem
2598.
clone
640.
1897.
2611.
621.
1497.
1510.
520.
672.
2258.
1184.
2607.
1374.
2136.
1726.
1357.
1022.
2348.
2584.
526.
1249.
1547.
1664.
707.
1054.
2525.
166.
1392.
717.
1912.
1881.
bigram
84.
1866.
2288.
1520.
1515.
629.
2328.
1239.
961.
1483.
1437.
1558.
1697.
778.
863.
1395.
608.
2111.
1178.
1219.
58.
1556.
1380.
1505.
1318.
1255.
1418.
1033.
lr
1581.
632.
639.
1035.
2289.
993.
1878.
2108.
576.
840.
2280.
2224.
1148.
1041.
2530.
1291.
620.
1261.
formation
2260.
1096.
1599.
1882.
664.
1401.
2318.
689.
(atoi)
1375.
2625.
1621.
1884.
stitching
1896.
1695.
825.
2618.
1034.
1372.
688.
2248.
572.
330.
2580.
1195.
1574.
1611.
2449.
77.
dependencies
686.
575.
2620.
crawler
1662.
55.
175.
1030.
2236.
1910.
1926.
796.
1399.
1036.
1403.
2407.
2225.
553.
1945.
2617.
univalue
stairs
1463.
1349.
336.
similarity
2609.
1860.
1481.
171.
1718.
823.
2543.
orderly
67.
648.
969.
799.
1268.
1296.
1668.
1700.
1458.
1900.
1288.
2570.
1944.
shuffle
606.
1005.
1527.
1729.
diminishing-valued
684.
1253.
2332.
2522.
1345.
1010.
1872.
2582.
2578.
1143.
956.
827.
1333.
669.
539.
1927.
2593.
48.
tuple
1079.
1338.
1862.
79.
1706.
1691.
1125.
857.
2110.
1441.
2147.
1251.
1633.
801.
1397.
1624.
fizz
195.
1742.
768.
895.
1824.
345.
2299.
350.
2585.
855.
986.
masking
2222.
2442.
1489.
2234.
691.
1620.
1312.
1537.
1260.
2588.
692.
2589.
"ddbbbdaa"
delete.
"dddaa"
"deeedbbcccbdaa",
"eee"
"pbbcggttciiippooaais",
"ps"
cells:
[[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]
movement),
movement).
(rightward
[[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]
[[2,1,0],[1,0,0]]
(downward
(k,
mycalendar
[15,
30]]
mycalendar.book(20,
mycalendar();
mycalendar.book(15,
["mycalendar",
25);
mycalendar()
25],
mycalendar.book(10,
preference
sandwich
students[j]
sandwiches[i]
[1,0,0,1].
cafeteria
stack)
[1,1,0].
[1,0,1].
queue).
queue's
students.length,
sandwiches.length
sandwiches.
sandwiches
(j
[1,1,0,0],
[0,0,1,1].
solution()
shortening
http://tinyurl.com/4e9iak.
solution();
"https://leetcode.com/problems/design-tinyurl"
guranteed
longurl.
obj.encode(url);
decode(string
restriction
companion
tinyurl.
shorturl
tiny
encode(string
shorturl.
longurl)
obj.decode(tiny);
shorturl)
encode/decode
https://leetcode.com/problems/design-tinyurl
url.
"morris",
"programs",
equivalence
[d,e,o],
"hdld"
[d,m],
s2[i]
[e,i].
[k,r,s],
"aauaaaaada".
"makkek"
"hdld".
[l,r].
relation:
implies
"parker",
transitivity:
"sourcecode"
reflexivity:
"aauaaaaada"
s2.length,
basestr
symmetry:
"world",
basestr.
[l,p],
[a,o,e,r,s,c],
equivalency
"makkek".
"hold"
[m,p],
[g,t]
"eed",
[h,w],
"parser"
[a,o],
2020-09-07
900001
trans_id
900003
(7000
3000)
900002
-4000
+------------+------------+------------+---------------+
charlie's
2020-08-07
4000)
2020-09-02
-3000
2020-09-01
involving
transferred
11000
2020-09-12
2020-08-01
(6000
8000.
11000.
10000.
transacted_on
2020-09-11
"iloveu"
"dcba"
"(ed(et(oc))el)"
"etco",
"(u(love)i)"
"oc",
"(abcd)"
"[9]",
"[3,
5]",
toeplitz.
"[1,
[[1,2],[2,2]]
3]",
"[5,
"[4]".
[[1,2,3,4],[5,1,2,3],[9,5,1,2]]
1]",
2]"
2]",
"[2,
"ulacfd",
"xbdef",
"jiz",
bsuffix
"jizalu"
"cfd"
"ula",
asuffix
ssuffix,
ssuffix
asuffix,
"ulaalu",
bsuffix.
"alu"
"y",
bprefix
"xecab"
aprefix
sprefix
"ula"
[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
unordered,
"/\\"
'\\'.
/\.
'\',
backslash
'\'
\
["
/","/
\/,
"\\/"
escaped,
["/\\","\\/"]
/","
trainer's
trainer
trainers[3]
players.length,
trainers[0]
training
[8,2,5,8]
players[i]
trainers[j]
players[i],
matchings
trainer.
trainers,
players,
trainer,
[4,7,9],
players[0]
trainers.length
players[1]
referee_id
zack
jane
+----+------+------------+
"cbzxy"
'a's.
[2,0,6],
[0,9,0]]
[[0,6,0],
[[0,6,0],[5,8,7],[0,9,0]]
[5,8,7],
[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
collecting
[0,3,0],
gold,
gold.
[9,0,20]]
[[1,0,7],
nums[2]),
(105)
nums[3]^2
nums[1]),
accum
sum(accum,
curr)
(6)
nums[2]^2
init=100.
array.reduce
curr
processed.
fn(val,
curr;
init.
nums[1]^2
114
fn(init,
init=0.
init,
(114)
reducer
init
nums[0]^2
[[1,1,5],[10,10,5]]
bombs.
bombs[i].length
[[2,1,3],[6,1,4]]
max(1,
detonated.
detonated
bombs.length
bomb.
[[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]
detonating
bombs[i]
affected.
bomb,
detonates
bombs,
detonated,
felt.
column)
orthogonal
moving.
0.06250
chessboard)
(2,1))
0.0625.
arr[lefti]
arr[lefti
arr[righti]
0100
[8,0,4,4]
[2,7,14,8]
[[0,1],[1,2],[0,3],[3,3]]
[4,8,2,10],
[[2,3],[1,3],[0,0],[0,3]]
"aazz"
